{"version":3,"sources":["TimerInterface/Table.js","TimerInterface/Scroll.js","TimerInterface/Average.js","TimerInterface/CustomAverage.js","TimerInterface/ScrambleDisplay.js","TimerInterface/CountDown.js","TimerInterface/MobileTimer.js","TimerInterface/HeaderContent.js","TimerInterface/Footer.js","TimerInterface/ButtonTop.js","TimerInterface/ButtonBottom.js","TimerInterface/TimerClock.js","TimerInterface/TimerInterface.js","Dashboard/GraphNumberSolves.js","Dashboard/GraphAverages.js","Dashboard/Card.js","Dashboard/CardList.js","Settings/ImportSolves.js","Settings/ImportManual.js","Settings/DownloadSolves.js","Settings/DownloadCSV.js","Settings/InspectionTime.js","Settings/ChangeAO1.js","Settings/ChangeAO2.js","Settings/Toggles.js","Settings/ChangeUsername.js","Settings/ChangePassword.js","Settings/DeleteAccount.js","Settings/Settings.js","Dashboard/GraphDonut.js","Dashboard/Summary.js","Dashboard/Dashboard.js","NewSessionOptions.js","NewRegister.js","NewSignIn.js","App.js","Scramble.js","serviceWorker.js","index.js"],"names":["compare","a","b","solveid","compare2","Body","props","id","length","finalAverages","solves","sort","loopNumber","aoNum","averageMS","divisor","totalMS","solvesArray","dnfCount","i","isplustwo","push","Number","millisecondstwo","isdnf","milliseconds","pop","shift","finalAverage","hours","Math","floor","minutes","seconds","round","finalAverages2","solves2","loopNumber2","aoNum2","solveNumber","rows","map","row","index","key","className","plustwo","solve","style","color","styles","backgroundColor","borderColor","onClick","removeTime","type","togglePlusTwo","toggleDNFInterface","Table","plusTwo","solvesApp","Scroll","borderTop","isBackgroundLight","borderBottom","isMobile","overflowY","height","children","Average","avgMS","average","avg","CustomAverage","allSolves","String","slice","sortedArray","includes","max","newSortedArray","filter","splice","ScrambleTable","megaminxScramble","Scramble","isDisplayScrambleSmall","isDisplayScrambleMedium","scrambleRegular","multiBLDScramble","CountDown","onTouchEnd","startTimerDuringCountDownMobile","onMouseUp","countDown","MobileTimer","onTouchStart","stopMobile","onMouseDown","stopMobileRoute","isTimerDisabled","timerFormatted","HeaderContent","isMobileGoing","isSignedIn","display","justifyContent","verticalAlign","JSON","parse","localStorage","getItem","marginLeft","marginRight","dashboard","username","signIn","Footer","isSessionName","sessionInterface","sessionName","puzzleType","ButtonTop","isManualEnter","beginMobile","ButtonBottom","marginTop","TimerClock","state","timeInput","event","setState","target","value","submit","e","keyCode","puzzle","endMS","y","match","z","reverse","number","compareMilliseconds","halfDate","moment","unix","Date","getTime","format","converter","now","minimumTime","solveData","displayTimeFormatted","twoFormatted","sessions","sendToSolves","offline","getInterfaceSolvesSingle","finalSolve","sendToDB","send","setItem","stringify","setTimeout","getSolveFromInterface","final","confettiLaunch","document","getElementById","scramble","input","this","secondsTwo","paddingBottom","autoComplete","onChange","autoFocus","background","outline","width","fontSize","addEventListener","Component","window","onkeydown","body","newChart","TimerInterface","start","millisecondsTwo","going","preventStartLoop","preventStartLoopMobile","isDisableSpacebar","isCountDownActivated","isCountDownGoing","countingDown","keyPressOne","keyPressTwo","test","disableCommand","beginAfterDelayMobile","beginAfterDelay","isGreen","preventCommand","timerStart","interval","setInterval","time","interval2","interval3","begin","getCountDownNumber","beginFunction","isNewSessionFunction","startTimerDuringCountDown","clearTimeout","countDownGoing","clearInterval","countdownInterval","startTimer","disable","commandFalse","stop","countDownRunFunction","inspectionTime","runCountingDown","countDownRun","delayTimeout","greenTimeout","beginAfterDelaySafety","timerStartMobile","countDownRouteMobile","timerMobileTimeout","doAll","stopMobile2","stopMobile3","interval4","interval5","interval6","countDownRunMobile","changeColor","isFormat","fetch","method","headers","then","response","json","deleteDB","solvesInterface","removeSolveFromSolvesState","newSession","newSessionApp","isConfirmSolveDelete","confirm","removeSolveFromState","removeButtonFocus","removeFocus","getElementsByClassName","blur","removeButtonFocusPlusTwo","removeButtonFocusDNF","togglePlusTwoInterface","xyz","x","temporary","getInterfaceSolves","toggleDNF","colorRegular","keyPressSafetyUndo","keyPressSafety","keyPressStart","keyPressTrue","disableCommandFalse","keyPressSafetyUndoStop","keyPressSafetyStop","keyPressStop","preventCommand1","console","log","stateValue","timeElapsed","position","getTheme","Card","deleteSession","removeSessionFromState","session","solvesToDB","uniqueSession","removeFromSolvesInterface","removeFromSolves","uniqueSessionsDB","indexOf","getSessionNumber","getInterfaceSession","getSessionNameOnLoad","c","loadPastSessionSolveData","deleteSessionWithConfirm","isConfirmSessionDelete","removeSessionDB","removeFromUniqueSessionsDB","deleteFunc","runDelete","getSolves","sessionDisplayName","sessionname","date","puzzleBest","puzzleWorst","ao5","mo3","ao5BestAndWorst","ao12","ao12BestAndWorst","ao25","ao25BestAndWorst","ao50","ao50BestAndWorst","ao100","ao100BestAndWorst","ao200","ao200BestAndWorst","ao500","ao500BestAndWorst","ao1000","ao1000BestAndWorst","ao5000","ao5000BestAndWorst","ao10000","ao10000BestAndWorst","ind","CardList","ao","timesMS","bestWorstAverage","averagesMS","bestAndWorst","min","solvesSorted","rawDate2","rawDate3","rawDate4","uniqueSessions","solve2","Object","keys","interfaceSession","solvenumber","rawDate","GraphNumberSolves","chartRef","React","createRef","indexNumber","solvesChart","myChartRef","current","getContext","destroy","Chart","data","labels","dates","timePeriod","indexNumberGraphs","datasets","label","numberSolves","pointRadius","options","events","title","text","fontColor","responsive","scales","xAxes","unit","displayFormats","distribution","gridLines","ticks","yAxes","beginAtZero","maxTicksLimit","stepSize","legend","ref","ImportSolves","isIncorrectFormat","jsonError","err","importLoop","sessionArray","importSolves","propertiesArray","values","values1","solve1","solveToDB","msTwo","hoursTwo","minutesTwo","timeTwo","abc2","dateString","toISOString","getSolvesFromImport","addToUniqueSessionsDB","manageSolveData","handleButtonClick","handleImportSolvesSubmit","test1","sessionNumber","isImportFromFile","handleImportSolvesChange","cols","isImportFromFileFunc","ImportManual","count","pastSessionName","pastPuzzle","pastDate","isDateWrong","isSolveEntered","isTimeWrong","getSession","result","tempSession","importManualTextAreaName","prevState","ms","timeFormatted","one","two","three","four","msTwoFinal","solvesToAppState","multiScramble","split","letter","getSolvesFromImportManual","handleImportManualSubmit","isManual","handleImportManualTimeChange","handleImportManualScrambleChange","handleImportManualDateChange","handleImportManualNameChange","getPuzzleType","isManualFunc","DownloadSolves","formattedSolves","finalOutput","download","filename","element","createElement","setAttribute","encodeURIComponent","appendChild","click","removeChild","getSolvesFromDashboard","masterObject","sessionData","objTest","solveArray","export2csv","tableData","rowData","column","join","href","URL","createObjectURL","Blob","sortedSolves","header","date2","substring","InspectionTime","placeholder","inspectionTimeToState","changeInspectionTime","inspectionTimeFromState","isInspectionSubmitted","isInvalidInspection","ChangeAO1","aoNumInput","aoNumChange","aoNumState","isAoSubmitted","isInvalidAoNum","ChangeAO2","aoNumInput2","aoNumChange2","aoNumState2","isAoSubmitted2","isInvalidAoNum2","Toggles","htmlFor","isConfirmSolve","isConfirmSession","isDisableTimer","offlineConfirm","didOnlineSyncWork","isSyncUnsuccessful","didOfflineSyncWork","isUploading","isDownloading","ChangeUsername","usernameExists","isUsernameChanged","changeUsername","ChangePassword","oldPassword","newPassword","newPasswordReenter","isPasswordChanged","isWrongPassword","isPasswordMatch","changePassword","DeleteAccount","deleteAccountPassword","isWrongPassword2","deleteAccountConfirm","Settings","importSolvesTextArea","importManualTextAreaTime","importManualTextAreaScramble","importManualTextAreaDate","aonumber","aonumber2","inspection","checked","confirmSolveDelete","mobileStartStop","manualEnter","confirmSessionDelete","disableTimer","getOffline","offlineCount","offlineDifference","summary","offlinesolves","navigator","onLine","theme","confirmsession","confirmsolve","inspectiontime","mobile","disabletimer","alert","removeItem","solvesOffline","allsolves","getManualEnterOnMount","manualenter","getMobileOnMount","getConfirmSessionOnMount","solveconfirm","getDisableTimerOnMount","getConfirmSolveOnMount","selectedIndex","deleteAccount","user","themeToDB","signout","getAveragesMS","DownloadCSV","getCategories","minutesToHours","secondsTotal","Graph","changeData","optionsArray","categories","selectbox","option","newOption","add","optionsTimePeriod","changeIndexNumber","changeTimePeriod","testArray","Set","averages","buildChart","userCallback","item","Donut","puzzles","numberSolvesCategory","animation","Summary","columns","th","td","Dashboard","isAnalytics","sessionsDBunique","datesWeek","datesMonth","datesYear","allDates","datesDBunique","averagesWeek","averagesMonth","averagesYear","allDateAverages","dateAverages","isSolves","categoryDates","cardSortValue","optionSelected","countNumberSolves","countNumberSolvesWeek","countNumberSolvesMonth","countNumberSolvesYear","allCounts","puzzlesSummary","solvesSortedCardList","sortSolves","sortDates","sortCategories","getPuzzles","sortPuzzles","consolidateAllDatesAndSolves","getBestTimes","allSessions","solvesByUnix","compareUnix","threshold","uniqueDates","sessionsDBuniqueInOrder","bestTimes","worstTimes","times","solvesInOrder","lowestMS","highestMS","numberSolvesWeek","numberSolvesMonth","numberSolvesYear","masterArray","numberSolvesWeekCount","numberSolvesMonthCount","numberSolvesYearCount","dateAverage","Array","from","category","categorySolves","categoryDatesWeek","categorySolvesWeek","solvesWeek","categoryDatesMonth","categorySolvesMonth","solvesMonth","categoryDatesYear","categorySolvesYear","solvesYear","totalMSWeek","countWeek","totalMSMonth","countMonth","totalMSYear","countYear","toFixed","averageWeek","averageMonth","averageYear","allPuzzles","puzzlesWeek","puzzlesMonth","puzzlesYear","numberSolvesCategoryAllTime","numberSolvesCategoryWeek","numberSolvesCategoryMonth","numberSolvesCategoryYear","puzzleSolves","puzzleDates","puzzleSolvesWeek","puzzleDatesWeek","puzzleSolvesMonth","puzzleDatesMonth","puzzleSolvesYear","puzzleDatesYear","countNumberSolvesCategory","countNumberSolvesCategoryWeek","countNumberSolvesCategoryMonth","countNumberSolvesCategoryYear","puzzleBestTimesSummary","timesAndPuzzle","allTimesMS","allTimes","finalAveragesWeek","finalAveragesMonth","finalAveragesYear","allMS","allMSWeek","allMSMonth","allMSYear","solvesArrayWeek","solvesArrayMonth","solvesArrayYear","array1","newUsername","getNewUsername","loadUser","usernameChanged","password","signedIn","sessionStorage","dark","light","res","analytics","settings","solvesRoute","optionSelectOnMount","array2","val","sel","opts","counter","j","averageArray","msTotal","offlineState","scrambleQuantityMinus","scrambleQuantityPlus","inspectionTimePlus","inspectionTimeMinus","scrambleQuantity","NewSessionOptions","clearScramble","sessionLength","createNewSession","clearSessionInterfaceSolves","sessionNameOnChange","isNewSession","sessionOnChange","Register","name","isUserExist","isNameLengthWrong","isPassWordLengthWrong","ceil","random","typeCharacter","clearSolvesState","register","SignIn","isWrongUsername","isSigningIn","timeout","App","isHome","isRegistered","isDashboard","isCreateNewSession","isOffline","isGetSolvesOnMount","receive","addToUniqueSessionsDBOnMount","apply","parsedData","getSolvesOnMountPrevent","getUserInfo","scramblelength","confirmSession","confirmSolve","getAllSolves","setScrambleLength","scrambleLength","boolean","concat","fire","particleRatio","defaults","origin","decay","angle","confetti","assign","particleCount","spread","startVelocity","isSessionNameFunc","twothree","fourfive","sixseven","pyraminxNotation","pyraminxNotationEnd","skewb","pastScrambles","pastScramble","pastScramble2","pyraminxEnd","fourfour","first2","second2","onefour","first","second","d","f","g","h","end","endOptions","clockPuzzle","arrayTop","arrayBottom","topRunningTotal","bottomRunningTotal","valueTop3","valueTop4","valueBottom4","scrambleEnd","scrambleOptions","scrambleOptions2","letters","chance","multiBLD","pastScrambleObj","countMultiBLD","i2","ind2","isLocalhost","Boolean","location","hostname","registerValidSW","swUrl","config","serviceWorker","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","process","contentType","get","status","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c9757e72.chunk.js","sourcesContent":["import React from \"react\" \n\n\n\nconst compare = (a, b) => {\n    if (a.solveid > b.solveid){\n        return -1\n    }\n    if (a.solveid < b.solveid){\n        return 1\n    }\n    return 0\n}\n\nconst compare2 = (a,b) => {\n    return a-b\n}\n\n\n\n\nconst Body = (props) => {\n    let id \n    if (props.id.length){\n        id=true\n    }else{\n        id=false\n    }\n    let finalAverages = []\n    let solves = [...props.solves].sort(compare)\n    let loopNumber = props.solves.length - (props.aoNum-1)\n    while(loopNumber>0){\n        let divisor = 0\n        let totalMS = 0\n        let solvesArray = []\n        let averageMS = 0\n        let dnfCount = 0\n        for (let i = 0; i < props.aoNum; i++){\n            divisor++\n            if(solves[i].isplustwo){\n                solvesArray.push(Number(solves[i].millisecondstwo))\n            }else if (solves[i].isdnf) {\n                dnfCount++\n            }else{\n                solvesArray.push(Number(solves[i].milliseconds))\n            }\n        }\n        solvesArray.sort(compare2)\n        if(dnfCount===0){\n            solvesArray.pop()\n        }\n        solvesArray.shift()\n        for (const milliseconds of solvesArray){\n            totalMS += Number(milliseconds)\n        }\n        loopNumber--\n        averageMS = totalMS / (divisor-2)\n        solves.shift()  \n        let finalAverage = \"\"\n        if(dnfCount>1){\n            finalAverage+=\"DNF\"\n        }else{\n            let hours = Math.floor((averageMS / 3600000))\n            let minutes = Math.floor((averageMS / 60000)%60)\n            let seconds = Math.floor((averageMS / 1000)%60)\n            let milliseconds = Math.round(averageMS % 1000)\n            finalAverage = \"\"\n            if (hours > 0){\n                finalAverage += hours +\":\"\n            }\n            if (minutes > 0){\n                finalAverage += minutes +\":\"\n                if(seconds<10){\n                    finalAverage+=\"0\"\n                }\n            }\n            finalAverage += seconds + \".\"\n            if (milliseconds < 10){\n                finalAverage += \"00\"\n            }\n            if (milliseconds < 100){\n                if (milliseconds > 9){\n                    finalAverage += \"0\"\n                }\n            }\n            finalAverage += milliseconds\n        }\n        finalAverages.push(finalAverage)\n    }\n\n\n\n    let finalAverages2 = []\n    let solves2 = [...props.solves].sort(compare)\n    let loopNumber2 = props.solves.length - (props.aoNum2-1)\n    while(loopNumber2>0){\n        let divisor = 0\n        let totalMS = 0\n        let solvesArray = []\n        let averageMS = 0\n        let dnfCount = 0\n        for (let i = 0; i < props.aoNum2; i++){\n            divisor++\n            if(solves2[i].isplustwo){\n                solvesArray.push(Number(solves2[i].millisecondstwo))\n            }else if (solves2[i].isdnf) {\n                dnfCount++\n            }else{\n                solvesArray.push(Number(solves2[i].milliseconds))\n            }\n        }\n        solvesArray.sort(compare2)\n        if(dnfCount===0){\n            solvesArray.pop()\n        }\n        solvesArray.shift()\n        for (const milliseconds of solvesArray){\n            totalMS += Number(milliseconds)\n        }\n        loopNumber2--\n        averageMS = totalMS / (divisor-2)\n        solves2.shift()  \n        let finalAverage = \"\"\n        if(dnfCount>1){\n            finalAverage+=\"DNF\"\n        }else{\n            let hours = Math.floor((averageMS / 3600000))\n            let minutes = Math.floor((averageMS / 60000)%60)\n            let seconds = Math.floor((averageMS / 1000)%60)\n            let milliseconds = Math.round(averageMS % 1000)\n            finalAverage = \"\"\n            if (hours > 0){\n                finalAverage += hours +\":\"\n            }\n            if (minutes > 0){\n                finalAverage += minutes +\":\"\n                if(seconds<10){\n                    finalAverage+=\"0\"\n                }\n            }\n            finalAverage += seconds + \".\"\n            if (milliseconds < 10){\n                finalAverage += \"00\"\n            }\n            if (milliseconds < 100){\n                if (milliseconds > 9){\n                    finalAverage += \"0\"\n                }\n            }\n            finalAverage += milliseconds\n        }\n        \n        finalAverages2.push(finalAverage)\n    }\n    \n    \n    let solveNumber = props.solves.length \n    const rows = props.solves.sort(compare).map((row, index) => {\n        solveNumber --\n        return (\n            <tr key={index}>\n                <td className=\"tableIndex\"><h2>{solveNumber+1 +  \".\"}</h2></td>\n                {row.isplustwo \n                ? \n                <td><h2>{row.plustwo}</h2></td>\n                :\n                <td><h2>{row.solve}</h2></td>\n                }\n                <td><h2>\n                    <button style={{color: props.styles ? \"rgb(23, 23, 23)\" : \"whitesmoke\", \n                    backgroundColor: props.styles ? \"whitesmoke\" : \"rgb(23, 23, 23)\", \n                    borderColor: props.styles ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} \n                    className=\"button2 remove\" onClick={()=>props.removeTime(index, row.solveid, row.milliseconds)}>Remove</button>\n                </h2></td>\n                <td><h2>\n                    <button type=\"button\" style={{color: \n                    props.styles \n                        ? \n                        (row.isplustwo ? \"whitesmoke\":\"rgb(23, 23, 23)\" )\n                        : \n                        (row.isplustwo ?\"rgb(23, 23, 23)\":\"whitesmoke\" ), \n                    backgroundColor: props.styles \n                        ? \n                        (row.isplustwo ? \"rgb(23, 23, 23)\" : \"whitesmoke\")\n                        : \n                        (row.isplustwo ? \"whitesmoke\" : \"rgb(23, 23, 23)\"), \n                    borderColor: props.styles \n                        ? \n                        (row.isplustwo ? \"whitesmoke\": \"rgb(23, 23, 23)\" )\n                        : \n                        (row.isplustwo ?\"rgb(23, 23, 23)\":\"whitesmoke\") }} \n                    className=\"button2 remove2\" onClick={()=>props.togglePlusTwo(row.solveid)}>+2</button>\n                </h2></td>\n\n                <td><h2>\n                <button style={{color: props.styles \n                        ? \n                        (row.isdnf ? \"whitesmoke\":\"rgb(23, 23, 23)\" )\n                        : \n                        (row.isdnf ? \"rgb(23, 23, 23)\":\"whitesmoke\" ), \n                    backgroundColor: props.styles \n                        ? \n                        (row.isdnf ? \"rgb(23, 23, 23)\" : \"whitesmoke\")\n                        : \n                        (row.isdnf ? \"whitesmoke\"  : \"rgb(23, 23, 23)\"), \n                    borderColor: props.styles \n                        ? \n                        (row.isdnf ? \"whitesmoke\" : \"rgb(23, 23, 23)\" )\n                        : \n                        (row.isdnf ? \"rgb(23, 23, 23)\": \"whitesmoke\" ) }}  \n                    className=\"button2 remove3\" onClick={()=>props.toggleDNFInterface(row.solveid)}>DNF</button>\n                </h2></td>\n\n                {id ? \n                <td><h2>\n                    {finalAverages[index]}\n                </h2></td>\n                :\n                <td> </td>\n                }\n                {id ? \n                <td><h2>\n                    {finalAverages2[index]}\n                </h2></td>\n                :\n                <td> </td>\n                }\n            </tr>\n        )\n    })\n\n\n    // console.log(props.solvesApp)\n    // if(props.solvesApp){\n    //     if(props.solvesApp===\"loading...\"){\n    //         return <h1><tbody>Loading...</tbody></h1>\n    //     }else{\n    //         return <tbody>{rows}</tbody>\n    //     }\n    // }\n\n    return <tbody>{rows}</tbody>\n\n}\n\nconst Table = props => {\n    const {solves, removeTime, plusTwo} = props\n    return(\n    props.solvesApp===\"loading...\" ? \n    <h1 className=\"light\">Loading...</h1>\n    :\n        <table id=\"hello\" className=\"light\">\n            <thead>\n                <tr>\n                    <th></th>\n                    <th></th>\n                    <th></th>\n                    <th></th>\n                    <th></th>\n                    {props.id.length>2 ? \n                    (\n                    props.solves.length > props.aoNum-1 ? \n                    <th>\n                        <h2>ao{props.aoNum}</h2>\n                    </th>\n                    :\n                    <th></th>\n                    )\n                    :\n                    <th></th>\n                    }\n                    {props.id.length ? \n                    (\n                    props.solves.length>props.aoNum2-1 ? \n                    <th>\n                        <h2>ao{props.aoNum2}</h2>\n                    </th>\n                    :\n                    <th></th>\n                    )\n                    :\n                    <th></th>\n                    }\n                    </tr>\n            </thead>\n            <Body \n            solvesApp={props.solvesApp}\n            id={props.id}\n            aoNum={props.aoNum}\n            aoNum2={props.aoNum2}\n            toggleDNFInterface={props.toggleDNFInterface}\n            togglePlusTwo={props.togglePlusTwo}\n            plusTwo={plusTwo} \n            solves={solves} \n            removeTime={removeTime} \n            styles={props.styles}\n            />\n        </table>\n    )\n}\n\n\nexport default Table","import React from \"react\"\n\nconst Scroll = (props) => {\n    return(\n    <div style={{borderTop: props.isBackgroundLight ? \"rgb(23, 23, 23) .1px solid\" : \"whitesmoke .1px solid\",  borderBottom: props.isBackgroundLight ? \"rgb(23, 23, 23) .1px solid\" : \"whitesmoke .1px solid\"}}>\n        {props.isMobile ? \n        <div id=\"scroll\" className=\"scroll\" style={{overflowY:\"scroll\", height:\"170px\"}}>{props.children}</div>\n        :\n        <div id=\"scroll\" className=\"scroll\" style={{overflowY:\"scroll\"}}>{props.children}</div>\n        }\n    </div>\n    )\n}\n\nexport default Scroll","import React from \"react\";\n\nconst Average = (props) => {\n    var totalMS = 0\n    var divisor = 0\n    var avgMS = 0\n    var average = \"0.000\"\n    const avg = props.solves.map(solve=>{\n        if (solve.isdnf){\n            // dnfDivisor ++\n        }\n        if (solve.isplustwo && !solve.isdnf){\n            totalMS += Number(solve.millisecondstwo)\n            divisor += 1\n        }else if(solve.isdnf){\n            totalMS += 0\n        }else{\n            totalMS += Number(solve.milliseconds)\n            divisor += 1\n        }\n        return(null)\n    })\n    if (divisor > 0){\n        if (divisor !== 0){\n            avgMS = (totalMS/divisor)\n        }\n        var hours = Math.floor((avgMS / 3600000))\n        var minutes = Math.floor((avgMS / 60000)%60)\n        var seconds = Math.floor((avgMS / 1000)%60)\n        var milliseconds = Math.round(avgMS % 1000)\n        average = \"\"\n        if (avgMS > 3600000){\n            average += hours +\":\"\n        }\n        if (avgMS > 60000){\n            average += minutes +\":\"\n            if (seconds<10){\n                average += 0\n            }\n        }\n        average += seconds + \".\"\n        if (milliseconds < 10){\n            average += \"00\"\n        }\n        if (milliseconds < 100){\n            if (milliseconds > 9){\n                average += \"0\"\n            }\n        }\n        average += milliseconds\n    }\n    if (divisor >= 0){\n        return(\n            <div id=\"average\"><h2>\n                Average: {average}\n            </h2></div>\n        )\n    } \n    if (divisor === 0){\n        return(\n            <div id=\"average\"><h2>\n                Average: 0.000\n            </h2></div>\n        )\n    }\n    if (divisor===-1){\n        return({avg})\n    } \n}\n\n\nexport default Average","import React from \"react\"\n\nfunction compare(a,b) {\n    return a-b\n}\n\nconst CustomAverage = props => {\n    const { solves } = props\n    var divisor = 0\n    var solvesArray = []\n    var totalMS = 0\n    let dnfCount = 0\n    var average = \"\"\n    let allSolves = []\n    \n    solves.map(solve=>{\n        if(solve.isplustwo){\n            allSolves = [...allSolves, String(solve.millisecondstwo)]\n        }else{\n            allSolves = [...allSolves, String(solve.milliseconds)]\n        }\n        if (solve.isdnf){\n            solvesArray = [...solvesArray, \"dnf\"]\n        }else if (solve.isplustwo && (!solve.isdnf)){\n            solvesArray = [...solvesArray, String(solve.millisecondstwo)]\n            divisor++\n        }else{\n            solvesArray = [...solvesArray, String(solve.milliseconds)]\n            divisor++\n        }\n        return(null)\n    })\n    allSolves = allSolves.slice(0,props.aoNum).sort(compare)\n    if (solves.length > props.aoNum-1) {\n        divisor = props.aoNum-2\n    }\n    const sortedArray = solvesArray.slice(0,props.aoNum).sort(compare)\n    if (sortedArray.includes(String(Math.max(...allSolves)))){\n        let newSortedArray = sortedArray.filter(solve=>{\n            if (solve === \"dnf\"){\n                dnfCount++\n            }\n            return(solve !== \"dnf\")\n        })\n        if (solves.length>props.aoNum-1){\n            newSortedArray.splice(0,1)\n            newSortedArray.splice(props.aoNum-2,1)  \n        }\n        newSortedArray.map((solve) => {\n            totalMS += Number(solve)\n            return(null)  \n        })\n        if(divisor > 0){\n            totalMS = totalMS/divisor\n        }\n    }else{\n        let newSortedArray = sortedArray.filter(solve=>{\n            if (solve === \"dnf\"){\n                dnfCount++\n            }\n            return(solve !== \"dnf\")\n        })\n        if (solves.length>props.aoNum-1){\n            newSortedArray.splice(0,1)\n            // sortedArray.splice(props.aoNum-2,1)\n            \n        }\n        newSortedArray.map((solve) => {\n            totalMS += Number(solve)\n            return(null)  \n        })\n        if(divisor > 0){\n            totalMS = totalMS/divisor\n        }\n    }\n\n    \n    var hours = Math.floor((totalMS / 3600000))\n    var minutes = Math.floor((totalMS / 60000)%60)\n    var seconds = Math.floor((totalMS / 1000)%60)\n    var milliseconds = Math.round(totalMS % 1000)\n    if (totalMS > 3600000){\n        average += hours +\":\"\n    }\n    if (totalMS > 60000){\n        average += minutes +\":\"\n        if (seconds<10){\n            average += 0\n        }\n    }\n    average += seconds + \".\"\n    if (milliseconds < 10){\n        average += \"00\"\n    }\n    if (milliseconds < 100){\n        if (milliseconds > 9){\n            average += \"0\"\n        }\n    }\n    average += milliseconds\n\n    if (dnfCount<2){\n        return(\n        <div id=\"average\">\n            <h2>\n                ao{props.aoNum}: {average}\n            </h2>\n        </div>\n        )\n    }else{\n        return(\n            <div id=\"average\">\n                <h2>\n                    ao{props.aoNum}: DNF\n                </h2>\n            </div>\n            )\n    }\n}\n\nexport default CustomAverage","import React from \"react\"\n\nconst ScrambleTable = props => {\n    return(\n    <table >\n      <tbody >\n        <tr >\n          <td><h4 className=\"display-linebreak megaminx megaminxSmallInterfaceScramble\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\"}}>{props.megaminxScramble}</h4></td>\n        </tr>\n      </tbody>\n    </table>\n    )\n}\n\nconst Scramble = props => {\n    return(\n        <div className=\" display-linebreak\">\n            {props.isDisplayScrambleSmall ? \n            (props.isDisplayScrambleMedium ? \n              <div className=\"tc medium-text\">\n                {props.scrambleRegular}\n              </div>\n              :\n              <div className=\"tc small-text\">\n              <h4 className=\"tc\">{props.scrambleRegular}</h4> \n              </div>\n            )\n            :\n            <h3 className=\"tc\">{props.scrambleRegular}</h3>\n            }\n            <div className=\"summary-center\">\n              <ScrambleTable \n              isBackgroundLight={props.isBackgroundLight}\n              megaminxScramble={props.megaminxScramble}\n              />\n            </div>\n            <h4 className=\"display-linebreak tc\">{props.multiBLDScramble}</h4>\n        </div>\n    )\n}\n\nexport default Scramble","import React from \"react\"\n\nconst CountDown = props => {\n    return(\n        <div onTouchEnd={props.startTimerDuringCountDownMobile} onMouseUp={props.startTimerDuringCountDownMobile}  className=\"height-width\">\n            <h5 className=\"absolute-center\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\"}}>{props.countDown}</h5>\n        </div>\n    )\n}\n\nexport default CountDown","import React from \"react\"\n\nconst MobileTimer = props => {\n    return(\n        <div onTouchStart={props.stopMobile} onMouseDown={props.stopMobile} onTouchEnd={props.stopMobileRoute} onMouseUp={props.stopMobileRoute} className=\"height-width\">\n            {props.isTimerDisabled ? \n              <h1 className=\"absolute-center disable-timer-mobile\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}}> TAP TO STOP </h1>\n            :\n            <h1 className=\"absolute-center\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}}> {props.timerFormatted} </h1>\n            }\n        </div>\n    )\n}\n\nexport default MobileTimer","import React from \"react\"\n\nconst HeaderContent = props => {\n    return(\n        props.isMobileGoing ? \n        <h1> </h1>\n        :\n        <div>\n        {props.isSignedIn \n        ? <div id=\"padRight\">\n            <nav style={{display: 'flex', justifyContent: 'space-between', verticalAlign:\"middle\"}}>\n        {JSON.parse(localStorage.getItem(\"offline\")) ? \n            <div style={{ marginLeft:\"4%\",}}>\n                <h1><button className=\"button-no-border\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>OFFLINE</button></h1>\n            </div>\n            :\n            <h1> </h1>\n            }\n            <div style={{ marginRight:\"1%\",}}>\n                <h1><button onClick={props.dashboard} style={{ color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\">{props.username} | DASHBOARD</button></h1>\n            </div>   \n            </nav>\n        </div>\n        :\n        <nav style={{display: 'flex', justifyContent: 'flex-end',}}>\n            <div style={{marginRight:\"6%\",}}>\n            <h1><button onClick={props.signIn} style={{ color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\">Sign In</button></h1>  \n            </div>\n        </nav>\n        }\n        </div>    \n    )\n}\n\nexport default HeaderContent","import React from \"react\"\n\nconst Footer = (props) => {\n    return(\n        <div className=\"padding-footer\">\n            {\n            props.isSessionName \n            ?\n            (props.id\n            ? \n            <div id=\"average\">\n                <h2>Session: {props.sessionInterface} | {props.sessionName} | {props.puzzleType}</h2>\n            </div>\n            :\n            <h2> </h2>)\n            :\n            (props.id\n                ? \n                <div id=\"average\">\n                <h2>Session: {props.sessionInterface} | {props.puzzleType} </h2>\n                </div>\n                :\n            <h2> </h2>)\n            }\n        </div>\n    )\n}\n\nexport default Footer","import React from \"react\"\n\nconst ButtonTop = (props) => {\n    return(\n        !props.isManualEnter ? \n            props.isMobileGoing ? \n            <h1> </h1>\n            : \n            (props.isMobile ? \n            <div onMouseUp={props.beginMobile} onTouchStart={()=>props.color()} onMouseDown={()=>props.color()} onTouchEnd={props.beginMobile}   className=\"pointer button-no-select hide-button summary-center button-no-select\">\n                <button id=\"colorClick\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"start-button timer-text-start button-no-select \"></button>\n                {/* <h5 className=\"hide-button summary-center button-no-select\"><button id=\"colorClick\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"start-button timer-text-start button-no-select \"></button></h5> */}\n            </div>\n            :\n            <div onMouseUp={props.beginMobile} onTouchStart={()=>props.color()} onMouseDown={()=>props.color()} onTouchEnd={props.beginMobile}   className=\"pointer hide-button  timerButton summary-center button-no-select\">\n                <button id=\"colorClick\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"start-button timer-text-start\"></button>\n                {/* <h5 className=\"hide-button  timerButton summary-center button-no-select\"><button id=\"colorClick\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"start-button timer-text-start\"></button></h5> */}\n            </div>\n            ) \n        :\n            <div></div>\n    )\n}\n\nexport default ButtonTop","import React from \"react\"\n\nconst ButtonBottom = (props) => {\n    return(\n        !props.isManualEnter ? \n            props.isMobile ? \n            <div onMouseUp={props.beginMobile} onTouchStart={()=>props.color()} onMouseDown={()=>props.color()} onTouchEnd={props.beginMobile}   className=\"pointer button-no-select not-hide-button summary-center button-no-select\">\n                <button id=\"colorClick2\"  style={{marginTop:\"5%\", color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"start-button timer-text-start\"></button>\n            </div>\n            :\n            <div onMouseUp={props.beginMobile} onTouchStart={()=>props.color()} onMouseDown={()=>props.color()} onTouchEnd={props.beginMobile}   className=\"pointer button-no-select not-hide-button timerButton summary-center button-no-select \">\n                <button id=\"colorClick2\"  style={{marginTop:\"5%\", color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"start-button timer-text-start \"></button>\n            </div>\n        :\n        <div></div>\n    )\n}\n\nexport default ButtonBottom","import React, { Component } from \"react\"\nimport moment from \"moment\"\n\nclass TimerClock extends Component{\n\n    state = {\n        timeInput: \"\"\n    }\n\n\n    timeInput = (event) => {\n        this.setState({\n            timeInput: event.target.value\n        })\n    }\n\n    converter(input) {\n        const hours = Math.floor(input / 3600000)\n        const minutes = Math.floor((input / 60000)%60)\n        const seconds = Math.floor((input / 1000)%60)\n        const milliseconds = (input % 1000)\n        this.setState({\n          hours: hours,\n          minutes: minutes, \n          secondsTwo: seconds, \n          seconds: seconds,\n          milliseconds: milliseconds,\n        })\n    }\n\n    submit = (e) => {\n        if (e.keyCode===13) {\n            let allSolves = []\n            for (const solve of this.props.solves){\n                if (solve.puzzle === this.props.puzzleType){\n                allSolves.push(solve.milliseconds)\n                }\n            }\n            \n            let endMS=0\n            var x = this.state.timeInput\n            var y = x.match(/\\d+/g)\n            if(y!==null){\n                var z = y.slice().reverse()\n            }\n            if(z){\n                if(z.length>0){\n                    z.map((number, index) =>{\n                        if(index===0){\n                            if (number.length===1){\n                                endMS+=number*100\n                            }\n                            if (number.length===2){\n                                endMS+=number*10\n                            }\n                            if (number.length===3){\n                                endMS+=number*1\n                            }\n                        }\n                        if(index===1){\n                            endMS+=number*1000\n                        }\n                        if(index===2){\n                            endMS+=number*60000\n                        }\n                        if(index===3){\n                            endMS+=number*3600000\n                        }\n                        return(null)\n                    })\n                    allSolves.sort(this.compareMilliseconds)\n                    let halfDate = moment.unix(Math.round(new Date().getTime() / 1000)).format(\"YYYY-MM-DD\");\n                    this.props.converter(endMS, true)\n                    let solveid = \"\"\n                    solveid+=Date.now()\n                    let minimumTime = 0\n                    if (this.props.puzzleType===\"3x3\"){\n                        minimumTime=1100\n                    }\n                    if (this.props.puzzleType===\"5x5\" || this.props.puzzleType===\"6x6\"\n                    || this.props.puzzleType===\"7x7\"){\n                        minimumTime=10000\n                    }\n                    if (this.props.puzzleType===\"3x3 OH\" || this.props.puzzleType===\"Megaminx\"){\n                        minimumTime=2000\n                    }\n                    if (this.props.puzzleType===\"Clock\"){\n                        minimumTime=500\n                    }\n                    if (this.props.puzzleType===\"Square-1\"||this.props.puzzleType===\"4x4 BLD\"){\n                        minimumTime=1000\n                    }\n                    if (this.props.puzzleType===\"5x5 BLD\" || this.props.puzzleType===\"4x4\"||this.props.puzzleType===\"3x3 BLD\"){\n                        minimumTime=4000\n                    }\n                    let unix = Math.round(new Date().getTime() / 1000)\n                    \n                    const solveData = {}\n                    solveData[\"id\"] = this.props.id\n                    solveData[\"solve\"] = this.props.displayTimeFormatted\n                    if (this.props.puzzleType===\"Megaminx\"){\n                        solveData[\"scramble\"] = this.props.megaminxScramble \n                    }else if (this.props.puzzleType===\"Multi-BLD\"){\n                        solveData[\"scramble\"] = this.props.multiBLDScramble\n                    }else{\n                        solveData[\"scramble\"] = this.props.scrambleRegular\n                    }\n                    solveData[\"milliseconds\"] = String(endMS)\n                    solveData[\"isplustwo\"] = false\n                    solveData[\"isdnf\"] = false\n                    solveData[\"date\"] = halfDate\n                    solveData[\"solveid\"] = solveid\n                    solveData[\"plustwo\"] = this.props.twoFormatted\n                    solveData[\"millisecondstwo\"]= String(endMS + 2000)\n                    solveData[\"session\"] = this.props.sessions\n                    solveData[\"unix\"] = String(unix)\n                    solveData[\"puzzle\"] = this.props.puzzleType\n                    solveData[\"sessionname\"]=this.props.sessionName\n                    solveData[\"temporary\"] = true\n                    this.props.sendToSolves([solveData, ...this.props.solves])\n                    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n                    this.props.getInterfaceSolvesSingle(solveData)\n            \n                    const finalSolve = {}\n                    finalSolve[\"id\"] = this.props.id\n                    finalSolve[\"solve\"] = this.props.displayTimeFormatted\n                    if (this.props.puzzleType===\"Megaminx\"){\n                        finalSolve[\"scramble\"] = this.props.megaminxScramble\n                    }else if (this.props.puzzleType===\"Multi-BLD\"){\n                        finalSolve[\"scramble\"] = this.props.multiBLDScramble\n                    }else{\n                        finalSolve[\"scramble\"] = this.props.scrambleRegular\n                    }\n                    finalSolve[\"milliseconds\"] = String(endMS)\n                    finalSolve[\"isplustwo\"] = false\n                    finalSolve[\"isdnf\"] = false\n                    finalSolve[\"date\"] = halfDate\n                    finalSolve[\"solveid\"] = solveid\n                    finalSolve[\"plustwo\"] = this.props.twoFormatted\n                    finalSolve[\"millisecondstwo\"]=String(endMS + 2000)\n                    finalSolve[\"session\"] = this.props.sessions\n                    finalSolve[\"unix\"] = String(unix)\n                    finalSolve[\"puzzle\"] = this.props.puzzleType\n                    finalSolve[\"sessionname\"]=this.props.sessionName\n                    let sendToDB = [...this.props.solvesApp, finalSolve]\n                    this.props.send(sendToDB)\n                    if(offline){\n                        localStorage.setItem(\"offlinesolves\", JSON.stringify({\"solves\": [...sendToDB]}))\n                    }\n                    setTimeout(()=>this.props.getSolveFromInterface(finalSolve),10)\n                    if (this.state.final < allSolves[0] && endMS > minimumTime){\n                        if(allSolves.length>75){\n                        this.props.confettiLaunch()\n                        }\n                    }\n                    document.getElementById(\"manualInput\").value=\"\"\n                    this.props.scramble(this.props.puzzleType)\n                    this.setState({\n                        timeInput: \"\"\n                    })\n                }\n            }\n        }  \n      }\n\n      \n      render(){\n          return(\n              this.props.isManualEnter ? \n              <div className=\"tc padding-top-most-of-interface\" style={{paddingBottom:\"10px\"}}>\n                <input autoComplete=\"off\"  onChange={this.timeInput} className=\"tc\" autoFocus=\"autofocus\"  id=\"manualInput\" type=\"number\" style={{color: this.props.isBackgroundLight ? \"black\" : \"white\",background: this.props.isBackgroundLight ? \"whitesmoke\" : \"RGB(23,23,23)\", outline:\"none\", height:\"120px\", width:\"300px\", fontSize:\"100px\"}}></input>\n            </div>\n              :\n              <div className=\"tc padding-top-most-of-interface\">\n                <h1 id=\"timer-color-change\" className=\"br3 ba mv4 w-50 w-25-1 mw5 center\">{this.props.timerFormatted}</h1>\n            </div>\n    )\n}\n        componentDidMount() {\n          document.addEventListener(\"keydown\", this.submit)\n        }\n}\n\nexport default TimerClock","import React, {Component} from 'react';\nimport './TimerInterface.css';\nimport Table from \"./Table\"\nimport Scroll from './Scroll';\nimport Average from './Average';\nimport CustomAverage from './CustomAverage';\nimport Scramble from './ScrambleDisplay';\nimport CountDown from './CountDown';\nimport moment from \"moment\"\nimport MobileTimer from './MobileTimer';\nimport HeaderContent from './HeaderContent';\nimport Footer from './Footer';\nimport ButtonTop from './ButtonTop';\nimport ButtonBottom from './ButtonBottom';\nimport TimerClock from \"./TimerClock\"\n\n\nwindow.onkeydown = function(e) { \n  return !(e.keyCode === 32 && e.target === document.body);\n}; \n\nclass TimerInterface extends Component {\n  state = {\n    start: 0,\n    final: 0,\n    hours: 0,\n    minutes: 0,\n    seconds: 0,\n    milliseconds: 0,\n    millisecondsTwo: 0,\n    going: false, \n    timerFormatted: \"0:00.000\",\n    displayTimeFormatted: \"0:00.000\",\n    twoFormatted: 0,\n    solves: [],\n    scramble: \"\",\n    megaminxScramble: \"\",\n    multiBLDScramble: \"\",\n    preventStartLoop: false,\n    preventStartLoopMobile: 0,\n    aoNum: 5, \n    countDown: 0,\n    isDisableSpacebar: false,\n    isCountDownActivated: false,\n    isCountDownGoing: false,\n    endMS: 0,\n    isMobileGoing: false,\n    countingDown: false,\n    keyPressOne: false,\n    keyPressTwo: false,\n    test: false,\n    isDisplayScrambleSmall: false,\n    isDisplayScrambleMedium: false,\n    disableCommand: false,\n    beginAfterDelayMobile: false,\n    beginAfterDelay: false,\n    isGreen: false,\n    preventCommand:false,\n  }\n\n  timerStart = () => {\n    this.setState({\n      endMS: 0,\n      final: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      milliseconds: 0,\n      start: Date.now(),\n      going: true,\n    })\n    this.interval = setInterval(()=>this.time(), 1)\n    this.interval2 = setInterval(()=>this.converter(this.state.final) ,1)\n    if (!this.props.isTimerDisabled){\n      this.interval3 = setInterval(()=>this.timerFormatted(\"timerFormatted\") ,1)\n    }\n  }\n\n  begin = (e) => {\n    const loop = () => {\n      this.setState({\n        preventStartLoop: false\n      })\n    }\n    if(e.keyCode === 32){\n        this.getCountDownNumber()\n      if(!this.state.isDisableSpacebar){\n        if (!this.state.going) {\n          if(!this.state.preventStartLoop){\n            if (!this.state.countingDown){\n              if(Number(this.state.countDown)===0){\n                if(this.state.beginAfterDelay){\n                  this.beginFunction()\n                }\n              }\n            }    \n          }else{\n            setTimeout(()=>loop(),50)\n          }\n        }\n      }\n    }\n  }\n\n  beginFunction = () => {\n    if(this.props.solves!==\"loading...\"){\n      this.props.isNewSessionFunction(false)\n      this.setState({\n          final: 0,\n          hours: 0,\n          minutes: 0,\n          seconds: 0,\n          milliseconds: 0,\n          start: Date.now(),\n          going: true,\n      })\n      this.interval = setInterval(()=>this.time(), 1)\n      this.interval2 = setInterval(()=>this.converter(this.state.final) ,1)\n      if (!this.props.isTimerDisabled){\n        this.interval3 = setInterval(()=>this.timerFormatted(\"timerFormatted\") ,1)\n      }\n    }\n  }\n\n  isDisableSpacebar = () =>{\n    this.setState({\n      isDisableSpacebar: !this.state.isDisableSpacebar\n    })\n  }\n\n  startTimerDuringCountDown = (e) => {\n    //function runs if count down is activated \n    //runs count down\n    if (this.state.countingDown) {\n      this.beginFunction()\n      this.setState({\n        isCountDownGoing: false,\n        countingDown: false,\n        keyPressOne: false,\n        keyPressTwo: false,\n      })\n      if(!this.state.disableCommand){\n        this.setState({\n          //here\n          preventStartLoop: true,\n        })\n      }\n      this.setState({\n        disableCommand: false,\n      })\n      \n      clearTimeout(this.countDownGoing)\n      clearInterval(this.countdownInterval)\n      clearTimeout(this.startTimer)\n      clearTimeout(this.disable)\n      clearTimeout(this.commandFalse)\n    }    \n  } \n\n\n  stop = (e) => {\n    if(this.state.going===true) {\n      if (!this.state.countingDown){\n        if (e.keyCode===32||(!this.state.keyPressOne && !this.state.keyPressTwo && (e.keyCode===91||e.keyCode===93||e.keyCode===17))) {\n          if(!this.state.isDisableSpacebar){\n            let endMS = Date.now() - this.state.start\n            let allSolves = []\n            for (const solve of this.props.solves){\n              if (solve.puzzle === this.props.puzzleType){\n                allSolves.push(solve.milliseconds)\n              }\n            }\n            allSolves.sort(this.compareMilliseconds)\n            let halfDate = moment.unix(Math.round(new Date().getTime() / 1000)).format(\"YYYY-MM-DD\");\n            this.timerFormatted(\"timerFormatted\")\n            clearInterval(this.countdownInterval)\n            this.getCountDownNumber()\n            clearInterval(this.interval)\n            clearInterval(this.interval2)\n            clearInterval(this.interval3)\n            this.converter(endMS)\n            this.timerFormatted(\"timerFormatted\")\n            this.timerFormatted(\"displayTimeFormatted\")\n            this.timerFormatted(\"twoFormatted\")\n            let solveid = \"\"\n            solveid+=Date.now()\n            let minimumTime = 0\n            if (this.props.puzzleType===\"3x3\"){\n              minimumTime=1100\n            }\n            if (this.props.puzzleType===\"5x5\" || this.props.puzzleType===\"6x6\"\n            || this.props.puzzleType===\"7x7\"){\n              minimumTime=10000\n            }\n            if (this.props.puzzleType===\"3x3 OH\" || this.props.puzzleType===\"Megaminx\"){\n              minimumTime=2000\n            }\n            if (this.props.puzzleType===\"Clock\"){\n              minimumTime=500\n            }\n            if (this.props.puzzleType===\"Square-1\"||this.props.puzzleType===\"4x4 BLD\"){\n              minimumTime=1000\n            }\n            if (this.props.puzzleType===\"5x5 BLD\" || this.props.puzzleType===\"4x4\"||this.props.puzzleType===\"3x3 BLD\"){\n              minimumTime=4000\n            }\n            let unix = Math.round(new Date().getTime() / 1000)\n            \n            const solveData = {}\n            solveData[\"id\"] = this.props.id\n            solveData[\"solve\"] = this.state.displayTimeFormatted\n            if (this.props.puzzleType===\"Megaminx\"){\n              solveData[\"scramble\"] = this.props.megaminxScramble \n            }else if (this.props.puzzleType===\"Multi-BLD\"){\n              solveData[\"scramble\"] = this.props.multiBLDScramble\n            }else{\n              solveData[\"scramble\"] = this.props.scrambleRegular\n            }\n            solveData[\"milliseconds\"] = String(endMS)\n            solveData[\"isplustwo\"] = false\n            solveData[\"isdnf\"] = false\n            solveData[\"date\"] = halfDate\n            solveData[\"solveid\"] = solveid\n            solveData[\"plustwo\"] = this.state.twoFormatted\n            solveData[\"millisecondstwo\"]= String(endMS + 2000)\n            solveData[\"session\"] = this.props.sessions\n            solveData[\"unix\"] = String(unix)\n            solveData[\"puzzle\"] = this.props.puzzleType\n            solveData[\"sessionname\"]=this.props.sessionName\n            solveData[\"temporary\"] = true\n            this.setState({\n              solves: [solveData, ...this.state.solves],\n              going: false,\n              endMS: endMS,\n              beginAfterDelay: false,\n            })\n            let offline = JSON.parse(localStorage.getItem(\"offline\"))\n            this.props.getInterfaceSolvesSingle(solveData)\n  \n            const finalSolve = {}\n            finalSolve[\"id\"] = this.props.id\n            finalSolve[\"solve\"] = this.state.displayTimeFormatted\n            if (this.props.puzzleType===\"Megaminx\"){\n              finalSolve[\"scramble\"] = this.props.megaminxScramble\n            }else if (this.props.puzzleType===\"Multi-BLD\"){\n              finalSolve[\"scramble\"] = this.props.multiBLDScramble\n            }else{\n              finalSolve[\"scramble\"] = this.props.scrambleRegular\n            }\n            finalSolve[\"milliseconds\"] = String(this.state.endMS)\n            finalSolve[\"isplustwo\"] = false\n            finalSolve[\"isdnf\"] = false\n            finalSolve[\"date\"] = halfDate\n            finalSolve[\"solveid\"] = solveid\n            finalSolve[\"plustwo\"] = this.state.twoFormatted\n            finalSolve[\"millisecondstwo\"]=String(this.state.endMS + 2000)\n            finalSolve[\"session\"] = this.props.sessions\n            finalSolve[\"unix\"] = String(unix)\n            finalSolve[\"puzzle\"] = this.props.puzzleType\n            finalSolve[\"sessionname\"]=this.props.sessionName\n            let sendToDB = [...this.props.solves, finalSolve]\n            this.send(sendToDB)\n            if(offline){\n              localStorage.setItem(\"offlinesolves\", JSON.stringify({\"solves\": [...sendToDB]}))\n            }\n            setTimeout(()=>this.props.getSolveFromInterface(finalSolve),10)\n            if (this.state.final < allSolves[0] && this.state.endMS > minimumTime){\n              if(allSolves.length>75){\n                this.props.confettiLaunch()\n              }\n            }\n          }\n          this.props.scramble(this.props.puzzleType)\n        }\n      }\n    }\n  }\n\n  countDownRunFunction = () => {\n    if(!this.state.isDisableSpacebar){\n      if (!this.state.going) {\n        if(!this.state.preventStartLoop){\n          if (!this.state.countingDown){\n            this.getCountDownNumber()\n            if(!this.state.disableCommand){\n              // here\n              this.setState({\n                preventStartLoop: false,\n              })\n            }\n            this.setState({\n              going: true,\n              countingDown: true,\n            })\n            this.isDisableSpacebar()\n            this.isCountDownGoing()\n            this.countDownGoing =  setTimeout(()=>this.isCountDownGoing(), this.props.inspectionTime * 1000)\n            this.countdownInterval = setInterval(()=>this.countDown(), 1000)\n            this.startTimer =  setTimeout(()=>this.timerStart(),this.props.inspectionTime * 1000)\n            this.runCountingDown =  setTimeout(()=>this.countingDown(),this.props.inspectionTime * 1000)\n            this.disable = setTimeout(()=>this.isDisableSpacebar(),this.props.inspectionTime * 1000)\n          }\n        }    \n      }\n    }\n  }\n\n  countDownRun = (e) => {\n    //function runs if count down is activated \n    //runs count down\n    if(e.keyCode === 32){\n      if(this.state.countDown>0){\n        if(!this.state.test){\n          if(this.state.beginAfterDelay){\n            this.countDownRunFunction()\n            if(this.state.going){\n              this.setState({\n                test: true,\n                \n              })\n            }\n          }\n        }else{\n          this.startTimerDuringCountDown()\n          this.setState({\n            test: false,\n            isDisableSpacebar: false,\n          })\n        }\n      }\n    }\n  }\n\n  // preventStartLoop = (e) => {\n  //   if(e.keyCode===32){\n  //     if(!this.state.isDisableSpacebar){\n  //       this.setState({\n  //         preventStartLoop: false\n  //       })\n  //     }\n  //   }\n  //   if((e.keyCode===91||e.keyCode===93||e.keyCode===17)&&(!this.state.keyPressOne&&!this.state.keyPressTwo)){\n  //     if(!this.state.countingDown){\n  //       if(!this.state.going){\n  //         if(this.state.preventStartLoop!==0){\n  //           this.setState({\n  //             preventStartLoop: this.state.preventStartLoop + 1\n  //           })\n  //         }\n  //       }\n  //     }\n  //   }\n  // }\n\n  beginAfterDelay = (e) => {\n    if(!this.props.isManualEnter){\n      if(e.keyCode===32||(this.state.keyPressOne && this.state.keyPressTwo && (e.keyCode===91||e.keyCode===93||e.keyCode===17))){\n        if(!this.state.preventStartLoop){\n          const delay = () => {\n            this.setState({\n              beginAfterDelay: true,\n            })\n          }\n          const green = () => {\n            if(document.getElementById(\"timer-color-change\")){\n              \n              if(!this.props.isManualEnter){\n                this.props.isBackgroundLight ? \n                document.getElementById(\"timer-color-change\").style.color=\"RGB(58, 199, 81)\"\n                :\n                document.getElementById(\"timer-color-change\").style.color=\"RGB(49, 163, 68)\"\n              }\n            }\n          }\n          // const red = () => {\n          //   document.getElementById(\"timer-color-change\").style.color=\"RGB(255, 20, 20)\"\n          // }\n          this.delayTimeout = setTimeout(()=> delay(), 300)\n          this.greenTimeout = setTimeout(()=> green(), 300)\n          // red()\n        }\n      }\n    }\n  }\n\n  beginAfterDelaySafety = (e) => {\n    if (e.keyCode===32||((e.keyCode===91||e.keyCode===93||e.keyCode===17))) {\n      clearTimeout(this.delayTimeout)\n      clearTimeout(this.greenTimeout)\n      if(!this.state.preventStartLoop){\n        //here\n        // this.setState({\n        //   preventStartLoop: this.state.preventStartLoop-1\n        // })\n      }\n      if(document.getElementById(\"timer-color-change\")){\n        if(!this.props.isManualEnter){\n          if(!this.state.countingDown){\n            this.props.isBackgroundLight ? \n            setTimeout(()=>document.getElementById(\"timer-color-change\").style.color=\"black\",250)\n            :\n            setTimeout(()=>document.getElementById(\"timer-color-change\").style.color=\"white\",250)\n          }\n        }\n      }\n    }\n  }\n\n\n\n\n\n\n\n\n\n\n\n  startTimerDuringCountDownMobile = () => {\n    this.setState({\n      isMobileGoing: true,\n      isCountDownGoing: false,\n    })\n    this.timerStartMobile()\n    clearInterval(this.countdownInterval)\n    clearTimeout(this.countDownRouteMobile)\n    clearTimeout(this.timerMobileTimeout)\n  }\n\n  stopMobileRoute = () => {\n    const route2 = () => {\n      this.setState({\n        isMobileGoing: false,\n      })\n    }\n    setTimeout(()=>route2(),200)\n  }\n\n  stopMobile = () => {\n    const doAll = async () => {\n        await this.stopMobile2()\n        await this.stopMobile3()\n    };\n    if(this.state.going===true) {\n      if(this.state.preventStartLoopMobile % 2!==0){\n    doAll();\n      }\n    }\n};\n\n  stopMobile2 = () => {\n    if(this.state.going===true) {\n      if(this.state.preventStartLoopMobile % 2!==0){\n        this.preventStartLoopMobile()\n        let endMS = Date.now() - this.state.start\n        this.setState({\n          endMS: endMS,\n          beginAfterDelayMobile: false,\n        })\n        if (this.state.isDisableSpacebar){\n          this.isDisableSpacebar()\n        }\n        clearInterval(this.countdownInterval)\n        this.getCountDownNumber()\n        clearInterval(this.interval4)\n        clearInterval(this.interval5)\n        clearInterval(this.interval6)\n      }\n    }\n  }\n\n  stopMobile3 = () => {\n    this.converter(this.state.endMS, true)\n    let solveid = \"\"\n      solveid+=Date.now()\n      let allSolves = []\n      for (const solve of this.props.solves){\n        if (solve.puzzle === this.props.puzzleType){\n          allSolves.push(solve.milliseconds)\n        }\n      }\n      allSolves.sort(this.compareMilliseconds)\n      let halfDate = moment.unix(Math.round(new Date().getTime() / 1000)).format(\"YYYY-MM-DD\");\n      let minimumTime = 0\n      if (this.props.puzzleType===\"3x3\"){\n        minimumTime=1100\n      }\n      if (this.props.puzzleType===\"4x4\"){\n        minimumTime=5000\n      }\n      if (this.props.puzzleType===\"5x5\"){\n        minimumTime=10000\n      }\n      if (this.props.puzzleType===\"6x6\"){\n        minimumTime=10000\n      }\n      if (this.props.puzzleType===\"7x7\"){\n        minimumTime=10000\n      }\n      if (this.props.puzzleType===\"3x3 BLD\"){\n        minimumTime=5000\n      }\n      if (this.props.puzzleType===\"3x3 OH\"){\n        minimumTime=2000\n      }\n      if (this.props.puzzleType===\"Clock\"){\n        minimumTime=500\n      }\n      if (this.props.puzzleType===\"Megaminx\"){\n        minimumTime=2000\n      }\n      if (this.props.puzzleType===\"Square-1\"){\n        minimumTime=1000\n      }\n      if (this.props.puzzleType===\"4x4 BLD\"){\n        minimumTime=3000\n      }\n      if (this.props.puzzleType===\"5x5 BLD\"){\n        minimumTime=4000\n      }\n      let unix = Math.round(new Date().getTime() / 1000)\n      const solveData = {}\n      solveData[\"id\"] = this.props.id\n      solveData[\"solve\"] = this.state.displayTimeFormatted\n      if (this.props.puzzleType===\"Megaminx\"){\n        solveData[\"scramble\"] = this.props.megaminxScramble \n      }else if (this.props.puzzleType===\"Multi-BLD\"){\n        solveData[\"scramble\"] = this.props.multiBLDScramble\n      }else{\n        solveData[\"scramble\"] = this.props.scrambleRegular\n      }\n      solveData[\"milliseconds\"] = String(this.state.endMS)\n      solveData[\"isplustwo\"] = false\n      solveData[\"isdnf\"] = false\n      solveData[\"date\"] = halfDate\n      solveData[\"solveid\"] = solveid\n      solveData[\"plustwo\"] = this.state.twoFormatted\n      solveData[\"millisecondstwo\"]= String(this.state.endMS + 2000)\n      solveData[\"session\"] = this.props.sessions\n      solveData[\"unix\"] = new Date().getTime()\n      solveData[\"puzzle\"] = this.props.puzzleType\n      solveData[\"sessionname\"]=this.props.sessionName\n      solveData[\"temporary\"] = true\n      this.setState({\n        going: false,\n        // isMobileGoing: false,\n        isDisableSpacebar: false,\n      })\n      this.props.getInterfaceSolvesSingle(solveData)\n      const finalSolve = {}\n      finalSolve[\"id\"] = this.props.id\n      finalSolve[\"solve\"] = this.state.displayTimeFormatted\n      if (this.props.puzzleType===\"Megaminx\"){\n        finalSolve[\"scramble\"] = this.props.megaminxScramble\n      }else if (this.props.puzzleType===\"Multi-BLD\"){\n        finalSolve[\"scramble\"] = this.props.multiBLDScramble\n      }else{\n        finalSolve[\"scramble\"] = this.props.scrambleRegular\n      }\n      finalSolve[\"milliseconds\"] = String(this.state.endMS)\n      finalSolve[\"isplustwo\"] = false\n      finalSolve[\"isdnf\"] = false\n      finalSolve[\"date\"] = halfDate\n      finalSolve[\"solveid\"] = solveid\n      finalSolve[\"plustwo\"] = this.state.twoFormatted\n      finalSolve[\"millisecondstwo\"]=String(this.state.endMS + 2000)\n      finalSolve[\"session\"] = this.props.sessions\n      finalSolve[\"unix\"] = String(unix)\n      finalSolve[\"puzzle\"] = this.props.puzzleType\n      finalSolve[\"sessionname\"]=this.props.sessionName\n      this.props.send([...this.props.solves, finalSolve])\n      let offline = JSON.parse(localStorage.getItem(\"offline\"))\n      if(offline){\n        localStorage.setItem(\"offlinesolves\", JSON.stringify({\"solves\":[...this.props.solves, finalSolve]}))\n      }\n      setTimeout(()=>this.props.getSolveFromInterface(finalSolve),10)\n      this.props.scramble(this.props.puzzleType)\n      if (this.state.final < allSolves[0] && this.state.endMS > minimumTime){\n        if(allSolves.length>75){\n          this.props.confettiLaunch()\n        }\n      }\n  }\n\n  countDownRunMobile = () => {\n    //function runs if count down is activated \n    //runs count down\n    if(!this.state.isDisableSpacebar){\n      if (!this.state.isMobileGoing) {\n        if(this.state.preventStartLoopMobile % 2===0){\n          this.getCountDownNumber()\n          this.setState({\n            isMobileGoing: true,\n            // going: true,\n          })\n          this.isDisableSpacebar()\n          this.isCountDownGoing()\n          this.countDownRouteMobile = setTimeout(()=>this.isCountDownGoing(), this.props.inspectionTime * 1000)\n          this.countdownInterval = setInterval(()=>this.countDown(), 1000)\n          this.timerMobileTimeout = setTimeout(()=>this.timerStartMobile(),this.props.inspectionTime * 1000)\n        }\n      }\n    }\n  }\n\n  timerStartMobile = () => {\n    this.setState({\n      endMS: 0,\n      final: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      milliseconds: 0,\n      start: Date.now(),\n      going: true,\n    })\n    this.interval4 = setInterval(()=>this.time(), 1)\n    this.interval5 = setInterval(()=>this.converter(this.state.final) ,1)\n    if (!this.props.isTimerDisabled){\n      this.interval6 = setInterval(()=>this.timerFormatted(\"timerFormatted\") ,1)\n    }\n  }\n\n  beginMobile = () => {\n    if(this.props.solves!==\"loading...\"){\n      clearTimeout(this.changeColor)\n      this.getCountDownNumber()\n      this.preventStartLoopMobile()\n      if(this.state.beginAfterDelayMobile){\n        if(this.props.inspectionTime===0){\n          if (!this.state.going) {\n            if(this.state.preventStartLoopMobile % 2===0){\n              if(this.props.isBackgroundLight){\n                document.getElementById(\"colorClick\").style.backgroundColor=\"whitesmoke\";\n                document.getElementById(\"colorClick2\").style.backgroundColor=\"whitesmoke\";\n              }else{\n                document.getElementById(\"colorClick\").style.backgroundColor=\"rgb(23, 23, 23)\";\n                document.getElementById(\"colorClick2\").style.backgroundColor=\"rgb(23, 23, 23)\";\n              }\n              this.props.isNewSessionFunction(false)\n              this.setState({\n                final: 0,\n                hours: 0,\n                minutes: 0,\n                seconds: 0,\n                milliseconds: 0,\n                start: Date.now(),\n                going: true,\n                isDisableSpacebar: true,\n              })\n              this.interval4 = setInterval(()=>this.time(), 1)\n              this.interval5 = setInterval(()=>this.converter(this.state.final) ,1)\n              if (!this.props.isTimerDisabled){\n                this.interval6 = setInterval(()=>this.timerFormatted(\"timerFormatted\") ,1)\n              }\n              this.setState({\n                isMobileGoing: true\n              })\n            }\n          }\n        }else{\n          this.countDownRunMobile()\n        }\n      }\n    }\n  }\n\n  converter = (input, isFormat) => {\n    const hours = Math.floor(input / 3600000)\n    const minutes = Math.floor((input / 60000)%60)\n    const seconds = Math.floor((input / 1000)%60)\n    const milliseconds = (input % 1000)\n    this.setState({\n      hours: hours,\n      minutes: minutes, \n      secondsTwo: seconds, \n      seconds: seconds,\n      milliseconds: milliseconds,\n    })\n    if (isFormat === true){\n      this.timerFormatted(\"timerFormatted\")\n      this.timerFormatted(\"displayTimeFormatted\")\n      this.timerFormatted(\"twoFormatted\")\n    }\n  }\n\n  timerFormatted(stateValue){\n    let time = \"\"\n    if (this.state.hours > 0){\n      time += this.state.hours + \":\"\n    }\n    if (stateValue === \"timerFormatted\"){\n      time += this.state.minutes + \":\"\n      if (this.state.seconds < 10) {\n        time += \"0\" \n      }\n    }\n    if(stateValue===\"displayTimeFormatted\"){\n      if (this.state.minutes>0){\n        time += this.state.minutes + \":\"\n        if (this.state.seconds < 10) {\n          time += \"0\" \n        }\n      }\n    }\n    if (stateValue === \"twoFormatted\"){\n      time += this.state.seconds + 2  + \".\"\n    } else{\n      time += this.state.seconds  + \".\"\n    }\n    if (this.state.milliseconds < 10){\n      time += \"00\"\n    }\n    if (this.state.milliseconds < 100){\n      if (this.state.milliseconds > 9){\n        time += \"0\"\n      }\n    }\n    time += this.state.milliseconds\n    if (stateValue === \"timerFormatted\"){\n      this.setState({\n        timerFormatted: time,\n      })\n    }\n    if (stateValue === \"displayTimeFormatted\"){\n      this.setState({\n        displayTimeFormatted: time,\n      })\n    }\n    if (stateValue === \"twoFormatted\"){\n      this.setState({\n        twoFormatted: time,\n      })\n    }\n  }\n\n  sendToSolves = (input) => {\n    this.setState({\n      solves: input\n    })\n  }\n\n  isCountDownGoing = () => {\n    this.setState({\n      isCountDownGoing: !this.state.isCountDownGoing\n    })\n  } \n\n  preventStartLoopMobile = () => {\n    this.setState({\n      preventStartLoopMobile: this.state.preventStartLoopMobile+1\n    })\n  }\n\n  getCountDownNumber = () => {\n    this.setState({\n      countDown: this.props.inspectionTime\n    })\n  }\n\n  \n\n  compareMilliseconds = (a,b) => {\n    return a - b\n  }\n\n\n  isCountDownActivated = () => {\n    this.setState({\n      isCountDownActivated: !this.state.isCountDownActivated\n    })\n  }\n\n  countingDown = () => {\n    this.setState({\n      countingDown: false\n    })\n  }\n\n  countDown = () => {\n    this.setState({\n      countDown: this.state.countDown - 1\n    })\n  }\n\n  send = (input) => {\n    //testing storing all solves in one cell\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(!offline){\n      fetch(\"https://blooming-hollows-98248.herokuapp.com/sendsolves\",{\n        method: \"put\",\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({\n          id: this.props.id,\n          solves: {\"allsolves\": input},\n        })\n      }).then(response=>response.json())\n    }\n  }\n\n  deleteDB = (index) => {\n    //removes individual solves from database\n    fetch(\"https://blooming-hollows-98248.herokuapp.com/deletedb\", {\n      method: \"delete\",\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify({\n        solveid: this.props.solvesInterface[index].solveid,\n        solve: this.props.solvesInterface[index].solve\n      })\n    }) \n    .then(response=>response.json())\n    this.props.removeSolveFromSolvesState(this.props.solvesInterface[index].solveid, this.props.solvesInterface[index].milliseconds)\n  }\n\n  newSession = () => {\n    // calls newSesssionApp and removes solves from interface\n    this.props.newSessionApp()\n    this.setState({\n      solves: []\n    })\n  }\n\n  time(){\n    let timeElapsed = Date.now() - this.state.start\n    this.setState({\n      final: timeElapsed,\n    })\n  }\n\n  removeTime = (index, solveid, milliseconds) => {\n    //removes time from interface only\n    if (this.props.isConfirmSolveDelete) {\n      let confirm = window.confirm(\"Are you sure you would like to remove this solve? Action cannot be undone.\")\n      if (confirm){\n        this.props.removeSolveFromState(solveid, milliseconds)\n      }\n    }else{\n      this.props.removeSolveFromState(solveid, milliseconds)\n    }\n    this.removeButtonFocus()\n  }\n\n  removeButtonFocus = () => {\n    let removeFocus = document.getElementsByClassName(\"remove\")\n    for (const button of removeFocus){\n      button.blur()\n    }\n  }\n\n  removeButtonFocusPlusTwo = () => {\n    let removeFocus = document.getElementsByClassName(\"remove2\")\n    for(const button of removeFocus){\n      button.blur()\n    }\n  }\n\n  removeButtonFocusDNF = () => {\n    let removeFocus = document.getElementsByClassName(\"remove3\")\n    for (const button of removeFocus) {\n      button.blur()\n    }\n  }\n\n  togglePlusTwoInterface = (input) => {\n    this.props.togglePlusTwo(input)\n    let xyz = []\n    for (const solve of this.props.solvesInterface){\n      let x = solve.isplustwo\n      if (solve.solveid === input ){\n        solve[\"isplustwo\"] = x\n      }\n      if (solve.solveid === input &&solve.temporary){\n        solve[\"isplustwo\"] = !x\n      }\n      xyz = [...xyz, solve]\n    }\n    this.props.getInterfaceSolves(xyz)\n    this.removeButtonFocusPlusTwo()\n  }\n\n  toggleDNFInterface = (input) => {\n    this.props.toggleDNF(input)\n    let xyz = []\n    for (const solve of this.props.solvesInterface){\n      if (solve.solveid === input){\n        let x = !solve.isdnf\n        solve[\"isdnf\"] = !x\n        if (solve.temporary){\n          let x = !solve.isdnf\n          solve[\"isdnf\"] = x\n        }\n      }\n      xyz = [...xyz, solve]\n    }\n    this.props.getInterfaceSolves(xyz)\n    this.removeButtonFocusDNF()\n  }\n\n  color = () => {\n    if(this.props.solves!==\"loading...\"){\n      const colorChange = () => {\n        if(this.props.isBackgroundLight){\n          document.getElementById(\"colorClick\").style.backgroundColor=\"rgb(224, 84, 74)\";\n          document.getElementById(\"colorClick2\").style.backgroundColor=\"rgb(224, 84, 74)\";\n        }else{\n          document.getElementById(\"colorClick\").style.backgroundColor=\"rgb(135, 47, 41)\";\n          document.getElementById(\"colorClick2\").style.backgroundColor=\"rgb(135, 47, 41)\";\n        }\n        this.setState({\n          beginAfterDelayMobile: true,\n        })\n      }\n      // this.delayMobile = setTimeout(()=> beginAfterDelayMobile(),275)\n      this.changeColor = setTimeout(()=>colorChange(), 275)\n    }\n  }\n\n  colorRegular = () => {\n    if(document.getElementById(\"colorClick\")){\n      if(document.getElementById(\"colorClick\").style.backgroundColor===\"rgb(135, 47, 41)\"){\n        document.getElementById(\"colorClick\").style.backgroundColor=\"rgb(23, 23, 23)\";\n      }\n      if(document.getElementById(\"colorClick\").style.backgroundColor===\"rgb(224, 84, 74)\"){\n        document.getElementById(\"colorClick\").style.backgroundColor=\"whitesmoke\";\n      }\n    }\n    if(document.getElementById(\"colorClick2\")){\n      if(document.getElementById(\"colorClick2\").style.backgroundColor===\"rgb(135, 47, 41)\"){\n        document.getElementById(\"colorClick2\").style.backgroundColor=\"rgb(23, 23, 23)\";\n      }\n      if(document.getElementById(\"colorClick2\").style.backgroundColor===\"rgb(224, 84, 74)\"){\n        document.getElementById(\"colorClick2\").style.backgroundColor=\"whitesmoke\";\n      }\n    }\n  }\n\n\n  keyPressSafetyUndo = (e) => {\n    if (e.keyCode===93 || e.keyCode===91){\n      if(!this.state.keyPressOne||!this.state.keyPressTwo){\n        if(!this.state.going){\n          this.setState({\n            keyPressOne: false,\n            keyPressTwo: false,\n          })\n        }\n      }\n    }\n    if (e.keyCode===17){\n      if(!this.state.keyPressOne||!this.state.keyPressTwo){\n        if(!this.state.going){\n          this.setState({\n            keyPressOne: false,\n            keyPressTwo: false,\n          })\n        }\n      }\n    }\n  }\n\n  keyPressSafety = (e) => {\n    if (!this.state.going){\n      if(!this.state.countingDown){\n        if(!this.state.preventStartLoop){\n          if (e.keyCode===91){\n            this.setState({\n              keyPressOne: true\n            })\n          }\n          if (e.keyCode===93){\n            this.setState({\n              keyPressTwo: true\n            })\n          }\n          if(e.keyCode===17){\n            if(!this.state.keyPressOne){\n              this.setState({\n                keyPressOne: true\n              })\n            }else{\n              this.setState({\n                keyPressTwo: true\n              })\n            }\n          }\n        }\n      }\n    }\n  }\n  \n  \n\n  keyPressStart = (e) => {\n    this.getCountDownNumber()\n    const loop = () => {\n      this.setState({\n        preventStartLoop: false\n      })\n    }\n    const stopDelay = () => {\n      this.setState({\n        beginAfterDelay: false,\n      })\n    }\n    if(!this.props.isManualEnter){\n      if(e.keyCode===93||e.keyCode===91||e.keyCode===17){\n        if(this.state.preventStartLoop){\n          if(!this.state.isCountDownGoing){\n            setTimeout(()=>loop(),50)\n          }\n        }\n        if(this.state.countingDown){\n          this.startTimerDuringCountDown()\n        }\n        if (!this.state.going){\n          if (this.state.keyPressOne && this.state.keyPressTwo){\n            if(!this.state.preventStartLoop){\n              if(!this.state.preventCommand){\n                if(this.state.beginAfterDelay){\n\n                  if(Number(this.state.countDown)===0){\n                    this.setState({\n                      //here\n                      preventStartLoop: true,\n                      preventCommand: true\n                    })\n                    this.beginFunction() \n                  }else{\n                    this.countDownRunFunction()\n                    this.setState({\n                      preventStartLoop: true,\n                      disableCommand: true,\n                      keyPressOne: false,\n                      keyPressTwo: false,\n                    })\n                    setTimeout(()=>this.keyPressTrue(), this.props.inspectionTime*1000)\n                    this.commandFalse = setTimeout(()=>this.disableCommandFalse(), this.props.inspectionTime*1000)\n                  }\n                }else{\n                  setTimeout(()=>clearTimeout(stopDelay()),301)\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  disableCommandFalse = () => {\n    this.setState({\n      disableCommand: false\n    })\n  }\n\n  keyPressTrue = () => {\n    this.setState({\n      keyPressOne: true,\n      keyPressTwo: true,\n    })\n  }\n\n  keyPressSafetyUndoStop = (e) => {\n    if (e.keyCode===93 || e.keyCode===91){\n      if(!this.state.keyPressOne||!this.state.keyPressTwo){\n        if(this.state.going){\n          this.setState({\n            keyPressOne: true,\n            keyPressTwo: true,\n          })\n        }\n      }\n    }\n    if (e.keyCode===17){\n      if(!this.state.keyPressOne||!this.state.keyPressTwo){\n        if(this.state.going){\n          this.setState({\n            keyPressOne: true,\n            keyPressTwo: true,\n          })\n        }\n      }\n    }\n  }\n\n  keyPressSafetyStop = (e) => {\n    if (this.state.going){\n      if (e.keyCode===91){\n        this.setState({\n          keyPressOne: false,\n          keyPressTwo: false,\n        })\n      }\n      if (e.keyCode===93){\n        this.setState({\n          keyPressTwo: false,\n          keyPressOne: false,\n        })\n      }\n      if (e.keyCode===17){\n        this.setState({\n          keyPressTwo: false,\n          keyPressOne: false,\n        })\n      }\n    }\n  }\n\n  keyPressStop = (e) => {\n    const preventCommand1 = () => {\n      this.setState({\n        preventCommand: false,\n      })\n    }\n    if (this.state.going){\n      if (e.keyCode===91 || e.keyCode===93){\n        setTimeout(()=>preventCommand1(),350)\n        if (!this.state.keyPressOne || !this.state.keyPressTwo){\n          this.setState({\n            isDisableSpacebar: false\n          })\n          this.stop(e)\n        }\n      }\n      if (e.keyCode===17){\n        setTimeout(()=>preventCommand1(),350)\n        if (!this.state.keyPressOne || !this.state.keyPressTwo){\n          this.stop(e)\n        }\n      }\n    }\n  }\n\n  test = () => {\n    console.log(this.state.beginAfterDelayMobile)\n  }\n\n  render() {   \n    return (\n      <div>\n        {/* <button onClick={this.test}>test</button> */}\n        {\n        this.state.isCountDownGoing ? \n        <CountDown \n        isBackgroundLight={this.props.isBackgroundLight}\n        startTimerDuringCountDownMobile={this.startTimerDuringCountDownMobile}\n        countDown={this.state.countDown}\n        />\n        :\n        (\n        this.state.isMobileGoing ?\n        <MobileTimer \n        timerFormatted={this.state.timerFormatted}\n        isBackgroundLight={this.props.isBackgroundLight}\n        stopMobile={this.stopMobile}\n        stopMobileRoute={this.stopMobileRoute}\n        isTimerDisabled={this.props.isTimerDisabled}\n        />         \n        :\n        <div style={{backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", color: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>\n          <HeaderContent \n          isMobileGoing={this.state.isMobileGoing}\n          isSignedIn={this.props.isSignedIn}\n          isBackgroundLight={this.props.isBackgroundLight}\n          dashboard={this.props.dashboard}\n          username={this.props.username}\n          signIn={this.props.signIn}\n          />\n          <div style={{ position:\"relative\"}}>\n            <Scramble \n            isDisplayScrambleSmall={this.props.isDisplayScrambleSmall}\n            isDisplayScrambleMedium={this.props.isDisplayScrambleMedium}\n            scrambleRegular={this.props.scrambleRegular}\n            isBackgroundLight={this.props.isBackgroundLight}\n            megaminxScramble={this.props.megaminxScramble}\n            multiBLDScramble={this.props.multiBLDScramble}\n            />\n\n            <TimerClock \n            isBackgroundLight={this.props.isBackgroundLight}\n            id={this.props.id}\n            solvesApp={this.props.solves}\n            send={this.props.send}\n            getSolveFromInterface={this.props.getSolveFromInterface}\n            getInterfaceSolvesSingle={this.props.getInterfaceSolvesSingle}\n            solves={this.state.solves}\n            sendToSolves={this.sendToSolves}\n            sessionName={this.props.sessionName}\n            sessions={this.props.sessions}\n            twoFormatted={this.state.twoFormatted}\n            megaminxScramble={this.props.megaminxScramble}\n            scrambleRegular={this.props.scrambleRegular}\n            scramble={this.props.scramble}\n            multiBLDScramble={this.props.multiBLDScramble}\n            puzzleType={this.props.puzzleType}\n            displayTimeFormatted={this.state.displayTimeFormatted}\n            converter={this.converter}\n            isManualEnter={this.props.isManualEnter}\n            timerFormatted={this.state.timerFormatted}\n            />\n          </div>\n\n\n          <ButtonTop \n          isManualEnter={this.props.isManualEnter}\n          isMobileGoing={this.props.isMobileGoing}\n          isMobile={this.props.isMobile}\n          beginMobile={this.beginMobile}\n          color={this.color}\n          isBackgroundLight={this.props.isBackgroundLight}\n          />\n\n\n          {this.state.isMobileGoing ? \n            <div></div>\n            :\n            <Scroll isBackgroundLight={this.props.isBackgroundLight} isMobile={this.props.isMobile}>\n              <Table \n              solvesApp={this.props.solves}\n              id={this.props.id}\n              aoNum2={this.props.aoNum2} \n              aoNum={this.props.aoNum} \n              toggleDNFInterface={this.toggleDNFInterface}\n              togglePlusTwo={this.togglePlusTwoInterface}\n              plusTwo={this.plusTwo} \n              solves={this.props.solvesInterface} \n              removeTime={this.removeTime} \n              styles={this.props.isBackgroundLight}/>\n            </Scroll >\n          }\n          <ButtonBottom \n          isManualEnter={this.props.isManualEnter}\n          isMobileGoing={this.props.isMobileGoing}\n          isMobile={this.props.isMobile}\n          beginMobile={this.beginMobile}\n          color={this.color}\n          isBackgroundLight={this.props.isBackgroundLight}/> \n\n          <div id=\"light\">\n            <Footer \n            isSessionName={this.props.isSessionName}\n            id={this.props.id}\n            sessionInterface={this.props.sessionInterface}\n            sessionName={this.props.sessionName}\n            puzzleType={this.props.puzzleType}\n            />\n            <Average \n            solves={this.props.solvesInterface} \n            /> \n            <CustomAverage  \n            aoNum={this.props.aoNum} \n            solves={this.props.solvesInterface} \n            />\n            {\n            this.props.id ? \n              <h1 ><button  onClick={this.newSession} style={{marginLeft:\"1rem\", color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\">New Session</button></h1>\n            :\n            <h1> </h1>\n            }\n          </div>\n          <br></br>\n        </div>\n        )\n        }\n      </div>\n    )\n  }\n\n\n\n  componentDidMount() {\n    setTimeout(()=>this.getCountDownNumber(),1)\n    setTimeout(()=>this.props.getTheme(),1)\n    document.addEventListener('mouseup', this.colorRegular)\n    document.addEventListener('touchend', this.colorRegular)\n    document.addEventListener('keyup', this.begin)\n    document.addEventListener('keyup', this.countDownRun)\n    document.addEventListener('keydown', this.stop)\n    document.addEventListener('keyup', this.preventStartLoop)\n    document.addEventListener('keydown', this.keyPressStop)\n    document.addEventListener('keydown', this.keyPressSafetyStop)\n    document.addEventListener('keydown', this.keyPressSafety)\n    document.addEventListener('keyup', this.keyPressStart)\n    document.addEventListener('keyup', this.keyPressSafetyUndo)\n    document.addEventListener('keyup', this.keyPressSafetyUndoStop)\n    document.addEventListener('keyup', this.beginAfterDelaySafety)\n    document.addEventListener('keydown', this.beginAfterDelay)\n  }\n}\n\nexport default TimerInterface;\n","import React, { Component } from 'react'\nimport Chart from \"chart.js\";\n// import classes from \"./LineGraph.module.css\";\nlet newChart\n\n\nexport default class GraphNumberSolves extends Component {\n    chartRef = React.createRef();\n\n    state = {\n        indexNumber: 0\n    }\n    \n    // options = () =>{\n    //     let optionsArray = this.props.categories\n    //     optionsArray = [\"All solves\", ...optionsArray]\n    //     const selectbox = document.getElementById(\"categoriesNumberSolves\")\n    //     optionsArray.map((option,index)=>{\n    //         let newOption = document.createElement(\"option\")\n    //         newOption.text = option\n    //         newOption.value = index\n    //         selectbox.add(newOption)\n    //         return(null)\n    //     })\n    // }\n\n    // getIndexNumber = () =>{\n    //     const x = document.getElementById(\"categoriesNumberSolves\")\n    //     const y = x.options[x.selectedIndex].value\n    //     this.setState({\n    //         indexNumber: y\n    //     })\n    // }\n\n    componentDidMount() {\n        // console.log(this.props.numberSolves)\n        // console.log(this.props.dates)\n        this.solvesChart()\n        // this.options()\n    }\n\n    componentDidUpdate() {\n        this.solvesChart()\n    }\n\n    solvesChart = () =>{\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        if (typeof newChart !== \"undefined\") newChart.destroy();\n        newChart = new Chart(myChartRef, {\n            type: \"line\",\n            data: \n            {\n                labels: this.props.dates[this.props.timePeriod][this.props.indexNumberGraphs],\n                // labels: [\"2020-06-12T21:35:34.466Z\", \"2020-06-15T21:35:34.466Z\", \"2020-07-10T07:00:00.000Z\"],\n                // labels: [\"Fri, 12 Jun 2020 18:47:15 +0000\", \"Fri, 19 Jun 2020 18:47:15 +0000\", \"2020-06-21T18:56:07.457Z\", \"2020-06-29T07:00:00.000Z\"],\n    \n                datasets: [{\n                  label: \"Averages Over Time\",\n                //   data: [10.22, 12.32, 6.94],\n                data: this.props.numberSolves[this.props.timePeriod][this.props.indexNumberGraphs],\n                backgroundColor: this.props.isBackgroundLight ? \"rgba(0,0,190,.1)\" : \"rgba(250,250,250,.8)\" ,\n                borderColor: \"light red\",\n                // borderWidth: 10,\n                pointRadius: 5,\n                }]\n              },\n            \n            options: {\n                events: [],\n                title: {\n                    display: true,\n                    text: \"Number of Solves by Date\",\n                    fontColor: this.props.isBackgroundLight ? \"rgba(10,10,10,.8)\" : \"rgba(250,250,250,1)\",\n                },\n                responsive: true,\n                scales: {\n                    xAxes: [{\n                        type: 'time',\n                        time: {\n                            unit: 'day',\n                            displayFormats: {\n                                'millisecond': 'MMM DD',\n                                'second': 'MMM DD',\n                                'minute': 'MMM DD',\n                                'hour': 'MMM DD',\n                                'day': 'MMM DD',\n                                'week': 'MMM DD',\n                                'month': 'MMM DD',\n                                'quarter': 'MMM DD',\n                                'year': 'MMM DD',\n                            }\n                        },\n                        distribution: 'linear',\n                        gridLines: {\n                            color: this.props.isBackgroundLight ? \"rgba(10,10,10,.1)\" : \"rgba(250,250,250,.4)\"\n                        },\n                        ticks: {\n                            fontColor: this.props.isBackgroundLight ? \"rgba(10,10,10,.8)\" : \"rgba(250,250,250,1)\",\n                        }\n                    }],\n                    yAxes : [{\n                        ticks : {\n                            beginAtZero : true,\n                            maxTicksLimit: 20,\n                            fontColor: this.props.isBackgroundLight ? \"rgba(10,10,10,.8)\" : \"rgba(250,250,250,1)\",\n                            stepSize: 1,\n                        },   \n                        gridLines: {\n                            color: this.props.isBackgroundLight ? \"rgba(10,10,10,.1)\" : \"rgba(250,250,250,.4)\"\n                        },\n                    }],\n                },\n                legend:{\n                    display: false\n                }\n            },\n    \n        });\n    }\n\n\n    render() {\n        return (\n            <div >\n                {/* <div className=\"center\">\n                    <select onChange={this.getIndexNumber} id=\"categoriesNumberSolves\"></select>\n                </div> */}\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}","import React, { Component } from 'react'\nimport Chart from \"chart.js\";\nlet newChart;\n\nfunction minutesToHours(secondsTotal) {\n    var hours = Math.floor(secondsTotal / 3600)\n    var minutes = Math.floor((secondsTotal / 60)%60);\n    var seconds = secondsTotal % 60;\n    var milliseconds = \"00\"\n    let zero = \"0\"\n    if (hours > 0) {\n        if(seconds< 10){\n            return (hours + \":\" + minutes + \":\" + zero + seconds + \".\" + milliseconds)\n        }else{\n            return (hours + \":\" + minutes + \":\" + seconds + \".\" + milliseconds)\n        }\n    }else if (minutes > 0) {\n        if(seconds< 10){\n            return (minutes + \":\" + zero + seconds + \".\" + milliseconds)\n        }else{\n            return (minutes + \":\" + seconds + \".\" + milliseconds)\n        }\n    }else{\n        return (seconds + \".\" + milliseconds)\n    }\n}\n\n\nexport default class Graph extends Component {\n    chartRef = React.createRef();\n    \n    state={\n        data: \"\",\n        indexNumber: \"\",\n        test: \"\",\n    }\n\n\n\n    compare = (a,b) => {\n        return a - b\n    }\n\n    changeData = () => {\n        this.setState({\n            data: [5.55, 8.41, 9.99]\n        })\n    }\n\n    options = () => {\n        let optionsArray = this.props.categories\n        optionsArray = [\"All solves\", ...optionsArray]\n        const selectbox = document.getElementById(\"categories\")\n        optionsArray.map((option, index)=> {\n            let newOption = document.createElement(\"option\")\n            newOption.text=option\n            newOption.value=index\n            selectbox.add(newOption)\n            return(null)\n        })\n    }\n\n    optionsTimePeriod = () => {\n        let optionsArray = [\"All time\", \"Week\", \"Month\", \"Year\",]\n        const selectbox = document.getElementById(\"timePeriod\")\n        optionsArray.map((option, index)=> {\n            let newOption = document.createElement(\"option\")\n            newOption.text=option\n            newOption.value=index\n            selectbox.add(newOption)\n            return(null)\n        })\n    }\n\n    changeIndexNumber = () =>{\n        this.props.changeIndexNumber(\"categories\")\n        const x = document.getElementById(\"categories\")\n        const y = x.options[x.selectedIndex].value\n        this.setState({\n            indexNumber: y\n        })\n    }\n\n    changeTimePeriod = () =>{\n        this.props.changeTimePeriod(\"timePeriod\")\n        const x = document.getElementById(\"timePeriod\")\n        const y = x.options[x.selectedIndex].value\n        this.setState({\n            timePeriod: y\n        })\n    }\n\n    test = () =>{\n        let testArray = new Set(this.props.averages)\n        this.setState({\n            test: testArray\n        })\n        // console.log(\"test\", this.state.test)\n    }\n\n\n    componentDidMount() {\n        this.optionsTimePeriod()\n        setTimeout(()=>this.changeIndexNumber(),10)\n        // setTimeout(()=>console.log(this.props.averages),100)\n        // setTimeout(()=>console.log(this.props.dates),100)\n        this.options()\n        this.buildChart()\n    }\n\n    componentDidUpdate() {\n        this.buildChart()\n    }\n\n    buildChart = () => {\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        if (typeof newChart !== \"undefined\") newChart.destroy();\n        newChart = new Chart(myChartRef, {\n            type: \"line\",\n            data: \n            {\n                labels: this.props.dates[this.props.timePeriod][this.state.indexNumber],\n    \n                datasets: [{\n                    label: \"Averages by Date\",\n                    data: this.props.averages[this.props.timePeriod][this.state.indexNumber],\n                    backgroundColor: this.props.isBackgroundLight ? \"rgba(0,0,190,.1)\" : \"rgba(250,250,250,.8)\" ,\n                    borderColor: \"light red\"\n    \n                }]\n              },\n            \n            options: {\n                events: [],\n                title: {\n                    display: true,\n                    text: \"Averages Over Time\",\n                    fontColor: this.props.isBackgroundLight ? \"rgba(10,10,10,.8)\" : \"rgba(250,250,250,1)\",\n                },\n                responsive: true,\n                scales: {\n                    xAxes: [{\n                        type: 'time',\n                        time: {\n                            unit: 'day',\n                            displayFormats: {\n                                'millisecond': 'MMM DD',\n                                'second': 'MMM DD',\n                                'minute': 'MMM DD',\n                                'hour': 'MMM DD',\n                                'day': 'MMM DD',\n                                'week': 'MMM DD',\n                                'month': 'MMM DD',\n                                'quarter': 'MMM DD',\n                                'year': 'MMM DD',\n                            }\n                        },\n                        distribution: 'linear',\n                        gridLines: {\n                            color: this.props.isBackgroundLight ? \"rgba(10,10,10,.1)\" : \"rgba(250,250,250,.4)\"\n                        },\n                        ticks: {\n                            fontColor: this.props.isBackgroundLight ? \"rgba(10,10,10,.8)\" : \"rgba(250,250,250,1)\",\n                        }\n                    }],\n                    yAxes : [{\n                        ticks : {\n                            stepSize: 1,\n                            beginAtZero : true,\n    \n                            userCallback: function(item) {\n                                return minutesToHours(item)\n                            },\n                            maxTicksLimit: 20,\n                            fontColor: this.props.isBackgroundLight ? \"rgba(10,10,10,.8)\" : \"rgba(250,250,250,1)\",\n                        },   \n                        gridLines: {\n                            color: this.props.isBackgroundLight ? \"rgba(10,10,10,.1)\" : \"rgba(250,250,250,.4)\"\n                        },\n                    }],\n                },\n                legend:{\n                    display: false\n                }\n            }\n        });\n    }\n\n\n    render() {\n        return (\n            <div >\n                <div className=\"center\">\n                    {this.props.isBackgroundLight ? \n                    <select className=\"pa1 ba b--green bg-white\" style={{color: \"black\"}}  onChange={this.changeIndexNumber} id=\"categories\"></select>\n                    :\n                    <select className=\"pa1 ba b--green bg-black\" style={{color: \"white\"}}  onChange={this.changeIndexNumber} id=\"categories\"></select>\n                    }\n                    {this.props.isBackgroundLight ? \n                    <select onChange={this.changeTimePeriod} id=\"timePeriod\" className=\"pa1 ba b--green bg-white\" style={{color: \"black\"}}></select>\n                    :\n                    <select onChange={this.changeTimePeriod} id=\"timePeriod\" className=\"pa1 ba b--green bg-black\" style={{color: \"white\"}}></select>\n                    }\n                </div>\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n","import React, { Component } from \"react\";\n\n\n\n\nclass Card extends Component {\n    deleteSession=()=>{\n        this.props.removeSessionFromState(this.props.session)\n        let solvesToDB = this.props.solves.filter(sessions=>{\n            return sessions.session!==this.props.uniqueSession\n        })\n        this.props.send(solvesToDB)\n        let offline = JSON.parse(localStorage.getItem(\"offline\"))\n        if(offline){\n            localStorage.setItem(\"offlinesolves\", JSON.stringify({\"solves\": [...solvesToDB]}))\n        }\n        this.props.removeFromSolvesInterface(this.props.uniqueSession)\n        this.props.removeFromSolves(this.props.uniqueSession)\n        let x = this.props.uniqueSessionsDB\n        x.splice(x.indexOf(this.props.uniqueSession), 1)\n        if (x.length===0){\n            this.props.getSessionNumber(1)\n            this.props.getInterfaceSession(1)\n            this.props.getSessionNameOnLoad(null, \"3x3\")\n        }else if (this.props.uniqueSession===this.props.sessions) {\n            let c = x.length \n            // this.props.getSessionNumber(Math.max(...x))\n            // this.props.getInterfaceSession(c)\n            this.props.loadPastSessionSolveData(Math.max(...x), c,false)\n        } else {\n            let a = [...x].sort(this.compare).indexOf(this.props.sessions)\n            this.props.getInterfaceSession(a+1)\n        }\n    }\n\n    deleteSessionWithConfirm = () =>{\n        if (this.props.isConfirmSessionDelete){\n            let confirm = window.confirm(\"Are you sure you would like to remove this session? Action cannot be undone.\")\n            if (confirm) {\n                this.deleteSession()\n            }\n        }else{\n            this.deleteSession()\n        }\n    }\n\n    removeSessionDB = () =>{\n        this.props.removeFromUniqueSessionsDB(this.props.uniqueSession) \n    }\n\n    deleteFunc = () => {\n        const runDelete = async () => {\n            await this.deleteSession()\n            await this.removeSessionDB()\n            await this.props.getSolves()\n        };\n        if (this.props.isConfirmSessionDelete){\n            let confirm = window.confirm(\"Are you sure you would like to remove this session? Action cannot be undone.\")\n            if (confirm) {\n                runDelete()\n            }\n        }else{\n            runDelete()\n        }\n    };\n\n    compare = (a,b) => {\n        return a-b\n    }\n\n    test = () => {\n        console.log(this.props.uniqueSessionsDB)\n    }\n    \n    render() {\n        return(\n            <div className=\"summary-center\">\n                {/* <button onClick={this.test}>Card</button> */}\n                <div id=\"max-width\" className={this.props.isBackgroundLight ? \" bg-white dib br3 pa3 ma2 bw2 shadow-5\" : \" bg-black dib br3 pa3 ma2 bw2 shadow-5\"}>\n                    \n                    \n\n                    {this.props.puzzle ? \n                    <h2 className=\"tc\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Session: {this.props.sessionDisplayName} | {this.props.puzzle}</h2>\n                    :\n                    <h2 className=\"tc\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Session: {this.props.sessionDisplayName}</h2>\n\n                    }\n                    {this.props.isSessionName ? \n                    <h4 className=\"tc\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Name: {this.props.sessionname}</h4>\n                    :\n                    <h4> </h4>\n                    }\n                    {this.props.date ? \n                    <h4 className=\"tc\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Date: {this.props.date}</h4>\n                    :\n                    <h4> </h4>\n                    }\n                    <h4 className=\"display-linebreak\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>{this.props.row}</h4>\n                    <h4 className=\"tc\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Average: {this.props.average}</h4>\n                    <h4 className=\"tc\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Best single: {this.props.puzzleBest}</h4>\n                    <h4 className=\"tc\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Worst single: {this.props.puzzleWorst}</h4>\n                    <div className=\"tc\">\n                    {\n                        this.props.ao5 ? \n                    <table className=\"summary-center\">\n                        <thead>\n                            <tr>\n                                <td>\n                                </td>\n                                <td>\n                                    <h4>Current:</h4>\n                                </td>\n                                <td>\n                                    <h4>Best:</h4>\n                                </td>\n                                <td>\n                                    <h4>Worst:</h4>\n                                </td>\n                            </tr>\n                        </thead>\n                        <tbody>\n                        {this.props.mo3 ? \n                        <tr>\n                            <td>\n                                <h4>\n                                mo3\n                                </h4>\n                            </td>\n                        </tr>\n                        :\n                        <tr></tr>\n                        }\n                        {this.props.ao5 ? \n                        <tr>\n                            <td>\n                                <h4>\n                                ao5\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao5}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao5BestAndWorst[1]}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao5BestAndWorst[0]}\n                                </h4>\n                            </td>\n                        </tr>\n                        :\n                        <tr></tr>\n                        }\n                        {this.props.ao12 ? \n                        <tr>\n                            <td>\n                                <h4>\n                                ao12\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao12}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao12BestAndWorst[1]}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao12BestAndWorst[0]}\n                                </h4>\n                            </td>\n                        </tr>\n                        :\n                        <tr></tr>\n                        }\n                        {this.props.ao25 ? \n                        <tr>\n                            <td>\n                                <h4>\n                                ao25\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao25}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao25BestAndWorst[1]}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao25BestAndWorst[0]}\n                                </h4>\n                            </td>\n                        </tr>\n                        :\n                        <tr></tr>\n                        }\n                        {this.props.ao50 ? \n                        <tr>\n                            <td>\n                                <h4>\n                                ao50\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao50}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao50BestAndWorst[1]}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao50BestAndWorst[0]}\n                                </h4>\n                            </td>\n                        </tr>\n                        :\n                        <tr></tr>\n                        }\n                        {this.props.ao100 ? \n                        <tr>\n                            <td>\n                                <h4>\n                                ao100\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao100}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao100BestAndWorst[1]}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao100BestAndWorst[0]}\n                                </h4>\n                            </td>\n                        </tr>\n                        :\n                        <tr></tr>\n                        }\n                        {this.props.ao200 ? \n                        <tr>\n                            <td>\n                                <h4>\n                                ao200\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao200}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao200BestAndWorst[1]}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao200BestAndWorst[0]}\n                                </h4>\n                            </td>\n                        </tr>\n                        :\n                        <tr></tr>\n                        }\n                        {this.props.ao500 ? \n                        <tr>\n                            <td>\n                                <h4>\n                                ao500\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao500}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao500BestAndWorst[1]}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao500BestAndWorst[0]}\n                                </h4>\n                            </td>\n                        </tr>\n                        :\n                        <tr></tr>\n                        }\n                        {this.props.ao1000 ? \n                        <tr>\n                            <td>\n                                <h4>\n                                ao1000\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao1000}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao1000BestAndWorst[1]}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao1000BestAndWorst[0]}\n                                </h4>\n                            </td>\n                        </tr>\n                        :\n                        <tr></tr>\n                        }\n                        {this.props.ao5000 ? \n                        <tr>\n                            <td>\n                                <h4>\n                                ao5000\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao5000}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao5000BestAndWorst[1]}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao5000BestAndWorst[0]}\n                                </h4>\n                            </td>\n                        </tr>\n                        :\n                        <tr></tr>\n                        }\n                        {this.props.ao10000 ? \n                        <tr>\n                            <td>\n                                <h4>\n                                ao10000\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao10000}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao10000BestAndWorst[1]}\n                                </h4>\n                            </td>\n                            <td>\n                                <h4>\n                                {this.props.ao10000BestAndWorst[0]}\n                                </h4>\n                            </td>\n                        </tr>\n                        :\n                        <tr></tr>\n                        }\n                        </tbody>\n                    </table>\n                        :\n                        <table></table>\n                        }\n                        <h1><button className=\"button2\" onClick={()=>this.props.loadPastSessionSolveData(this.props.uniqueSession, this.props.ind, true)} style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"white\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Resume Session</button></h1>\n                        <button className=\"button2\" onClick={this.deleteFunc} style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"white\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Delete Session</button>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\n\nexport default Card;","import React, { Component } from \"react\";\nimport Card from \"./Card\";\n\nclass CardList extends Component {\n    compare = (a,b) => {\n        return b - a\n    } \n\n    average = (solve, ao) => {\n        let timesMS = []\n        let divisor = 0\n        let dnfCount = 0\n        let totalMS = 0\n        let finalAverage = \"\"\n        let solves = [...solve].reverse()\n        for(let i = 0; i<ao; i++){\n            divisor++\n            if(solves[i].isplustwo){\n                timesMS.push(Number(solves[i].millisecondstwo))\n            }else if (solves[i].isdnf) {\n                dnfCount++\n            }else{\n                timesMS.push(Number(solves[i].milliseconds))\n            }\n        }\n        timesMS.sort(this.compare)\n        if(dnfCount===0){\n            timesMS.pop()\n        }\n        timesMS.shift()\n        for (const milliseconds of timesMS){\n            totalMS += Number(milliseconds)\n        }\n        let averageMS = totalMS / (divisor-2)\n        if(dnfCount>1){\n            finalAverage+=\"DNF\"\n        }else{\n            let hours = Math.floor((averageMS / 3600000))\n            let minutes = Math.floor((averageMS / 60000)%60)\n            let seconds = Math.floor((averageMS / 1000)%60)\n            let milliseconds = Math.round(averageMS % 1000)\n            finalAverage = \"\"\n            if (hours > 0){\n                finalAverage += hours +\":\"\n            }\n            if (minutes > 0){\n                finalAverage += minutes +\":\"\n                if(seconds<10){\n                    finalAverage+=\"0\"\n                }\n            }\n            finalAverage += seconds + \".\"\n            if (milliseconds < 10){\n                finalAverage += \"00\"\n            }\n            if (milliseconds < 100){\n                if (milliseconds > 9){\n                    finalAverage += \"0\"\n                }\n            }\n            finalAverage += milliseconds\n        }\n        return finalAverage\n    }\n\n\n\n    bestWorstAverage = (solve, ao) => {\n        let finalAverages = []\n        let solves = [...solve].reverse()\n        let loopNumber = solves.length - (ao-1)\n        let averagesMS = []\n        while(loopNumber>0){\n            let divisor = 0\n            let totalMS = 0\n            let solvesArray = []\n            let averageMS = 0\n            let dnfCount = 0\n            for (let i = 0; i < ao; i++){\n                divisor++\n                if(solves[i].isplustwo){\n                    solvesArray.push(Number(solves[i].millisecondstwo))\n                }else if (solves[i].isdnf) {\n                    dnfCount++\n                }else{\n                    solvesArray.push(Number(solves[i].milliseconds))\n                }\n            }\n            solvesArray.sort(this.compare)\n            if(dnfCount===0){\n                solvesArray.pop()\n            }\n            solvesArray.shift()\n            for (const milliseconds of solvesArray){\n                totalMS += Number(milliseconds)\n            }\n            loopNumber--\n            averageMS = totalMS / (divisor-2)\n            if(dnfCount<2){\n                averagesMS.push(averageMS)\n            }\n            solves.shift()  \n            // finalAverages.push(finalAverage)\n        }\n        let bestAndWorst = []\n        bestAndWorst.push(Math.max(...averagesMS))\n        bestAndWorst.push(Math.min(...averagesMS))\n        for (let i = 0; i<2; i++){\n            let finalAverage = \"\"\n            let hours = Math.floor((bestAndWorst[i] / 3600000))\n            let minutes = Math.floor((bestAndWorst[i] / 60000)%60)\n            let seconds = Math.floor((bestAndWorst[i] / 1000)%60)\n            let milliseconds = Math.round(bestAndWorst[i] % 1000)\n            finalAverage = \"\"\n            if (hours > 0){\n                finalAverage += hours +\":\"\n            }\n            if (minutes > 0){\n                finalAverage += minutes +\":\"\n                if(seconds<10){\n                    finalAverage+=\"0\"\n                }\n            }\n            finalAverage += seconds + \".\"\n            if (milliseconds < 10){\n                finalAverage += \"00\"\n            }\n            if (milliseconds < 100){\n                if (milliseconds > 9){\n                    finalAverage += \"0\"\n                }\n            }\n            finalAverage += milliseconds\n            finalAverages.push(finalAverage)\n        }\n        return finalAverages\n    }\n \n    render() {\n        let sessionDisplayName = (this.props.solvesSorted.length+1)\n        return(\n            <div>\n                {\n                this.props.solvesSorted.map((solve,i)=>{\n                    this.bestWorstAverage(solve, 5)\n                    let ao5 \n                    let ao12\n                    let ao25\n                    let ao50\n                    let ao100\n                    let ao200\n                    let ao500\n                    let ao1000\n                    let ao5000\n                    let ao10000\n                    let ao5BestAndWorst\n                    let ao12BestAndWorst\n                    let ao25BestAndWorst\n                    let ao50BestAndWorst\n                    let ao100BestAndWorst\n                    let ao200BestAndWorst\n                    let ao500BestAndWorst\n                    let ao1000BestAndWorst\n                    let ao5000BestAndWorst\n                    let ao10000BestAndWorst \n                    if(solve.length>4){\n                        ao5 = this.average(solve, 5)\n                        ao5BestAndWorst = this.bestWorstAverage(solve,5)\n                    }\n                    if(solve.length>11){\n                        ao12 = this.average(solve, 12)\n                        ao12BestAndWorst = this.bestWorstAverage(solve,12)\n                    }\n                    if(solve.length>24){\n                        ao25 = this.average(solve, 25)\n                        ao25BestAndWorst = this.bestWorstAverage(solve,25)\n                    }\n                    if(solve.length>49){\n                        ao50 = this.average(solve, 50)\n                        ao50BestAndWorst = this.bestWorstAverage(solve,50)\n                    }\n                    if(solve.length>99){\n                        ao100 = this.average(solve, 100)\n                        ao100BestAndWorst = this.bestWorstAverage(solve,100)\n                    }\n                    if(solve.length>199){\n                        ao200 = this.average(solve, 200)\n                        ao200BestAndWorst = this.bestWorstAverage(solve,200)\n                    }\n                    if(solve.length>499){\n                        ao500 = this.average(solve, 500)\n                        ao500BestAndWorst = this.bestWorstAverage(solve,500)\n                    }\n                    if(solve.length>999){\n                        ao1000 = this.average(solve, 1000)\n                        ao1000BestAndWorst = this.bestWorstAverage(solve,1000)\n                    }\n                    if(solve.length>4999){\n                        ao5000 = this.average(solve, 5000)\n                        ao5000BestAndWorst = this.bestWorstAverage(solve,5000)\n                    }\n                    if(solve.length>9999){\n                        ao10000 = this.average(solve, 10000)\n                        ao10000BestAndWorst = this.bestWorstAverage(solve,10000)\n                    }\n                    let puzzleBest = this.props.puzzleBest[i]\n                    let puzzleWorst = this.props.puzzleWorst[i]\n                    let session = -1\n                    let date = \"\"\n                    let rawDate2 = \"\"\n                    let rawDate3 = \"\"\n                    let rawDate4 = \"\"\n                    session++\n                    sessionDisplayName--\n                    let totalMS = 0\n                    let divisor = 0\n                    let avgMS = 0\n                    let average = \"0.000\"\n                    let uniqueSessions = \"\"\n                    let ind = this.props.solvesSorted.length-i\n                    let sessionname = \"\"\n                    let isSessionName=false\n                    let puzzle = \"\"\n                    let solveNumber = 0\n                    let solveid = []\n                    const row = solve.map((solve2, index)=>{\n                    uniqueSessions = solve2.session\n                    if (Object.keys(this.props.interfaceSession).length>0){\n                        if (solve2.session in this.props.interfaceSession){\n                            sessionDisplayName = this.props.interfaceSession[solve2.session]\n                            ind=this.props.interfaceSession[solve2.session]\n                        }\n                    }\n                    solveid = [...solveid, solve2.solveid]\n                    solveNumber = solve2.solvenumber\n                    if (index===0){\n                        if (solve2.sessionname){\n                            sessionname = solve2.sessionname\n                            isSessionName = true\n                        }else{\n                            isSessionName=false\n                        }\n                        puzzle = solve2.puzzle\n                        date=\"\"\n                        if (solve2.date){\n                            let rawDate = solve2.date\n                            rawDate2 = rawDate.slice(5,7)\n                            rawDate3 = rawDate.slice(8,10)\n                            rawDate4 = rawDate.slice(0,4)\n                            date += rawDate2 + \"-\"\n                            date += rawDate3 + \"-\"\n                            date += rawDate4\n                        }  \n                    }\n                    if (solve2.isdnf){\n                    \n                    }else if (solve2.isplustwo){\n                        totalMS += Number(solve2.millisecondstwo)\n                        divisor += 1\n\n                    }else{\n                        totalMS += Number(solve2.milliseconds)\n                        divisor += 1\n                    }\n                    if (divisor > 0){\n                        avgMS = (totalMS/divisor)\n                        let hours = Math.floor((avgMS / 3600000))\n                        let minutes = Math.floor((avgMS / 60000)%60)\n                        let seconds = Math.floor((avgMS / 1000)%60)\n                        let milliseconds = Math.round(avgMS % 1000)\n                        average = \"\"\n                        if (hours > 0){\n                            average += hours +\":\"\n                        }\n                        if (minutes > 0){\n                            average += minutes +\":\"\n                            if(seconds<10){\n                                average+=\"0\"\n                            }\n                        }\n                        average += seconds + \".\"\n                        if (milliseconds < 10){\n                            average += \"00\"\n                        }\n                        if (milliseconds < 100){\n                            if (milliseconds > 9){\n                                average += \"0\"\n                            }\n                        }\n                        average += milliseconds\n                    }\n                    return(\n                    <table key={index}>\n                        <tbody>\n                            <tr>\n                                <td>\n                                    {index+1}.\n                                </td>\n                                <td>\n                                    {solve2.isplustwo ?\n                                    solve2.plustwo\n                                    :\n                                    solve2.solve\n                                    }\n                                </td>\n                                {solve2.scramble ? \n                                (solve2.scramble.includes(\"++\")? \n                                <td>\n                                    <h4 className=\"megaminx megaminxSmallCardListScramble min-width\">\n                                    {solve2.scramble}\n                                    </h4>\n                                </td>\n                                :\n                                <td>\n                                    <h4>\n                                    {solve2.scramble}\n                                    </h4>\n                                </td>\n                                )\n                                :\n                                <td></td>\n                                }\n                                <td>\n                                    {solve2.isdnf ?\n                                    \"(DNF)\"\n                                    :\n                                    \"\"\n                                    }\n                                </td>\n                                <td>\n                                    {solve2.isplustwo ?\n                                    \"(+2)\"\n                                    :\n                                    \"\"\n                                    }\n                                </td>\n                            </tr>\n                        </tbody> \n                    </table>\n                    )\n                }) \n                    return(<Card\n                        loadPastSessionSolveData={this.props.loadPastSessionSolveData}\n                        removeFromSolvesInterface={this.props.removeFromSolvesInterface}\n                        send={this.props.send}\n                        ao5BestAndWorst={ao5BestAndWorst}\n                        ao12BestAndWorst={ao12BestAndWorst}\n                        ao25BestAndWorst={ao25BestAndWorst}\n                        ao50BestAndWorst={ao50BestAndWorst}\n                        ao100BestAndWorst={ao100BestAndWorst}\n                        ao200BestAndWorst={ao200BestAndWorst}\n                        ao500BestAndWorst={ao500BestAndWorst}\n                        ao1000BestAndWorst={ao1000BestAndWorst}\n                        ao5000BestAndWorst={ao5000BestAndWorst}\n                        ao10000BestAndWorst ={ao10000BestAndWorst}\n                        ao5={ao5}\n                        ao12={ao12}\n                        ao25={ao25}\n                        ao50={ao50}\n                        ao100={ao100}\n                        ao200={ao200}\n                        ao500={ao500}\n                        ao1000={ao1000}\n                        ao5000={ao5000}\n                        ao10000={ao10000}\n                        puzzleBest={puzzleBest}\n                        puzzleWorst={puzzleWorst}\n                        getSessionNameOnLoad={this.props.getSessionNameOnLoad}\n                        isConfirmSessionDelete={this.props.isConfirmSessionDelete}\n                        isConfirmSolveDelete={this.props.isConfirmSolveDelete}\n                        getSolves = {this.props.getSolves}\n                        solveNumber={solveNumber}\n                        removeFromSolves={this.props.removeFromSolves}\n                        puzzle={puzzle}\n                        isSessionName={isSessionName}\n                        sessionname={sessionname}\n                        ind={ind}\n                        sessions={this.props.sessions}\n                        getSessionNumber={this.props.getSessionNumber}\n                        getInterfaceSession={this.props.getInterfaceSession}\n                        removeFromUniqueSessionsDB={this.props.removeFromUniqueSessionsDB}\n                        uniqueSessionsDB={this.props.uniqueSessionsDB} \n                        uniqueSession={uniqueSessions}\n                        date={date}\n                        sessionDisplayName={sessionDisplayName}\n                        removeSessionFromState={this.props.removeSessionFromState}\n                        average={average}\n                        isBackgroundLight={this.props.isBackgroundLight}\n                        key={i}\n                        session={session} \n                        row={row} \n                        id={this.props.id}\n                        solves={this.props.solves}\n                        />\n                    );\n                }) \n                }\n            </div>\n        );\n    }\n}\n\n\n\nexport default CardList;\n\n\n","import React, { Component } from \"react\"\nimport moment from \"moment\"\n\nclass ImportSolves extends Component{\n\n    state={\n        solve: \"\",\n        scramble: \"\",\n        session: \"\",\n        hours: \"\",\n        minutes: \"\", \n        secondsTwo: \"\", \n        seconds: \"\",\n        milliseconds: \"\",\n        displayTimeFormatted: \"\",\n        isIncorrectFormat: false, \n    }\n\n    jsonError = (input) => {\n        try {\n            return JSON.parse(input);\n        } catch (err) {\n            return false;\n        }\n    }   \n\n    importLoop = () => {\n        let sessionArray = [...this.props.uniqueSessionsDB].reverse()\n        let session = 0 \n        if (this.props.uniqueSessionsDB.length>0){\n            session = Math.max(...this.props.uniqueSessionsDB) \n        }\n        let error = this.jsonError(this.props.importSolves)\n        if (error !== false){\n            this.setState({\n                isIncorrectFormat: false,\n            })\n            let x = JSON.parse(this.props.importSolves)\n            delete x[\"properties\"]\n            let y = JSON.parse(this.props.importSolves)\n            let propertiesArray = []\n            if (y[\"properties\"]){\n                let z = JSON.parse(y[\"properties\"][\"sessionData\"])\n                for (const value of Object.values(z)){\n                    propertiesArray.push(value)\n                }\n            }\n            let solvesArray = []\n            var values1 = []\n            for (const value of Object.values(x)) {\n                if(value.length>0){\n                    values1.push(value)\n                }\n            }\n            \n            values1.map((solve1,index)=>{\n                session++\n                sessionArray.push(session)\n                let puzzleType = \"\"\n                let sessionName = \"\"\n                if (propertiesArray[index]){\n                    if (propertiesArray[index][\"opt\"]['scrType']){\n                        puzzleType = propertiesArray[index][\"opt\"]['scrType']\n                    }else{\n                        puzzleType = \"\"\n                    }\n                    if (propertiesArray[index][\"name\"]){\n                        sessionName = propertiesArray[index][\"name\"]\n                    }else{\n                        sessionName = null\n                    }\n                }\n                for (const solve of solve1){\n                    let solveToDB = {}\n                    if (puzzleType === \"\"){\n                        solveToDB[\"puzzle\"]= \"3x3\"\n                    }\n                    if (puzzleType === \"mgmp\"){\n                        solveToDB[\"puzzle\"] = \"Megaminx\"\n                    }\n                    if (puzzleType === \"777wca\"){\n                        solveToDB[\"puzzle\"] = \"7x7\"\n                    }\n                    if (puzzleType === \"222so\"){\n                        solveToDB[\"puzzle\"] = \"2x2\"\n                    }\n                    if (puzzleType === \"444bld\"){\n                        solveToDB[\"puzzle\"] = \"4x4 BLD\"\n                    }\n                    if (puzzleType === \"555bld\"){\n                        solveToDB[\"puzzle\"] = \"5x5 BLD\"\n                    }\n                    if (puzzleType === \"sqrs\"){\n                        solveToDB[\"puzzle\"] = \"Square-1\"\n                    }\n                    if (puzzleType === \"skbo\"){\n                        solveToDB[\"puzzle\"] = \"Skewb\"\n                    }\n                    if (puzzleType === \"pyrso\"){\n                        solveToDB[\"puzzle\"] = \"Pyraminx\"\n                    }\n                    if (puzzleType === \"clkwca\"){\n                        solveToDB[\"puzzle\"] = \"Clock\"\n                    }\n                    if (puzzleType === \"333oh\"){\n                        solveToDB[\"puzzle\"] = \"3x3 OH\"\n                    }\n                    if (puzzleType === \"333ni\"){\n                        solveToDB[\"puzzle\"] = \"3x3 BLD\"\n                    }\n                    if (puzzleType === \"666wca\"){\n                        solveToDB[\"puzzle\"] = \"6x6\"\n                    }\n                    if (puzzleType === \"555wca\"){\n                        solveToDB[\"puzzle\"] = \"5x5\"\n                    }\n                    if (puzzleType === \"444wca\"){\n                        solveToDB[\"puzzle\"] = \"4x4\"\n                    }\n                    if (puzzleType === \"r3ni\"){\n                        solveToDB[\"puzzle\"] = \"Multi-BLD\"\n                    }\n                    \n                    const hours = Math.floor(solve[0][1] / 3600000)\n                    const minutes = Math.floor((solve[0][1] / 60000)%60)\n                    const seconds = Math.floor((solve[0][1] / 1000)%60)\n                    const milliseconds = (solve[0][1] % 1000)\n                    let msTwo = Number(solve[0][1]) + 2000\n                    const hoursTwo = Math.floor(msTwo / 3600000)\n                    const minutesTwo = Math.floor((msTwo / 60000)%60)\n                    const secondsTwo = Math.floor((msTwo / 1000)%60)\n                    const millisecondsTwo = (msTwo % 1000)\n                    var time = \"\"\n                    let timeTwo = \"\"\n                    if (hours > 0){\n                        time += hours + \":\"\n                    }\n                    if(minutes>0){\n                        time += minutes \n                        time += \":\"\n                        if(seconds<10){\n                            time+=\"0\"\n                        }\n                    }\n                    time += seconds  + \".\"\n                    if (milliseconds < 10){\n                        time += \"00\"\n                    }\n                    if (milliseconds < 100){\n                        if (milliseconds > 9){\n                            time += \"0\"\n                        }\n                    }\n                    time += milliseconds\n                    \n                    if (hoursTwo > 0){\n                        timeTwo += hoursTwo + \":\"\n                    }\n                    if(minutesTwo>0){\n                        timeTwo += minutesTwo \n                        timeTwo += \":\"\n                        if(secondsTwo<10){\n                            timeTwo+=\"0\"\n                        }\n                    }\n                    timeTwo += secondsTwo  + \".\"\n                    if (millisecondsTwo < 10){\n                        timeTwo += \"00\"\n                    }\n                    if (millisecondsTwo < 100){\n                        if (millisecondsTwo > 9){\n                            timeTwo += \"0\"\n                        }\n                    }\n                    timeTwo += millisecondsTwo\n                    \n                    let solveid = \"\"\n                    solveid += Date.now() \n                    \n                    if (solve[0][0]===2000){\n                        solveToDB[\"isplustwo\"] = true\n                    }\n                    if (solve[0][0]===0){\n                        solveToDB[\"isplustwo\"] = false\n                    }\n                    if (solve[0][0]===-1){\n                        solveToDB[\"isdnf\"] = true\n                    }else{\n                        solveToDB[\"isdnf\"] = false\n                    }\n                    solveToDB[\"solve\"]=time\n                    solveToDB[\"plustwo\"] = String(timeTwo)\n                    solveToDB[\"milliseconds\"]=String(solve[0][1])\n                    solveToDB[\"millisecondstwo\"] = String(Number(solve[0][1]) + 2000)\n                    if (solve[1]===null){\n                        solveToDB[\"scramble\"]=null\n                    }else{\n                        solveToDB[\"scramble\"]=solve[1]\n                    }\n                    var abc2 = solve[3]*1000\n                    if (solve[3] === null){\n                        solveToDB[\"date\"]=null\n                    }else{\n                        var dateString = moment.unix(abc2/1000).format(\"YYYY-MM-DD\");\n                        let date = new Date(abc2).toISOString()\n                        date = date.slice(0,10)\n                        solveToDB[\"date\"]= dateString\n                    }\n                    solveToDB[\"session\"]=session\n                    solveToDB[\"id\"]=this.props.id\n                    if (solve[3] === null){\n                        solveToDB[\"unix\"]= null\n                    }else{\n                        solveToDB[\"unix\"]=solve[3]\n                    }\n                    solveToDB[\"sessionname\"]=sessionName\n                    if (solve[4]){\n                        if(sessionName===\"\" && solve[4]===\"\"){\n                            solveToDB[\"sessionname\"]=null\n                        }else{\n                            solveToDB[\"sessionname\"]=solve[4]\n                        }\n                    }\n                    if (solve[5]){\n                        solveToDB[\"puzzle\"] = solve[5]\n                    }\n                    solveToDB[\"solveid\"] = solveid\n                    solvesArray.push(solveToDB)\n                }\n                return(null)\n            }) \n            this.props.getSolvesFromImport(solvesArray)\n            this.props.addToUniqueSessionsDB(sessionArray)\n            setTimeout(()=>this.props.manageSolveData(),100)\n            setTimeout(()=>this.props.loadPastSessionSolveData(session, sessionArray.length, false),100)\n            // setTimeout(()=>this.props.getInterfaceSession(sessionArray.length),100)\n            // setTimeout(()=>this.props.getSessionNumber(session),100)\n        }else{\n            this.setState({\n                isIncorrectFormat: true,\n            })\n        }\n    }\n\n    handleButtonClick = () => {\n        const test1 = async () => {\n            await this.importLoop()\n            await this.props.handleImportSolvesSubmit()\n            await setTimeout(()=>this.props.getSolves(),1)\n        };\n        test1();\n    };\n\n    sessionNumber = () => {\n        this.setState({\n            session: Math.max(...this.props.uniqueSessionsDB)\n        })\n    }\n\n    componentDidMount() {\n        setTimeout(()=>this.sessionNumber(),10)\n    }\n\n    render() {\n        return(\n            <div className=\"center\">\n                {this.props.isImportFromFile ? \n                    <div>\n                        <h4>Copy and paste .json data from .txt file</h4>\n                        {this.props.isBackgroundLight ? \n                        <textarea style={{color: \"rgb(25, 25, 25)\"}} id=\"importSolves\" className=\"pa2 ba b--green bg-white\" onChange={this.props.handleImportSolvesChange} rows=\"13\" cols=\"80\"></textarea>\n                        :\n                        <textarea style={{color: \"white\"}}  id=\"importSolves\" className=\"pa2 ba b--green bg-black\" onChange={this.props.handleImportSolvesChange} rows=\"13\" cols=\"80\"></textarea>\n                        }\n                    </div>\n                    :\n                    <div></div>\n                }\n\n                {this.state.isIncorrectFormat ? \n                <h4 style={{color: \"red\"}}>unreadable format</h4>\n                :\n                <h4> </h4>\n                }\n                {this.props.isImportFromFile ? \n                <h1><button onClick={this.handleButtonClick} style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\" >Import</button></h1>\n                :\n                <h1><button onClick={this.props.isImportFromFileFunc} style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\" >Import From File</button></h1>\n                }\n                <br></br>\n            </div>\n        )\n    }\n}\n\nexport default ImportSolves","import React, { Component } from \"react\"\nimport moment from \"moment\"\n\nclass ImportManual extends Component{\n\n    state={\n        session: null,\n        count: 0,\n        pastSessionName: null,\n        pastPuzzle: null,\n        pastDate: null,\n        isDateWrong: false,\n        isSolveEntered: false,\n        isTimeWrong: false,\n    }\n\n    componentDidMount(){\n        this.getSession()\n    }\n\n    getSession = () => {\n        this.setState({\n            session: Math.max(...this.props.uniqueSessionsDB)+1\n        })\n    }\n\n    sendToDB = () =>{\n        let isSolveEntered = false\n        if (this.props.time > 0){\n            isSolveEntered = true\n        }\n        if (isSolveEntered){\n            this.setState({\n                isSolveEntered: false\n            })\n            let result = true\n            if (this.props.date) {\n                let regex = /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/\n                let date = this.props.date\n                result = regex.test(date)\n            }\n            if (result){\n                if (this.state.isDateWrong){\n                    this.setState({\n                        isDateWrong: false,\n                    })\n                }\n                    if (this.props.time) {\n                        let regex = /^[ 0-9.,]/\n                        let time = this.props.time\n                        result = regex.test(time)\n                    }\n                    if (result){\n                        if (this.state.isTimeWrong){\n                            this.setState({\n                                isTimeWrong: false,\n                            })\n                        }\n                    let tempSession = this.state.session\n                    if (this.state.count > 0) {\n                        if (this.props.importManualTextAreaName !== this.state.pastSessionName\n                            || this.props.date !== this.state.pastDate\n                            || this.props.puzzle !== this.state.pastPuzzle){\n                            this.setState(prevState=>({\n                                session: prevState.session + 1\n                            }))\n                            tempSession += 1\n                        }\n                    }\n                    var x = this.props.time\n                    var y = x.match(/\\d+/g)\n                    var z = y.slice().reverse()\n                    var ms = 0\n                    z.map((number, index) =>{\n                        if(index===0){\n                            if (number.length===1){\n                                ms+=number*100\n                            }\n                            if (number.length===2){\n                                ms+=number*10\n                            }\n                            if (number.length===3){\n                                ms+=number*1\n                            }\n                        }\n                        if(index===1){\n                            ms+=number*1000\n                        }\n                        if(index===2){\n                            ms+=number*60000\n                        }\n                        if(index===3){\n                            ms+=number*3600000\n                        }\n                        return(null)\n                    })\n                    let timeFormatted = \"\"\n                    let one = \"\"\n                    let two = \"\"\n                    let three = \"\"\n                    let four = \"\"\n            \n                    four += \".\" + (y[y.length-1])\n                    if(y[y.length-1].length===1){\n                        four += \"00\"\n                    }\n                    if(y[y.length-1].length===2){\n                        four += \"0\"\n                    }\n                    if(y[y.length-2]){\n                        if(y[y.length-3]){\n                            if (y[y.length-2]<10){\n                                if (!y[y.length-2].includes(0)){\n                                    three+=\"0\"\n                                }\n                            }\n                        }\n                        three += y[y.length-2]\n                    }else{\n                        three+=\"0\"\n                    }\n                    if(y[y.length-3]){\n                        if(y[y.length-4]){\n                            if (y[y.length-3]<10){\n                                if (!y[y.length-3].includes(0)){\n                                    two+=\"0\"\n                                }\n                            }\n                        }\n                        two += y[y.length-3]\n                        two+=\":\"\n                    }\n                    if(y[y.length-4]){\n                        one += y[y.length-4]\n                        one+=\":\"\n                    }\n                    timeFormatted += one + two + three + four\n                    let msTwo = ms + 2000\n                    let msTwoFinal = \"\"\n                    const hours = Math.floor(msTwo / 3600000)\n                    const minutes = Math.floor((msTwo / 60000)%60)\n                    const seconds = Math.floor((msTwo / 1000)%60)\n                    const milliseconds = (msTwo % 1000)\n                    if (hours>0){\n                        msTwoFinal +=  hours + \":\"\n                    }\n                    if (minutes>0) {\n                        if (minutes < 10){\n                            msTwoFinal += \"0\"\n                        }\n                        msTwoFinal +=  minutes + \":\"\n                        if (seconds < 10){\n                            msTwoFinal += \"0\"\n                        }\n                    }\n                    if (minutes === \"0\" || minutes===\"00\"){\n                        msTwoFinal += \"0:\"\n                    }\n                    if (seconds > 0) {\n                        msTwoFinal += seconds + \".\"\n                    }\n                    msTwoFinal += milliseconds\n                    \n                    \n                    let unix = null\n                    if (this.props.date){\n                        unix = moment(this.props.date, \"YYYY-MM-DD\").unix();\n                    }\n                    \n                    let solveid = \"\"\n                    solveid+=Date.now()\n                    \n                    let solvesToAppState = {}\n                    \n                    let scramble = \"\"\n\n                    if(this.props.puzzle===\"Multi-BLD\"){\n                        let multiScramble = this.props.scramble.split(\" \")\n                        for (const letter of multiScramble){\n                            if(letter.includes(\")\")){\n                                scramble += \"\\n\" \n                            }\n                            scramble += letter\n                            scramble+=\" \"\n                        }\n                    }else if(this.props.puzzle===\"Megaminx\"){\n                        let megaminxScramble = this.props.scramble.split(\" \")\n                        for (const letter of megaminxScramble) { \n                            scramble += letter\n                            if (letter ===\"U\" || letter===\"U'\"){\n                                scramble += \"\\n\"\n                            }\n                            scramble+=\" \"\n                        }\n                    }else{\n                        scramble=this.props.scramble\n                    }\n\n                    solvesToAppState[\"scramble\"] = scramble\n\n                    solvesToAppState[\"id\"] = this.props.id\n                    \n                    solvesToAppState[\"session\"] = tempSession\n                    if(this.props.date===null){\n                        solvesToAppState[\"date\"] = null\n                    }else{\n                        solvesToAppState[\"date\"] = this.props.date\n                    }\n                    solvesToAppState[\"solve\"] = timeFormatted\n                    solvesToAppState[\"unix\"] = String(unix)\n                    solvesToAppState[\"puzzle\"] = this.props.puzzle\n                    solvesToAppState[\"milliseconds\"] = ms\n                    solvesToAppState[\"sessionname\"] = this.props.importManualTextAreaName\n                    solvesToAppState[\"solveid\"] = solveid\n                    solvesToAppState[\"plustwo\"] = msTwoFinal\n                    solvesToAppState[\"isdnf\"] = false\n                    solvesToAppState[\"isplustwo\"] = false\n                    solvesToAppState[\"millisecondstwo\"] = ms + 2000\n            \n                    this.props.getSolvesFromImportManual(solvesToAppState)\n                    this.props.handleImportManualSubmit()\n                    this.setState({\n                        pastSessionName: this.props.importManualTextAreaName,\n                        pastPuzzle: this.props.puzzle,\n                        pastDate: this.props.date,\n                    })\n                    this.setState(prevState=>({\n                        count: prevState.count + 1\n                    }))\n                    setTimeout(()=>this.props.getSolves(),10)\n                    setTimeout(()=>this.props.manageSolveData(), 10)\n                    setTimeout(()=>this.props.addToUniqueSessionsDB(this.state.session), 10)\n                    setTimeout(()=>this.props.loadPastSessionSolveData(this.state.session, this.props.uniqueSessionsDB.length, false),10)\n                }else{\n                    this.setState({\n                        isDateWrong: true,\n                    })\n                }\n            }else{\n                this.setState({\n                    isDateWrong: true,\n                })\n            }\n        }else{\n            this.setState({\n                isTimeWrong: true,\n            })\n        }\n    }\n\n        \n\n    render(){\n        return(\n            <div className=\"center\">\n                {this.props.isManual ? \n                <div>\n                    <h4>Time (H:M:S.MS):</h4>\n                    <input id=\"importManualTime\" rows=\"1\" cols=\"10\" style={{color: this.props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} className={this.props.isBackgroundLight ? \"pa2 ba b--green bg-white form-input\": \"pa2 ba b--green bg-black form-input\"} onChange={this.props.handleImportManualTimeChange} type=\"text\"></input>\n\n                    <h4>Scramble:</h4>\n                    <input id=\"importManualScramble\" rows=\"1\" cols=\"10\" style={{color: this.props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} className={this.props.isBackgroundLight ? \"pa2 ba b--green bg-white form-input\": \"pa2 ba b--green bg-black form-input\"} onChange={this.props.handleImportManualScrambleChange} type=\"text\"></input>\n                    <h4>\n                        Date (YYYY-MM-DD): \n                    </h4>\n                    <h4>\n                        *Use of charts requires date\n                    </h4>\n                    <input id=\"importManualDate\" rows=\"1\" cols=\"10\" style={{color: this.props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} className={this.props.isBackgroundLight ? \"pa2 ba b--green bg-white form-input\": \"pa2 ba b--green bg-black form-input\"} onChange={this.props.handleImportManualDateChange} type=\"text\"></input>\n                    <h4>Session name:</h4>\n                    <input id=\"importManualName\" rows=\"1\" cols=\"10\" style={{color: this.props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} className={this.props.isBackgroundLight ? \"pa2 ba b--green bg-white form-input\": \"pa2 ba b--green bg-black form-input\"} onChange={this.handleImportManualNameChange} type=\"text\"></input>\n                    <h4>Puzzle:</h4>\n\n                    <select className={this.props.isBackgroundLight ? \"pa2 ba b--green bg-white form-input\": \"pa2 ba b--green bg-black form-input\"} onChange={this.props.getPuzzleType} id=\"puzzle\" style={{color: this.props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}}>\n                        <option value=\"3x3\">3x3</option>\n                        <option value=\"2x2\">2x2</option>\n                        <option value=\"4x4\">4x4</option>\n                        <option value=\"5x5\">5x5</option>\n                        <option value=\"6x6\">6x6</option>\n                        <option value=\"7x7\">7x7</option>\n                        <option value=\"Pyraminx\">Pyraminx</option>\n                        <option value=\"Megaminx\">Megaminx</option>\n                        <option value=\"Skewb\">Skewb</option>\n                        <option value=\"Square-1\">Square-1</option>\n                        <option value=\"Clock\">Clock</option>\n                        <option value=\"3x3 BLD\">3x3 BLD</option>\n                        <option value=\"3x3 OH\">3x3 OH</option>\n                        <option value=\"4x4 BLD\">4x4 BLD</option>\n                        <option value=\"5x5 BLD\">5x5 BLD</option>\n                        <option value=\"Multi-BLD\">Multi-BLD</option>\n                    </select>\n                </div>\n                :\n                <div></div>\n                }\n                {this.state.isDateWrong ? \n                <h4 style={{color: \"red\"}}>Invalid date format</h4>\n                :\n                <h4> </h4>\n                }\n                {this.state.isTimeWrong ? \n                <h4 style={{color: \"red\"}}>Invalid time format</h4>\n                :\n                <h4> </h4>\n                }\n                {this.state.isSolveEntered ? \n                <h4 style={{color: \"red\"}}>You must enter a solve time</h4>\n                :\n                <h4> </h4>\n                }\n                {this.props.isManual ? \n                <h1><button onClick={this.sendToDB} className=\"button2\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Import</button></h1>\n                :\n                <h1><button onClick={this.props.isManualFunc} className=\"button2\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Import Manually</button></h1>\n                }\n            </div>\n        )\n    }\n}\n\nexport default ImportManual","import React, { Component } from \"react\"\n\nclass DownloadSolves extends Component{\n\n    state = {\n        solves: [],\n        formattedSolves: [],\n        finalOutput: {}\n    }\n    \n    download = (filename, text) => {\n        var element = document.createElement('a');\n        element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n        element.setAttribute('download', filename);\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click();\n        document.body.removeChild(element);\n    }\n\n    getSolvesFromDashboard = () => {\n        let solves = [...this.props.solves].reverse()\n        this.setState({\n            solves: solves\n        })\n        this.formattedSolves()\n    }\n\n    formattedSolves = () => {\n        // let properties = {}\n        var masterObject = {}\n        let sessionData = {}\n        this.state.solves.map((solves, index) => {\n            let puzzleType = (solves[0].puzzle)\n            let puzzle = \"\"\n            if (puzzleType === \"3x3\"){\n                puzzle = \"\"\n            }\n            if (puzzleType === \"megaminx\"){\n                puzzle = \"mgmp\"\n            }\n            if (puzzleType === \"7x7\"){\n                puzzle = \"777wca\"\n            }\n            if (puzzleType === \"2x2\"){\n                puzzle = \"222so\"\n            }\n            if (puzzleType === \"4x4 BLD\"){\n                puzzle = \"444bld\"\n            }\n            if (puzzleType === \"5x5 BLD\"){\n                puzzle = \"555bld\"\n            }\n            if (puzzleType === \"Square-1\"){\n                puzzle = \"sqrs\"\n            }\n            if (puzzleType === \"skewb\"){\n                puzzle = \"skbso\"\n            }\n            if (puzzleType === \"pyraminx\"){\n                puzzle = \"pyrso\"\n            }\n            if (puzzleType === \"Clock\"){\n                puzzle = \"clkwca\"\n            }\n            if (puzzleType === \"3x3 OH\"){\n                puzzle = \"333oh\"\n            }\n            if (puzzleType === \"3x3 BLD\"){\n                puzzle = \"333ni\"\n            }\n            if (puzzleType === \"6x6\"){\n                puzzle = \"666wca\"\n            }\n            if (puzzleType === \"5x5\"){\n                puzzle = \"555wca\"\n            }\n            if (puzzleType === \"4x4\"){\n                puzzle = \"444wca\"\n            }\n            var session = []\n            let i = index + 1\n            let objTest = {\n                \"name\": i,\n                \"opt\": {\n                    \"scrType\": puzzle\n                },\n                \"rank\": i,\n                \"stat\": [1,0,890],\n                \"date\": [1594487042,1594487046],\n            } \n            sessionData[i] = objTest \n\n\n            // let opt = {}\n            // let newOb = {}\n            // let name = {}\n            // sessionData[\"name\"] = index + 1\n            // opt[\"scrType\"] = puzzle \n            // sessionData[\"opt\"] = opt\n            solves.map(solve => {\n                var solveArray = []\n                var time = []\n                if (solve.isplustwo){\n                    time.push(2000, Number(solve.milliseconds))\n                }else if (solve.isdnf){\n                    time.push(-1, Number(solve.milliseconds))\n                }else{\n                    time.push(0, Number(solve.milliseconds))\n                }\n                solveArray.push(time)\n                solveArray.push(solve.scramble)\n                solveArray.push(\"\")\n                solveArray.push(solve.unix)\n                solveArray.push(solve.sessionname)\n                solveArray.push(solve.puzzle)\n                session.push(solveArray)\n                return(null)\n            }) \n            masterObject[\"session\" + (index +1)] = session\n            return(null)\n        })\n        \n        // properties[\"sessionData\"] = sessionData\n        // masterObject[\"properties\"] = properties\n        this.setState({\n            finalOutput: JSON.stringify(masterObject)\n        })\n    }\n    \n\n    componentDidMount() {\n        // this.props.getSolves()\n        setTimeout(()=>this.getSolvesFromDashboard(), 500)\n    }\n        \n    render() {\n        return(\n            <div className=\"center\">\n                <div>\n                <h1><button onClick={()=>this.download(\"solves\", this.state.finalOutput)} style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\" >Export Solves</button></h1> \n                </div>\n                \n            </div>\n        )\n    }\n}\n\nexport default DownloadSolves","import React, { Component } from \"react\"\n\n\n\nclass DownloadSolves extends Component{\n\n    state = {\n        solves: [],\n        formattedSolves: [],\n        finalOutput: []\n    }\n\n    export2csv = () => {\n        let data = \"\";\n        const tableData = [];\n        const rows = this.state.finalOutput\n        for (const row of rows) {\n            const rowData = [];\n            for (const column of row) {\n                rowData.push(column);\n            }\n            tableData.push(rowData.join(\",\"));\n        }\n        data += tableData.join(\"\\n\");\n        const a = document.createElement(\"a\");\n        a.href = URL.createObjectURL(new Blob([data], { type: \"text/csv\" }));\n        a.setAttribute(\"download\", \"solves.csv\");\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n    }\n\n    getSolvesFromDashboard = () => {\n        let sortedSolves = []\n        for (const solve of this.props.solves){\n            sortedSolves = [solve, ...sortedSolves]\n        }\n        this.setState({\n            solves: sortedSolves\n        })\n        this.formattedSolves()\n    }\n\n\n\n    formattedSolves = () => {\n        var session = []\n        var header = [] \n        header.push(\"session\")\n        header.push(\"session name\")\n        header.push(\"solve\")\n        header.push(\"time\")\n        header.push(\"scramble\")\n        header.push(\"date\")\n        session.push(header)\n        this.state.solves.map((solves, index) => {\n            var solveArray = []\n            solves.map((solve, i) => {\n                var solveArray = []\n                solveArray.push(index + 1)\n                solveArray.push(solve.sessionname)\n                solveArray.push(i + 1)\n                solveArray.push(solve.solve)\n                let scramble = \"\\\"\"\n                scramble+=solve.scramble + \"\\\"\"\n                // solveArray.push(solve.scramble)\n                solveArray.push(scramble)\n                if (solve.date){\n                    var date = solve.date\n                    var date2 = date.substring(5,7) + \"-\" + date.substring(8,10) + \"-\" + date.substring(0,4)\n                }\n                solveArray.push(date2)\n                session.push(solveArray)\n                return(null)\n            }) \n            session.push(solveArray)\n            return(null)\n        })\n        this.setState({\n            finalOutput: session\n        })\n    }\n    \n\n    componentDidMount() {\n        // this.props.getSolves()\n        setTimeout(()=>this.getSolvesFromDashboard(), 500)\n    }\n    \n    \n    \n    render() {\n        return(\n            <div className=\"center\">\n                <div>\n                {/* <h1><button onClick={()=>this.download(\"solves\", this.state.finalOutput)} style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\" >Export CSV</button></h1>  */}\n                {/* <h1><button onClick={()=>this.download(\"hello\", this.state.finalOutput )} style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\" >Export CSV</button></h1>  */}\n                <h1><button onClick={this.export2csv} style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\" >Export CSV</button></h1> \n                </div>\n                \n            </div>\n        )\n    }\n}\n\nexport default DownloadSolves","import React from \"react\"\n\nconst InspectionTime = props => {\n    return(\n        <div className=\"center\">\n            <h4>Inspection time:</h4>  \n                <div >\n                    {props.isBackgroundLight ? \n                    <input className=\"test11 pa2 ba b--green bg-white form-input\" style={{ color: props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} placeholder={props.inspectionTime}  onChange={props.inspectionTimeToState} type=\"number\" min=\"0\" max=\"100\"></input>\n                    :\n                    <input className=\"test11 pa2 ba b--green bg-black form-input\" style={{ width: \"100px\", color: props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} placeholder={props.inspectionTime}  onChange={props.inspectionTimeToState} type=\"number\" min=\"0\" max=\"100\"></input>\n                    }\n                    <h1 className=\"test11 test22\"><button onClick={()=>props.changeInspectionTime(props.inspectionTimeFromState)} className=\"button2\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Change inspection time</button></h1>\n                </div>\n                {props.isInspectionSubmitted ? \n                <h4 style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Inspection time has been updated</h4>\n                :\n                <h4> </h4>\n                }\n                {props.isInvalidInspection ? \n                <h4 style={{color: \"red\"}}>Number must be between 0 and 100</h4>\n                :\n                <h4> </h4>\n                }\n                <br></br>\n            </div>\n    )\n}\n\nexport default InspectionTime","import React from \"react\"\n\nconst ChangeAO1 = props => {\n    return(\n        <div className=\"center\">\n            <h4>ao #</h4>   \n            <div >\n                {props.isBackgroundLight ? \n                <input className=\"test11 pa2 ba b--green bg-white form-input\" style={{ color: props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} placeholder={props.aoNum}  onChange={props.aoNumInput} type=\"number\" min=\"4\" max=\"1000\"></input>\n                :\n                <input className=\"test11 pa2 ba b--green bg-black form-input\" style={{ width: \"100px\", color: props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} placeholder={props.aoNum}  onChange={props.aoNumInput} type=\"number\" min=\"4\" max=\"1000\"></input>\n                }\n                <h1 className=\"test11 test22\"><button onClick={()=>props.aoNumChange(props.aoNumState)} className=\"button2\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Change AO number 1</button></h1>\n            </div>\n\n            {props.isAoSubmitted ? \n            <h4 style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Number has been updated</h4>\n            :\n            <h4> </h4>\n            }\n            {props.isInvalidAoNum ? \n            <h4 style={{color: \"red\"}}>Number must be between 4 and 1000</h4>\n            :\n            <h4> </h4>\n            }\n        </div>\n    )\n}\n\nexport default ChangeAO1","import React from \"react\"\n\nconst ChangeAO2 = props => {\n    return(\n        <div className=\"center\">\n            <div >\n                {props.isBackgroundLight ? \n                <input className=\"test11 pa2 ba b--green bg-white form-input\" style={{ color: props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} placeholder={props.aoNum2}  onChange={props.aoNumInput2} type=\"number\" min=\"4\" max=\"1000\"></input>\n                :\n                <input className=\"test11 pa2 ba b--green bg-black form-input\" style={{ width: \"100px\", color: props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} placeholder={props.aoNum2}  onChange={props.aoNumInput2} type=\"number\" min=\"4\" max=\"1000\"></input>\n                }\n                <h1 className=\"test11 test22\"><button onClick={()=>props.aoNumChange2(props.aoNumState2)} className=\"button2\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Change AO number 2</button></h1>\n            </div>\n\n\n            {props.isAoSubmitted2 ? \n            <h4 style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Number has been updated</h4>\n            :\n            <h4> </h4>\n            }\n            {props.isInvalidAoNum2 ? \n            <h4 style={{color: \"red\"}}>Number must be between 4 and 1000</h4>\n            :\n            <h4> </h4>\n            }\n            <br></br>\n        </div>\n    )\n}\n\nexport default ChangeAO2","import React from \"react\"\n\nconst Toggles = props => {\n    return(\n        <ul className=\"summary-center\">      \n            <li>\n                <label htmlFor=\"mobile\" className=\"label1\"><h4>Touch start/stop (for large mobile devices)</h4></label>\n                <input type=\"checkbox\" id=\"mobile\" className=\"checkbox input1\" onClick={props.isMobile} />  \n                <label htmlFor=\"mobile\" className=\"switch\"></label>\n            </li>  \n            <br></br>\n            <li>\n                <label htmlFor=\"solveconfirm\" className=\"label1\"><h4>Confirm before deleting solve</h4></label>\n                <input type=\"checkbox\" id=\"solveconfirm\" className=\"checkbox input1\" onClick={props.isConfirmSolve} />  \n                <label htmlFor=\"solveconfirm\" className=\"switch\"></label>\n            </li>  \n            <br></br>\n            <li>\n                <label htmlFor=\"sessionconfirm\" className=\"label1\"><h4>Confirm before deleting session</h4></label>\n                <input type=\"checkbox\" id=\"sessionconfirm\" className=\"checkbox input1\" onClick={props.isConfirmSession} />  \n                <label htmlFor=\"sessionconfirm\" className=\"switch\"></label>\n            </li>\n            <br></br>\n            <li>\n                <label htmlFor=\"manualenter\" className=\"label1\"><h4>Manually enter times (when using StackMat)</h4></label>\n                <input type=\"checkbox\" id=\"manualenter\" className=\"checkbox input1\" onClick={props.isManualEnter} />  \n                <label htmlFor=\"manualenter\" className=\"switch\"></label>\n            </li>\n            <br></br>\n            <li>\n                <label htmlFor=\"disabletimer\" className=\"label1\"><h4>Deactivate timer during solve</h4></label>\n                <input type=\"checkbox\" id=\"disabletimer\" className=\"checkbox input1\" onClick={props.isDisableTimer} />  \n                <label htmlFor=\"disabletimer\" className=\"switch\"></label>\n            </li>\n            <br></br>\n            <li>\n                <label htmlFor=\"offline\" className=\"label1\"><h4>Offline mode</h4></label>\n                <input type=\"checkbox\" id=\"offline\" className=\"checkbox input1\" onClick={props.offlineConfirm} />  \n                <label htmlFor=\"offline\" className=\"switch\"></label>\n            </li>\n            <br></br>\n            <li>\n                {props.didOnlineSyncWork ? \n                <label className=\"label1\">\n                    <h4>Sync was successful</h4>\n                </label>\n                :\n                <h4> </h4>\n                }\n                {props.isSyncUnsuccessful ? \n                <label className=\"label1\">\n                    <h4 style={{color: \"red\"}}>Sync failed</h4>\n                </label>\n                :\n                <h4> </h4>\n                }\n                {props.didOfflineSyncWork ? \n                <label className=\"label1\">\n                    <h4>Offline mode activated</h4>\n                </label>\n                :\n                <h4> </h4>\n                }\n                {props.isUploading ? \n                <label className=\"label1\">\n                    <h4>Syncing...</h4>\n                </label>\n                :\n                <h4> </h4>\n                }\n                {props.isDownloading ? \n                <label className=\"label1\">\n                    <h4>Downloading...</h4>\n                </label>\n                :\n                <h4> </h4>\n                }\n            </li>\n            <br></br>\n        </ul>\n    )\n}\n\nexport default Toggles","import React from \"react\"\n\nconst ChangeUsername = props => {\n    return(\n        <div className=\"center\"> \n            <br></br>\n            <h2>Change username:</h2>\n            <br></br>\n            {props.isBackgroundLight ? \n            <input id=\"txt-input\" style={{width: \"200px\", color: props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} placeholder=\"Enter new username\" className=\"pa2 ba b--green bg-white form-input\" onChange={props.username} type=\"text\"></input>\n            :\n            <input id=\"txt-input\" style={{width: \"200px\", color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"white\"}} placeholder=\"Enter new username\" className=\"pa2 ba b--green bg-black form-input\"  onChange={props.username} type=\"text\"></input>\n            }\n            {\n                props.usernameExists ? \n                <h4 style={{color: \"red\"}}>Username unavailable</h4>\n                :\n                <h4> </h4>\n            }\n            {\n            props.isUsernameChanged ?\n            <h4>Username has been changed</h4> \n            :\n            <h4> </h4>\n            }\n            <h1><button onClick={props.changeUsername} className=\"button2\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Change</button></h1>\n        </div>\n    )\n}\n\nexport default ChangeUsername","import React from \"react\"\n\nconst ChangePassword = props => {\n    return(\n        <div className=\"center\">\n            <br></br>\n            <h2>Change password:</h2>\n            <br></br>\n            {props.isBackgroundLight ? \n            <input id=\"change2\" style={{width: \"200px\",color: props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} placeholder=\"Enter current password\" className=\"pa2 ba b--green bg-white form-input\" onChange={props.oldPassword} type=\"password\"></input>\n            :\n            <input id=\"change2\" style={{width: \"200px\", color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"white\"}} placeholder=\"Enter current password\" className=\"pa2 ba b--green bg-black form-input\"  onChange={props.oldPassword} type=\"password\"></input>\n            }\n            <br></br>\n            <br></br>\n            {props.isBackgroundLight ? \n            <input id=\"change\" style={{width: \"200px\", color: props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} placeholder=\"Enter new password\" className=\"pa2 ba b--green bg-white form-input\" onChange={props.newPassword} type=\"password\"></input>\n            :\n            <input id=\"change\" style={{width: \"200px\", color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"white\"}} placeholder=\"Enter new password\" className=\"pa2 ba b--green bg-black form-input\"  onChange={props.newPassword} type=\"password\"></input>\n            }\n            {props.isBackgroundLight ? \n            <input id=\"change3\" style={{width: \"200px\", color: props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} placeholder=\"Re-enter new password\" className=\"pa2 ba b--green bg-white form-input\" onChange={props.newPasswordReenter} type=\"password\"></input>\n            :\n            <input id=\"change3\" style={{width: \"200px\", color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"white\"}} placeholder=\"Re-enter new password\" className=\"pa2 ba b--green bg-black form-input\"  onChange={props.newPasswordReenter} type=\"password\"></input>\n            }\n            {props.isPasswordChanged ? \n            <h4>Password has been changed</h4> \n            :\n            <h4> </h4>\n            }\n            {\n            props.isWrongPassword ?\n            <h4 style={{color: \"red\"}}>Current password is incorrect</h4>\n            :\n            <h4> </h4>\n            }\n            {\n            props.isPasswordMatch ?\n            <h4> </h4>\n            :\n            <h4 style={{color: \"red\"}}>Passwords do not match</h4>\n            }\n            <h1><button type=\"button\" onClick={props.changePassword} className=\"button2\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Change</button></h1>\n            <br></br>\n        </div>\n    )\n}\n\nexport default ChangePassword","import React from \"react\"\n\nconst DeleteAccount = props => {\n    return(\n        <div className=\"center\">\n            <h2>Delete account:</h2>\n            <br></br>\n            {props.isBackgroundLight ? \n            <input style={{width: \"200px\", color: props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"white\"}} className=\"pa2 ba b--green bg-white form-input\" placeholder=\"Enter password\" onChange={props.deleteAccountPassword}type=\"password\"></input>\n            :\n            <input style={{width: \"200px\", color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"white\"}} className=\"pa2 ba b--green bg-black form-input\" placeholder=\"Enter password\" onChange={props.deleteAccountPassword} type=\"password\"></input>\n            }\n            {\n                props.isWrongPassword2 ?\n                <h4 style={{color: \"red\"}}>Incorrect password</h4>\n                :\n                <h4> </h4>\n            }\n            <h1><button onClick={props.deleteAccountConfirm} className=\"button2\" style={{color: props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Delete Account</button></h1>\n            <br></br>\n            <br></br>\n        </div>\n    )\n}\n\nexport default DeleteAccount","import React, { Component } from \"react\"\nimport \"./Settings.css\"\nimport ImportSolves from \"./ImportSolves\"\nimport ImportManual from \"./ImportManual\"\nimport DownloadSolves from \"./DownloadSolves\"\nimport DownloadCSV from \"./DownloadCSV\"\nimport InspectionTime from \"./InspectionTime\"\nimport ChangeAO1 from \"./ChangeAO1\"\nimport ChangeAO2 from \"./ChangeAO2\"\nimport Toggles from \"./Toggles\"\nimport ChangeUsername from \"./ChangeUsername\"\nimport ChangePassword from \"./ChangePassword\"\nimport DeleteAccount from \"./DeleteAccount\"\n\nclass Settings extends Component{\n\n    state = {\n        importSolvesTextArea: \"\",\n        importSolves: \"\",\n        importManualTextAreaTime: \"\",\n        importManualTextAreaScramble: null,\n        importManualTextAreaDate: null,\n        importManualTextAreaName: null,\n        puzzle: \"3x3\",\n        isManual: false,\n        isImportFromFile: false,\n        session: 1,\n        aoNum: \"\",\n        aoNum2: \"\",\n        isInvalidAoNum: false,\n        isAoSubmitted: false,\n        isInvalidAoNum2: false,\n        isAoSubmitted2: false,\n        inspectionTime: \"\",\n        isInspectionSubmitted: false,\n        isInvalidInspection: false,\n        didOnlineSyncWork: false,\n        isSyncUnsuccessful: false,\n        isDownloading: false,\n        isUploading: false,\n    }\n\n    aoNumInput = (e) => {\n        this.setState({\n            aoNum: e.target.value\n        })\n    }\n\n    aoNumInput2 = (e) => {\n        this.setState({\n            aoNum2: e.target.value\n        })\n    }\n\n    inspectionTimeToState = (e) => {\n        this.setState({\n            inspectionTime: e.target.value\n        })\n    }\n\n    changeInspectionTime = (input) => {\n        if (input < 101 && input > -1){\n            this.props.changeInspectionTime(input)\n            this.setState({\n                isInvalidInspection: false,\n                isInspectionSubmitted: true, \n            })\n        }else{\n            this.setState({\n                isInvalidInspection: true,\n                isInspectionSubmitted: false, \n            })\n        }\n    }\n\n    aoNumChange = (input) => {\n        if (input>3 && input<1001){\n            let offline = JSON.parse(localStorage.getItem(\"offline\"))\n            if(!offline){\n                fetch(\"https://blooming-hollows-98248.herokuapp.com/ao\", {\n                    method: \"put\",\n                    headers: {\"Content-Type\": \"application/json\"},\n                    body: JSON.stringify({\n                        id: this.props.id,\n                        aonumber: input\n                    })\n                }).then(response=>response.json())\n            }\n            localStorage.setItem(\"ao\", JSON.stringify(input))\n            this.props.aoNumChange(input)\n            this.setState({\n                isInvalidAoNum: false,\n                isAoSubmitted: true,\n            })\n        }else{\n            this.setState({\n                isInvalidAoNum: true,\n                isAoSubmitted: false,\n            })\n        }\n    }\n\n    aoNumChange2 = (input) => {\n        if (input>3 && input<1001){\n            console.log(input)\n            let offline = JSON.parse(localStorage.getItem(\"offline\"))\n            if(!offline){\n                fetch(\"https://blooming-hollows-98248.herokuapp.com/ao2\", {\n                    method: \"put\",\n                    headers: {\"Content-Type\": \"application/json\"},\n                    body: JSON.stringify({\n                        id: this.props.id,\n                        aonumber2: input\n                    })\n                }).then(response=>response.json())\n            }\n            localStorage.setItem(\"ao2\", JSON.stringify(input))\n            this.props.aoNumChange2(input)\n            this.setState({\n                isInvalidAoNum2: false,\n                isAoSubmitted2: true,\n            })\n        }else{\n            this.setState({\n                isInvalidAoNum2: true,\n                isAoSubmitted2: false,\n            })\n        }\n    }\n    \n    isCountDownActivated = () => {\n        this.props.inspection()\n        if (document.getElementById(\"countdown\").checked===true){\n            localStorage.setItem(\"countDown\", JSON.stringify(true))\n        }\n        if(document.getElementById(\"countdown\").checked===false){\n            localStorage.setItem(\"countDown\", JSON.stringify(false))\n        }\n    }\n\n    isConfirmSolve = () => {\n        this.props.confirmSolveDelete()\n        if(document.getElementById(\"solveconfirm\").checked===true){\n            localStorage.setItem(\"solveconfirm\", JSON.stringify(true))\n        }\n        if(document.getElementById(\"solveconfirm\").checked===false){\n            localStorage.setItem(\"solveconfirm\", JSON.stringify(false))\n        }\n    }\n\n    isMobile = () => {\n        this.props.mobileStartStop()\n        if(document.getElementById(\"mobile\").checked===true){\n            localStorage.setItem(\"mobile\", JSON.stringify(true))\n        }\n        if(document.getElementById(\"mobile\").checked===false){\n            localStorage.setItem(\"mobile\", JSON.stringify(false))\n        }\n    }\n\n    isManualEnter = () => {\n        // toggleIsManualEnter\n        this.props.manualEnter()\n        if(document.getElementById(\"manualenter\").checked===true){\n            localStorage.setItem(\"manualenter\", JSON.stringify(true))\n        }\n        if(document.getElementById(\"manualenter\").checked===false){\n            localStorage.setItem(\"manualenter\", JSON.stringify(false))\n        }\n    }\n\n    isConfirmSession = () => {\n        this.props.confirmSessionDelete()\n        if(document.getElementById(\"sessionconfirm\").checked===true){\n            localStorage.setItem(\"sessionconfirm\", JSON.stringify(true))\n        }\n        if(document.getElementById(\"sessionconfirm\").checked===false){\n            localStorage.setItem(\"sessionconfirm\", JSON.stringify(false))\n        }\n    }\n\n    isDisableTimer = () => {\n        this.props.disableTimer()\n        if(document.getElementById(\"disabletimer\").checked===true){\n            localStorage.setItem(\"disabletimer\", JSON.stringify(true))\n        }\n        if(document.getElementById(\"disabletimer\").checked===false){\n            localStorage.setItem(\"disabletimer\", JSON.stringify(false))\n        }\n    }\n\n    getOffline= () => {\n        if(localStorage.offline) {\n            let x = JSON.parse(localStorage.getItem(\"offline\"))\n            document.getElementById(\"offline\").checked=x\n        }\n    }\n\n    offlineConfirm = () => {\n        if(localStorage.offline) {\n            let x = JSON.parse(localStorage.getItem(\"offline\"))\n            if(x){\n                let solves = localStorage.getItem(\"offlinesolves\")\n                let offlineCount = localStorage.getItem(\"offlinecount\")\n                let offlineDifference = Number(JSON.parse(solves).solves.length)-Number(offlineCount)\n                let summary = \"\"\n                if(JSON.parse(solves).solves.length===0){\n                    summary+= \"DELETING ALL SOLVES\"\n                }else if(offlineDifference > -1){\n                    summary+= `adding ${offlineDifference} `\n                    if (offlineDifference===1){\n                        summary+=\"solve\"\n                    }else{\n                        summary+=\"solves\"\n                    }\n                }else{\n                    offlineDifference = offlineDifference * -1\n                    summary+= `deleting ${offlineDifference} `\n                    if (offlineDifference===1){\n                        summary+=\"solve\"\n                    }else{\n                        summary+=\"solves\"\n                    }\n                }\n                let confirmation = window.confirm(`You are now going online. To reconnect, be sure to have a wifi connection. Backing up (downloading solves) prior to going online is recommended. \\n \\n You will be ${summary}.`)\n                if (confirmation) {\n                    if(localStorage.offlinesolves){\n                        let online = navigator.onLine;\n                        if(online){\n                            this.setState({\n                                isUploading: true,\n                                didOfflineSyncWork: false,\n                            })\n                            fetch(\"https://blooming-hollows-98248.herokuapp.com/sendonline\",{\n                            method: \"put\",\n                            headers: {\"Content-Type\": \"application/json\"},\n                            body: JSON.stringify({\n                              id: this.props.id,\n                              solves: {\"allsolves\": JSON.parse(solves).solves},\n                              theme: JSON.parse(localStorage.getItem(\"theme\")),\n                              aonumber: JSON.parse(localStorage.getItem(\"ao\")),\n                              confirmsession: JSON.parse(localStorage.getItem(\"sessionconfirm\")),\n                              confirmsolve: JSON.parse(localStorage.getItem(\"solveconfirm\")),\n                              inspection: JSON.parse(localStorage.getItem(\"countDown\")),\n                              inspectiontime: JSON.parse(localStorage.getItem(\"inspectionTime\")),\n                              mobile: JSON.parse(localStorage.getItem(\"mobile\")),\n                              disabletimer: JSON.parse(localStorage.getItem(\"disabletimer\")),\n                              aonumber2: JSON.parse(localStorage.getItem(\"ao2\")),\n                              offline: JSON.parse(localStorage.getItem(\"offline\")),\n                            })\n                            }).then(response=>response.json())\n                            .then(response=> {\n                              if(response===\"unable to send online\"){\n                                document.getElementById(\"offline\").checked=x\n                                localStorage.setItem(\"offline\", JSON.stringify(x))\n                                alert(\"Unable to conncect to database. Try again.\")\n                                this.setState({\n                                    isSyncUnsuccessful: true,\n                                    didOnlineSyncWork: false,\n                                    didOfflineSyncWork: false,\n                                    isUploading: false,\n                                })\n                              }else{\n                                fetch(\"https://blooming-hollows-98248.herokuapp.com/offline\", {\n                                method: \"post\",\n                                headers: {\"Content-Type\": \"application/json\"},\n                                body: JSON.stringify({\n                                    id: this.props.id,\n                                    offline: !x,\n                                })\n                                }).then(response=>response.json())\n                                .then(data=> {\n                                    document.getElementById(\"offline\").checked=!x\n                                    localStorage.setItem(\"offline\", JSON.stringify(!x))\n                                    localStorage.removeItem(\"offlinesolves\")\n                                    localStorage.removeItem(\"offlinecount\")\n                                    this.setState({\n                                        didOnlineSyncWork: true,\n                                        didOfflineSyncWork: false,\n                                        isSyncUnsuccessful: false,\n                                        isUploading: false,\n                                    })\n                                })\n                              }\n                            })\n                        }else{\n                            alert(\"You are offline. Try again.\")\n                            document.getElementById(\"offline\").checked=x\n                            localStorage.setItem(\"offline\", JSON.stringify(x))\n                        }\n                    }\n                }else{\n                    document.getElementById(\"offline\").checked=x\n                    localStorage.setItem(\"offline\", JSON.stringify(x))\n                }\n            }else{\n                let confirmation = window.confirm(\"You are now entering offline mode. \\n-Wifi is required to activate. \\n-Only use if wifi will not be available; e.g. on an airplane. \\n -Backing up solves is highly recommended. \\n -You must remain signed in. \\n -Solve data will no longer be updated to the database. \\n -To reconnect, be sure to have a wifi connection before turning off offline mode.\")\n                if (confirmation) {\n                    let online = navigator.onLine;\n                    if(online){\n                        fetch(\"https://blooming-hollows-98248.herokuapp.com/offline\", {\n                        method: \"post\",\n                        headers: {\"Content-Type\": \"application/json\"},\n                        body: JSON.stringify({\n                            id: this.props.id,\n                            offline: !x,\n                        })\n                        }).then(response=>response.json())\n                        .then(data=> {\n                            this.setState({\n                                didOnlineSyncWork:false,\n                                isDownloading:true,\n                            })\n                            document.getElementById(\"offline\").checked=!x\n                            localStorage.setItem(\"offline\", JSON.stringify(!x))\n                            fetch(\"https://blooming-hollows-98248.herokuapp.com/receive\",{\n                                method: \"post\",\n                                headers: {\"Content-Type\": \"application/json\"},\n                                body: JSON.stringify({\n                                    id: this.props.id,\n                                })\n                            }).then(response=>response.json())\n                            .then(data=>{\n                                if(data){\n                                    if(data[0].solves){\n                                        let solvesOffline = JSON.parse(data[0].solves).allsolves\n                                        localStorage.setItem(\"offlinecount\", JSON.stringify(solvesOffline.length))\n                                        localStorage.setItem(\"offlinesolves\", JSON.stringify({\"solves\": solvesOffline}))\n                                    }\n                                }\n                                this.setState({\n                                    didOfflineSyncWork: true,\n                                    didOnlineSyncWork: false,\n                                    isSyncUnsuccessful: false,\n                                    isDownloading: false,\n                                })\n                            })\n                        })\n                    }else{\n                        alert(\"You must be online to activate offline mode.\")\n                        document.getElementById(\"offline\").checked=x\n                        localStorage.setItem(\"offline\", JSON.stringify(x))\n                    }\n                }else{\n                    document.getElementById(\"offline\").checked=x\n                    localStorage.setItem(\"offline\", JSON.stringify(x))\n                }\n            }\n        }\n    }\n\n    getManualEnterOnMount = () => {\n        if(localStorage.manualenter) {\n            let x = JSON.parse(localStorage.getItem(\"manualenter\"))\n            document.getElementById(\"manualenter\").checked=x\n        }\n    }\n\n    getMobileOnMount = () => {\n        if(localStorage.mobile) {\n            let x = JSON.parse(localStorage.getItem(\"mobile\"))\n            document.getElementById(\"mobile\").checked=x\n        }\n    }\n\n    getConfirmSessionOnMount = () => {\n        if(localStorage.solveconfirm) {\n            let x = JSON.parse(localStorage.getItem(\"sessionconfirm\"))\n            document.getElementById(\"sessionconfirm\").checked=x\n        }\n    }\n\n    getDisableTimerOnMount= () => {\n        if(localStorage.disabletimer) {\n            let x = JSON.parse(localStorage.getItem(\"disabletimer\"))\n            document.getElementById(\"disabletimer\").checked=x\n        }\n    }\n\n    getConfirmSolveOnMount = () => {\n        if(localStorage.solveconfirm) {\n            let x = JSON.parse(localStorage.getItem(\"solveconfirm\"))\n            document.getElementById(\"solveconfirm\").checked=x\n        }\n    }\n \n\n    handleImportSolvesChange = (event) => {\n        this.setState({\n            importSolvesTextArea: event.target.value\n        })\n    }\n\n    handleImportManualTimeChange = (event) => {\n        this.setState({\n            importManualTextAreaTime: event.target.value\n        })\n    }\n\n    handleImportManualScrambleChange = (event) => {\n        this.setState({\n            importManualTextAreaScramble: event.target.value\n        })\n    }\n\n    handleImportManualDateChange = (event) => {\n        this.setState({\n            importManualTextAreaDate: event.target.value\n        })\n    }\n\n    handleImportManualNameChange = (event) => {\n        this.setState({\n            importManualTextAreaName: event.target.value\n        })\n    }\n\n    handleImportSolvesSubmit = () => {\n        this.setState({\n            importSolves: this.state.importSolvesTextArea\n        })\n        document.getElementById(\"importSolves\").value=\" \"\n    }\n\n    handleImportManualSubmit = () => {\n        this.setState({\n            importSolves: this.state.importSolvesTextArea\n        })\n        document.getElementById(\"importManualTime\").value=\" \"\n        if (this.state.importManualTextAreaScramble) {\n            document.getElementById(\"importManualScramble\").value=\" \"\n        }\n    }\n\n    isManual = () => {\n        if(this.props.uniqueSessionsDB.length >0){\n            const session = this.props.uniqueSessionsDB.length + 1\n            this.setState({\n                session: session,\n            })\n        }\n        this.setState({\n            isManual: true,\n        })\n    }\n\n    isImportFromFile = () => { \n        this.setState({\n            isImportFromFile: true,\n        })\n    }\n\n    componentDidMount() {\n        this.getManualEnterOnMount()\n        this.getOffline()\n        this.getConfirmSolveOnMount()\n        this.getConfirmSessionOnMount()\n        this.getMobileOnMount()\n        this.getDisableTimerOnMount()\n    }\n\n    getPuzzleType = () => {\n        const x = document.getElementById(\"puzzle\")\n        const y = x.options[x.selectedIndex].value\n        this.setState({\n            puzzle: y,\n        })\n    }\n\n    deleteAccountConfirm = () => {\n        let confirmation = window.confirm(\"Are you sure you want to DELETE your account? This cannot be undone.\")\n        if (confirmation) {\n            this.props.deleteAccount()\n        }\n    }\n\n    changeUsername = () => {\n        localStorage.setItem(\"user\", JSON.stringify(this.props.user))\n\n    }\n\n    render() {\n        return(\n            <div style={{backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", color: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>\n                {this.props.isBackgroundLight \n                ? <h1 className=\"center\"><button style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\" onClick={this.props.themeToDB}>Dark</button></h1> \n                : <h1 className=\"center\"><button style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\" onClick={this.props.themeToDB}>Light</button></h1>\n                }\n\n                <h1 className=\"center\"><button onClick={this.props.signout} className=\"button2\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>Sign Out</button></h1>\n                <h1 className=\"center\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\"}}>Preferences</h1>\n\n                <InspectionTime \n                isBackgroundLight={this.props.isBackgroundLight}\n                inspectionTime={this.props.inspectionTime}\n                inspectionTimeToState={this.inspectionTimeToState}\n                changeInspectionTime={this.changeInspectionTime}\n                inspectionTimeFromState={this.state.inspectionTime}\n                isInspectionSubmitted={this.state.isInspectionSubmitted}\n                isInvalidInspection={this.state.isInvalidInspection}\n                />\n\n                <ChangeAO1 \n                isBackgroundLight={this.props.isBackgroundLight}\n                aoNum={this.props.aoNum}\n                aoNumInput={this.aoNumInput}\n                aoNumChange={this.aoNumChange}\n                aoNumState={this.state.aoNum}\n                isAoSubmitted={this.state.isAoSubmitted}\n                isInvalidAoNum={this.state.isInvalidAoNum}\n                />\n\n                <ChangeAO2 \n                isBackgroundLight={this.props.isBackgroundLight}\n                aoNum2={this.props.aoNum2}\n                aoNumInput2={this.aoNumInput2}\n                aoNumChange2={this.aoNumChange2}\n                aoNumState2={this.state.aoNum2}\n                isAoSubmitted2={this.state.isAoSubmitted2}\n                isInvalidAoNum2={this.state.isInvalidAoNum2}\n                />\n\n                <Toggles \n                isManualEnter={this.isManualEnter}\n                isDownloading={this.state.isDownloading}\n                isUploading={this.state.isUploading}\n                isMobile={this.isMobile}\n                isConfirmSolve={this.isConfirmSolve}\n                isConfirmSession={this.isConfirmSession}\n                isDisableTimer={this.isDisableTimer}\n                offlineConfirm={this.offlineConfirm}\n                didOnlineSyncWork={this.state.didOnlineSyncWork}\n                isSyncUnsuccessful={this.state.isSyncUnsuccessful}\n                didOfflineSyncWork={this.state.didOfflineSyncWork}\n                />\n                \n                <hr></hr>\n                <h1 className=\"center\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\"}}>Export Solves</h1>\n\n                <DownloadSolves \n                isBackgroundLight={this.props.isBackgroundLight} \n                solves={this.props.solves} getSolves={this.props.getSolves}\n                averageMS={this.props.averageMS}\n                getAveragesMS={this.props.getAveragesMS}\n                />\n                <DownloadCSV \n                isBackgroundLight={this.props.isBackgroundLight}  \n                solves={this.props.solves} \n                getSolves={this.props.getSolves}\n                />\n\n                <h1 className=\"center\" style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\"}}>Import Solves</h1>\n                \n                <ImportManual \n                loadPastSessionSolveData={this.props.loadPastSessionSolveData}\n                getPuzzleType={this.getPuzzleType}\n                handleImportManualNameChange={this.handleImportManualNameChange}\n                handleImportManualDateChange={this.handleImportManualDateChange}\n                handleImportManualScrambleChange={this.handleImportManualScrambleChange}\n                handleImportManualTimeChange={this.handleImportManualTimeChange}\n                addToUniqueSessionsDB={this.props.addToUniqueSessionsDB}\n                getInterfaceSession={this.props.getInterfaceSession}\n                getSessionNumber={this.props.getSessionNumber}\n                manageSolveData={this.props.manageSolveData}\n                getSolves={this.props.getSolves}\n                getSolvesFromImportManual={this.props.getSolvesFromImportManual} \n                getCategories={this.props.getCategories}  \n                puzzle={this.state.puzzle} \n                importManualTextAreaName={this.state.importManualTextAreaName} \n                isBackgroundLight={this.props.isBackgroundLight}  \n                session={this.state.session} \n                isManualFunc={this.isManual} \n                isManual={this.state.isManual} \n                date={this.state.importManualTextAreaDate} \n                scramble={this.state.importManualTextAreaScramble} \n                handleImportManualSubmit={this.handleImportManualSubmit} \n                id={this.props.id} \n                uniqueSessionsDB={this.props.uniqueSessionsDB} \n                time={this.state.importManualTextAreaTime}/>\n                     \n                <ImportSolves \n                loadPastSessionSolveData={this.props.loadPastSessionSolveData}\n                handleButtonClick={this.props.handleButtonClick}\n                handleImportSolvesChange={this.handleImportSolvesChange}\n                addToUniqueSessionsDB={this.props.addToUniqueSessionsDB}\n                getInterfaceSession={this.props.getInterfaceSession}\n                getSessionNumber={this.props.getSessionNumber}\n                manageSolveData={this.props.manageSolveData}\n                getSolvesFromImport={this.props.getSolvesFromImport}\n                getSolves={this.props.getSolves}\n                getSolvesFromImportManual={this.props.getSolvesFromImportManual}\n                getCategories={this.props.getCategories}  \n                isBackgroundLight={this.props.isBackgroundLight}  \n                isImportFromFile={this.state.isImportFromFile} \n                isImportFromFileFunc={this.isImportFromFile} \n                handleImportSolvesSubmit={this.handleImportSolvesSubmit} \n                id={this.props.id} \n                uniqueSessionsDB={this.props.uniqueSessionsDB} \n                importSolves={this.state.importSolvesTextArea}\n                />\n                \n                <hr></hr>\n                \n                <ChangeUsername \n                isBackgroundLight={this.props.isBackgroundLight}\n                username={this.props.username}\n                usernameExists={this.props.usernameExists}\n                isUsernameChanged={this.props.isUsernameChanged}\n                changeUsername={this.props.changeUsername}\n                />\n\n                <ChangePassword \n                isBackgroundLight={this.props.isBackgroundLight}\n                oldPassword={this.props.oldPassword}\n                newPassword={this.props.newPassword}\n                newPasswordReenter={this.props.newPasswordReenter}\n                isPasswordChanged={this.props.isPasswordChanged}\n                isWrongPassword={this.props.isWrongPassword}\n                isPasswordMatch={this.props.isPasswordMatch}\n                changePassword={this.props.changePassword}\n                />\n                \n                <DeleteAccount \n                isBackgroundLight={this.props.isBackgroundLight}\n                deleteAccountPassword={this.props.deleteAccountPassword}\n                isWrongPassword2={this.props.isWrongPassword2}\n                deleteAccountConfirm={this.deleteAccountConfirm}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Settings","import React, { Component } from \"react\"\nimport Chart from \"chart.js\";\nlet newChart;\n\nclass Donut extends Component {\n    chartRef = React.createRef();\n\n\n\n    componentDidMount() {\n        // console.log(this.props.puzzles)\n        // console.log(this.props.numberSolvesCategory)\n        this.buildChart()\n    }\n\n    componentDidUpdate() {\n        this.buildChart()\n    }\n\n\n    buildChart = () => {\n        // this.disableAnimation()\n        const myChartRef = this.chartRef.current.getContext(\"2d\");\n        if (typeof newChart !== \"undefined\") newChart.destroy();\n        newChart = new Chart(myChartRef, {\n            type: \"doughnut\",\n            data: \n            {\n                labels: this.props.puzzles[this.props.timePeriod],\n                // labels: [\"2020-06-12T21:35:34.466Z\", \"2020-06-15T21:35:34.466Z\", \"2020-07-10T07:00:00.000Z\"],\n                // labels: [\"Fri, 12 Jun 2020 18:47:15 +0000\", \"Fri, 19 Jun 2020 18:47:15 +0000\", \"2020-06-21T18:56:07.457Z\", \"2020-06-29T07:00:00.000Z\"],\n    \n                datasets: [{\n                    label: \"Puzzle Type\",\n                    // data: [(Math.random() > 0.5 ? 1.0 : 0) * Math.round(Math.random() * 100)],\n                    data: this.props.numberSolvesCategory[this.props.timePeriod],\n                    // data: [5.55, 8.41, 9.99],\n                    // backgroundColor: this.props.isBackgroundLight ? \"rgba(0,0,190,.1)\" : \"rgba(250,250,250,.8)\" ,\n                    backgroundColor: this.props.isBackgroundLight ? [\"#B09E99\", '#FEE9E1', \"#FAD4C0\", \"#64B6AC\", \"C0FDFB\", \"#966B9D\", \"#C98686\", \"#F2B880\", \"#FFF4EC\", \"#E7CFBC\", \"#B0D0D3\", \"#C08497\", \"#F7AF9D\", \"#F7E3AF\", \"#F3EEC3\", \"#FAD4C0\"] : [\"#F9C80E\", \"#F86624\", \"#EA3546\", \"#662E9B\", \"#43BCCD\", \"#1B998B\", \"#2D3047\", \"#FFFD82\", \"#FF9B71\", \"#E84855\", \"#50514F\", \"#F25F5C\", \"#FFE066\", \"#247BA0\", \"#70C1B3\", \"#43BCCD\"],\n                    // [\"#E7E6F7\", \"E3D0D8\", \"AEA3B0\", \"827081\", \"C6D2ED\"]\n                    // [\"#031A6B\", \"#033860\", \"#087CA7\", \"#004385\", \"#05B2DC\"]\n                    borderColor: \"light red\"\n    \n                }]\n              },\n            \n            options: {\n                animation: 0,\n                title: {\n                    display: true,\n                    text: \"Puzzle Type\",\n                    fontColor: this.props.isBackgroundLight ? \"rgba(10,10,10,.8)\" : \"rgba(250,250,250,1)\",\n                },\n                responsive: true,\n                legend:{\n                    display: false\n                }\n            }\n        });\n    }\n\n    render() {\n        return(\n            <div>\n                <canvas\n                    id=\"myChart\"\n                    ref={this.chartRef}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Donut","import { Grid } from 'gridjs-react';\nimport \"gridjs/dist/theme/mermaid.css\";\nimport React, { Component } from \"react\";\n\nclass Summary extends Component{\n  render(){\n      return(\n          <Grid\n          data={this.props.data}\n          columns={this.props.columns}\n          style={{\n            th: {\n                \"background-color\": this.props.isBackgroundLight ? \"d4d4d4\" : \"#1f1d1d\",\n                color: this.props.isBackgroundLight ? \"1f1d1d\" : \"white\"\n            },\n            td: {\n                \"background-color\": this.props.isBackgroundLight ? \"white\" :  \"#262525\",\n                color: this.props.isBackgroundLight ? \"3b3939\" : \"white\"\n            }\n          }}\n          />\n      )\n  }\n}\n\n\nexport default Summary","import React, { Component } from \"react\"\nimport \"./Dashboard.css\"\nimport CardList from \"./CardList\"\nimport GraphNumberSolves from \"./GraphNumberSolves\"\nimport Settings from \"../Settings/Settings\"\nimport Graph from \"./GraphAverages\"\nimport Donut from \"./GraphDonut\"\nimport Summary from \"./Summary\"\n\nclass Dashboard extends Component{\n\n    state = {\n        username: \"\",\n        newPassword: \"\",\n        oldPassword: \"\",\n        solves: [],\n        solvesSorted: [],\n        sessions: 0,\n        isAnalytics: true,\n        deleteAccountPassword: \"\",\n        isWrongPassword: false,\n        isWrongPassword2: false,\n        isUsernameChanged: false,\n        sessionsDBunique: [],\n        datesWeek: [],\n        datesMonth: [],\n        datesYear: [],\n        allDates: [],\n        datesDBunique: [],\n        averagesWeek: [],\n        averagesMonth: [],\n        averagesYear: [],\n        allDateAverages: [],\n        dateAverages: [],\n        isSolves: true,\n        usernameExists: false,\n        categories: [],\n        puzzles: [],\n        categoryDates: [],\n        indexNumberGraphs: \"\",\n        cardSortValue: \"\",\n        interfaceSession: {},\n        timePeriod: 0,\n        numberSolvesCategory: [], \n        optionSelected: \"\",\n        countNumberSolves: [],\n        countNumberSolvesWeek: [],\n        countNumberSolvesMonth: [],\n        countNumberSolvesYear: [],\n        allCounts: [],\n        averagesMS: [],\n        puzzlesSummary: [],\n        newPasswordReenter: \"\",\n        isPasswordMatch: true,\n        isPasswordChanged: false,\n        solvesSortedCardList: [],\n        puzzleWorst: [],\n        puzzleBest: [],\n    }\n\n    manageSolveData = () => {\n        const doAll = async () => {\n            await this.getSolves()\n            await this.sortSolves()\n            await this.sortDates()\n            await this.getCategories()\n            await this.sortCategories()\n            await this.getPuzzles()\n            await this.sortPuzzles()\n            await this.consolidateAllDatesAndSolves()\n            await this.getBestTimes()\n        };\n        doAll();\n    };\n\n    getSolves = () => {\n        if (this.props.id){\n            this.setState({\n                dateAverages: [],\n                solves: [],\n                solvesSorted: [],\n                solvesSortedCardList: [],\n                datesDBunique: [],\n                categories: [],\n                puzzles: [],\n                categoryDates: [],\n                countNumberSolves: [],\n                numberSolvesCategory: [],\n                datesWeek: [],\n                datesMonth: [],\n                datesYear: [],\n                allDates: [],\n                averagesWeek: [],\n                allDateAverages: [],\n                averagesMonth: [],\n                averagesYear: [],\n            })\n            const allSessions = []\n            const allDates = []\n            let datesWeek = []\n            let datesMonth = []\n            let datesYear = []\n            let solvesByUnix = [...this.props.solves].sort(this.compareUnix)\n            let threshold = Math.round(Date.now()/1000)\n            for (const solve of solvesByUnix) {\n                allSessions.push(solve.session)\n                if (solve.date){\n                    allDates.push(solve.date)\n                }\n                if (solve.unix > (threshold-604800)){\n                    datesWeek.push(solve.date)\n                }\n                if (solve.unix > (threshold-2592000)){\n                    datesMonth.push(solve.date)\n                }\n                if (solve.unix > (threshold-31536000)){\n                    datesYear.push(solve.date)\n                }\n            }\n            datesWeek = [...new Set(datesWeek)]\n            datesMonth = [...new Set(datesMonth)]\n            datesYear = [...new Set(datesYear)]\n            let uniqueSessions = [...new Set(allSessions)]\n            let uniqueDates = [...new Set(allDates)]\n            this.setState({\n                sessionsDBunique: uniqueSessions,\n                sessions: uniqueSessions.length, \n                datesDBunique: [uniqueDates, ...this.state.datesDBunique],\n                datesWeek: [datesWeek, ...this.state.datesWeek],\n                datesMonth: [datesMonth, ...this.state.datesMonth],\n                datesYear: [datesYear, ...this.state.datesYear],\n            })\n        }\n    }\n\n    sortSolves = () => {\n        //sorts solves by session\n        let sessionsDBuniqueInOrder = this.state.sessionsDBunique.sort(this.compare)\n        let bestTimes = []\n        let worstTimes = []\n        for (const session of sessionsDBuniqueInOrder) {\n            const solves = []\n            const ms = []\n            const times = []\n            let solvesInOrder = this.props.solves.sort(this.compareUnix)\n            for (const solve of solvesInOrder) {\n                if (solve.session === session){\n                    solves.push(solve)\n                    ms.push(Number(solve.milliseconds))\n                    times.push(solve.solve)\n                }\n            }\n            this.setState({\n                solvesSorted: [solves, ...this.state.solvesSorted],\n                solvesSortedCardList: [solves, ...this.state.solvesSorted]\n            })\n            let lowestMS = Math.min(...ms)\n            bestTimes.push(times[ms.indexOf(lowestMS)])\n            let highestMS = Math.max(...ms)\n            worstTimes.push(times[ms.indexOf(highestMS)])\n        }\n        bestTimes.reverse()\n        worstTimes.reverse()\n        this.setState({\n            puzzleBest: bestTimes,\n            puzzleWorst: worstTimes,\n        })\n    }\n\n    sortDates = () => {\n        //sorts all solves by date\n        //also gets number of solves based on date\n        const numberSolves = []\n        const numberSolvesWeek = []\n        const numberSolvesMonth = []\n        const numberSolvesYear = []\n        const threshold = Math.round(Date.now()/1000)\n        for (const date of this.state.datesDBunique[0]) {\n            const masterArray = []\n            let numberSolvesWeekCount = 0\n            let numberSolvesMonthCount = 0\n            let numberSolvesYearCount = 0\n            for (const solve of this.props.solves) {\n                if (solve.date === date){\n                    masterArray.push(solve.milliseconds)\n                    if (solve.unix > (threshold-604800)){\n                        numberSolvesWeekCount++\n                    }\n                    if (solve.unix > (threshold-2592000)){\n                        numberSolvesMonthCount++\n                    }\n                    if (solve.unix > (threshold-31536000)){\n                        numberSolvesYearCount++\n                    }\n                }\n            }\n            if (masterArray.length > 0){\n                numberSolves.push(masterArray.length)\n            }\n            if(numberSolvesWeekCount>0){\n                numberSolvesWeek.push(numberSolvesWeekCount)\n            }\n            if(numberSolvesMonthCount>0){\n                numberSolvesMonth.push(numberSolvesMonthCount)\n            }\n            if(numberSolvesYearCount>0){\n                numberSolvesYear.push(numberSolvesYearCount)\n            }\n        }\n        this.setState({\n            countNumberSolves: [...this.state.countNumberSolves, numberSolves],\n            countNumberSolvesWeek: [...this.state.countNumberSolvesWeek, numberSolvesWeek],\n            countNumberSolvesMonth: [...this.state.countNumberSolvesMonth, numberSolvesMonth],\n            countNumberSolvesYear: [...this.state.countNumberSolvesYear, numberSolvesYear],\n        })\n        this.dateAverage()\n    }\n\n    getCategories = () => {\n        //creates array of unique categories\n        //then puts them into state\n        let categories = []\n        for (const solves of this.props.solves) {\n            if (solves.sessionname){\n                categories=[...categories, solves.sessionname]\n            }\n        }\n        categories = new Set(categories)\n        categories = Array.from(categories)\n        this.setState({\n            categories: categories,\n        })\n    }\n\n    sortCategories = () => {\n        let threshold = Math.round(Date.now()/1000)\n        for (const category of this.state.categories) {\n            let categoryDates = []\n            let categorySolves = []\n            let solves = []\n            let numberSolves = []\n            let categoryDatesWeek = []\n            let categorySolvesWeek = []\n            let solvesWeek = []\n            let numberSolvesWeek = []\n            let categoryDatesMonth = []\n            let categorySolvesMonth = []\n            let solvesMonth = []\n            let numberSolvesMonth = []\n            let categoryDatesYear = []\n            let categorySolvesYear = []\n            let solvesYear = []\n            let numberSolvesYear = []\n            for (const date of this.state.datesDBunique[0]) {\n                let totalMS = 0\n                let count = 0\n                let totalMSWeek = 0\n                let countWeek = 0\n                let totalMSMonth = 0\n                let countMonth = 0\n                let totalMSYear = 0\n                let countYear = 0\n                for (const solve of this.props.solves) {\n                    if (solve.date===date && solve.sessionname===category){\n                        totalMS += Number(solve.milliseconds)\n                        count ++\n                        categoryDates.push(date)\n                        if (solve.unix > (threshold-604800)){\n                            totalMSWeek += Number(solve.milliseconds)\n                            countWeek ++\n                            categoryDatesWeek.push(date)\n                        }\n                        if (solve.unix > (threshold-2592000)){\n                            totalMSMonth += Number(solve.milliseconds)\n                            countMonth ++\n                            categoryDatesMonth.push(date)\n                        }\n                        if (solve.unix > (threshold-31536000)){\n                            totalMSYear += Number(solve.milliseconds)\n                            countYear ++\n                            categoryDatesYear.push(date)\n                        }\n                    }\n                }\n                if (count>0){\n                    numberSolves.push(count)\n                }\n                if (countWeek>0){\n                    numberSolvesWeek.push(countWeek)\n                }\n                if (countMonth>0){\n                    numberSolvesMonth.push(count)\n                }\n                if (countYear>0){\n                    numberSolvesYear.push(countYear)\n                }\n                let average = Number((totalMS/count/1000).toFixed(3))\n                if(average>0){\n                    categorySolves.push(average)\n                }\n                let averageWeek = Number((totalMSWeek/countWeek/1000).toFixed(3))\n                if(averageWeek>0){\n                    categorySolvesWeek.push(averageWeek)\n                }\n                let averageMonth = Number((totalMSMonth/countMonth/1000).toFixed(3))\n                if(averageMonth>0){\n                    categorySolvesMonth.push(averageMonth)\n                }\n                let averageYear = Number((totalMSYear/countYear/1000).toFixed(3))\n                if(averageYear>0){\n                    categorySolvesYear.push(averageYear)\n                }\n            }\n            categoryDates = [...new Set(categoryDates)]\n            if(solves.length>0){\n                categorySolves = [...categorySolves, solves]\n            }\n            categoryDatesWeek = [...new Set(categoryDatesWeek)]\n            if(solvesWeek.length>0){\n                categorySolvesWeek = [...categorySolvesWeek, solvesWeek]\n            }\n            categoryDatesMonth = [...new Set(categoryDatesMonth)]\n            if(solvesMonth.length>0){\n                categorySolvesMonth = [...categorySolvesMonth, solvesMonth]\n            }\n            categoryDatesYear = [...new Set(categoryDatesYear)]\n            if(solvesYear.length>0){\n                categorySolvesYear = [...categorySolvesYear, solvesYear]\n            }\n            \n            this.setState({\n                averagesYear: [...this.state.averagesYear, categorySolvesYear],\n                datesYear: [...this.state.datesYear, categoryDatesYear],\n                averagesMonth: [...this.state.averagesMonth, categorySolvesMonth],\n                datesMonth: [...this.state.datesMonth, categoryDatesMonth],\n                averagesWeek: [...this.state.averagesWeek, categorySolvesWeek],\n                datesWeek: [...this.state.datesWeek, categoryDatesWeek],\n                dateAverages: [...this.state.dateAverages, categorySolves],\n                datesDBunique: [...this.state.datesDBunique, categoryDates],\n                countNumberSolves: [...this.state.countNumberSolves, numberSolves],\n                countNumberSolvesWeek: [...this.state.countNumberSolvesWeek, numberSolvesWeek],\n                countNumberSolvesMonth: [...this.state.countNumberSolvesMonth, numberSolvesMonth],\n                countNumberSolvesYear: [...this.state.countNumberSolvesYear, numberSolvesYear],\n            })\n        }\n    }\n\n    \n\n    getPuzzles = () => {\n        let allPuzzles = []\n        let puzzles = []\n        let puzzlesWeek = []\n        let puzzlesMonth = []\n        let puzzlesYear = []\n        let threshold = Math.round(Date.now()/1000)\n        for (const solves of this.props.solves){\n            if (solves.date){\n                puzzles = [...puzzles, solves.puzzle]\n            }\n            if (solves.unix > (threshold-604800)){\n                puzzlesWeek = [...puzzlesWeek, solves.puzzle]\n            }\n            if (solves.unix > (threshold-2592000)){\n                puzzlesMonth = [...puzzlesMonth, solves.puzzle]\n            }\n            if (solves.unix > (threshold-31536000)){\n                puzzlesYear = [...puzzlesYear, solves.puzzle]\n            }\n        }\n        puzzles = [...new Set(puzzles)]\n        puzzlesWeek = [...new Set(puzzlesWeek)]\n        puzzlesMonth = [...new Set(puzzlesMonth)]\n        puzzlesYear = [...new Set(puzzlesYear)]\n        allPuzzles = [puzzles, puzzlesWeek, puzzlesMonth, puzzlesYear]\n        this.setState({\n            puzzles: allPuzzles,\n            puzzlesSummary: puzzles,\n        })\n        for (const puzzle of puzzles) {\n            this.setState({\n                categories: [...this.state.categories, puzzle],\n            })\n        }\n    }\n\n    sortPuzzles = () => {\n        let numberSolvesCategoryAllTime = []\n        let numberSolvesCategoryWeek = []\n        let numberSolvesCategoryMonth = []\n        let numberSolvesCategoryYear = []\n        let threshold = Math.round(Date.now()/1000)\n        for (const puzzle of this.state.puzzles[0]){\n            let puzzleSolves = []\n            let puzzleDates = []\n            let numberSolves = []\n            let puzzleSolvesWeek = []\n            let puzzleDatesWeek = []\n            let numberSolvesWeek = []\n            let puzzleSolvesMonth = []\n            let puzzleDatesMonth = []\n            let numberSolvesMonth = []\n            let puzzleSolvesYear = []\n            let puzzleDatesYear = []\n            let numberSolvesYear = []\n            let countNumberSolvesCategory = 0\n            let countNumberSolvesCategoryWeek = 0\n            let countNumberSolvesCategoryMonth = 0\n            let countNumberSolvesCategoryYear = 0\n            for (const date of this.state.datesDBunique[0]){\n                let totalMS = 0\n                let count = 0\n                let totalMSWeek = 0\n                let countWeek = 0\n                let totalMSMonth = 0\n                let countMonth = 0\n                let totalMSYear = 0\n                let countYear = 0\n                for (const solve of this.props.solves){\n                    if (solve.date===date && solve.puzzle===puzzle){\n                        totalMS += Number(solve.milliseconds)\n                        count ++\n                        puzzleDates.push(date)\n                        if (puzzle !== null){\n                            countNumberSolvesCategory++\n                        }\n                        if (solve.unix > (threshold-604800)){\n                            totalMSWeek += Number(solve.milliseconds)\n                            countWeek ++\n                            puzzleDatesWeek.push(date)\n                            if (puzzle !== null){\n                                countNumberSolvesCategoryWeek++\n                            }\n                        }\n                        if (solve.unix > (threshold-2592000)){\n                            totalMSMonth += Number(solve.milliseconds)\n                            countMonth ++\n                            puzzleDatesMonth.push(date)\n                            if (puzzle !== null){\n                                countNumberSolvesCategoryMonth++\n                            }\n                        }\n                        if (solve.unix > (threshold-31536000)){\n                            totalMSYear += Number(solve.milliseconds)\n                            countYear ++\n                            puzzleDatesYear.push(date)\n                            if (puzzle !== null){\n                                countNumberSolvesCategoryYear++\n                            }\n                        }\n                    }\n                }\n                let average = Number((totalMS/count/1000).toFixed(3))\n                if(average>0){\n                    puzzleSolves.push(average)\n                }\n                if(count>0){\n                    numberSolves.push(count)\n                }\n                let averageWeek = Number((totalMSWeek/countWeek/1000).toFixed(3))\n                if(averageWeek>0){\n                    puzzleSolvesWeek.push(averageWeek)\n                }\n                if(countWeek>0){\n                    numberSolvesWeek.push(countWeek)\n                }\n                let averageMonth = Number((totalMSMonth/countMonth/1000).toFixed(3))\n                if(averageMonth>0){\n                    puzzleSolvesMonth.push(averageMonth)\n                }\n                if(countMonth>0){\n                    numberSolvesMonth.push(countMonth)\n                }\n                let averageYear = Number((totalMSYear/countYear/1000).toFixed(3))\n                if(averageYear>0){\n                    puzzleSolvesYear.push(averageYear)\n                }\n                if(countYear>0){\n                    numberSolvesYear.push(countYear)\n                }\n            }\n            numberSolvesCategoryAllTime.push(countNumberSolvesCategory)\n            puzzleDates = [...new Set(puzzleDates)]\n            numberSolvesCategoryWeek.push(countNumberSolvesCategoryWeek)\n            puzzleDatesWeek = [...new Set(puzzleDatesWeek)]\n            numberSolvesCategoryMonth.push(countNumberSolvesCategoryMonth)\n            puzzleDatesMonth = [...new Set(puzzleDatesMonth)]\n            numberSolvesCategoryYear.push(countNumberSolvesCategoryYear)\n            puzzleDatesYear = [...new Set(puzzleDatesYear)]\n\n            this.setState({\n                datesYear: [...this.state.datesYear, puzzleDatesYear],\n                averagesYear: [...this.state.averagesYear, puzzleSolvesYear],\n                datesMonth: [...this.state.datesMonth, puzzleDatesMonth],\n                averagesMonth: [...this.state.averagesMonth, puzzleSolvesMonth],\n                datesWeek: [...this.state.datesWeek, puzzleDatesWeek],\n                averagesWeek: [...this.state.averagesWeek, puzzleSolvesWeek],\n                dateAverages: [...this.state.dateAverages, puzzleSolves],\n                datesDBunique: [...this.state.datesDBunique, puzzleDates],\n                countNumberSolves: [...this.state.countNumberSolves, numberSolves],\n                countNumberSolvesWeek: [...this.state.countNumberSolvesWeek, numberSolvesWeek],\n                countNumberSolvesMonth: [...this.state.countNumberSolvesMonth, numberSolvesMonth],\n                countNumberSolvesYear: [...this.state.countNumberSolvesYear, numberSolvesYear],\n                \n            })\n        }\n        this.setState({\n            numberSolvesCategory: [...this.state.numberSolvesCategory, numberSolvesCategoryAllTime, numberSolvesCategoryWeek, numberSolvesCategoryMonth,numberSolvesCategoryYear]\n        })\n    }\n\n    consolidateAllDatesAndSolves = () => {\n        this.setState({\n            allDateAverages: [this.state.dateAverages, this.state.averagesWeek, this.state.averagesMonth, this.state.averagesYear,],\n            allDates: [this.state.datesDBunique, this.state.datesWeek, this.state.datesMonth, this.state.datesYear,],\n            allCounts: [this.state.countNumberSolves, this.state.countNumberSolvesWeek, this.state.countNumberSolvesMonth, this.state.countNumberSolvesYear],\n        })\n    }\n\n    getBestTimes = () => {\n        let puzzleBestTimesSummary = []\n        for (const puzzle of this.state.puzzlesSummary){\n            let timesAndPuzzle = []\n            let allTimesMS = []\n            let allTimes = []\n            for (const solve of this.props.solves){\n                if (solve.puzzle===puzzle){\n                    if(solve.isplustwo){\n                        allTimesMS.push(solve.millisecondstwo)\n                        allTimes.push(solve.plustwo)\n                    }else{\n                        allTimesMS.push(solve.milliseconds)\n                        allTimes.push(solve.solve)\n                    }\n                }\n            }\n            let index = allTimesMS.indexOf(String(Math.min(...allTimesMS)))\n            timesAndPuzzle.push(puzzle)\n            timesAndPuzzle.push(allTimes[index])\n            timesAndPuzzle.push(allTimes.length)\n            puzzleBestTimesSummary.push(timesAndPuzzle)\n        }\n        this.setState({\n            puzzlesSummary: puzzleBestTimesSummary,\n        })\n    }\n\n    compare2 = (a,b) => {\n        return b-a\n    }\n\n    compare = (a,b) => {\n        return a - b\n    }\n\n    compareUnix = (a,b) => {\n        if (a.unix > b.unix){\n            return 1\n        }\n        if (a.unix < b.unix){\n            return -1\n        }\n        return 0\n    }\n\n    dateAverage = () => {\n        //gets average of solves by date \n        let threshold = Math.round(Date.now()/1000)\n        let finalAverages  = []\n        let finalAveragesWeek  = []\n        let finalAveragesMonth  = []\n        let finalAveragesYear  = []\n        let allMS = []\n        let allMSWeek = []\n        let allMSMonth = []\n        let allMSYear = []\n        for (const date of this.state.datesDBunique[0]) {\n            let solvesArray = []\n            let solvesArrayWeek = []\n            let solvesArrayMonth = []\n            let solvesArrayYear = []\n            for (const solve of this.props.solves) {\n                if (solve.date===date){\n                    solvesArray.push(solve.milliseconds)\n                    if (solve.unix > (threshold-604800)){\n                        solvesArrayWeek.push(solve.milliseconds)\n                    }\n                    if (solve.unix > (threshold-2592000)){\n                        solvesArrayMonth.push(solve.milliseconds)\n                    }\n                    if (solve.unix > (threshold-31536000)){\n                        solvesArrayYear.push(solve.milliseconds)\n                    }\n                }\n            }\n            if(solvesArray.length){\n                allMS.push(solvesArray)\n            }\n            if(solvesArrayWeek.length){\n                allMSWeek.push(solvesArrayWeek)\n            }\n            if(solvesArrayMonth.length){\n                allMSMonth.push(solvesArrayMonth)\n            }\n            if(solvesArrayYear.length){\n                allMSYear.push(solvesArrayYear)\n            }\n        }\n        for (const array1 of allMS) {\n            let totalMS = 0\n            let divisor = 0\n            for (const time of array1) {\n                totalMS += Number(time)\n                divisor ++\n            }\n            let avg = (totalMS/divisor)/1000\n            finalAverages.push(Number(avg.toFixed(3)))\n        }\n        for (const array1 of allMSWeek) {\n            let totalMS = 0\n            let divisor = 0\n            for (const time of array1) {\n                totalMS += Number(time)\n                divisor ++\n            }\n            let avg = (totalMS/divisor)/1000\n            finalAveragesWeek.push(Number(avg.toFixed(3)))\n        }\n        for (const array1 of allMSMonth) {\n            var totalMS = 0\n            var divisor = 0\n            for (const time of array1) {\n                totalMS += Number(time)\n                divisor ++\n            }\n            let avg = (totalMS/divisor)/1000\n            finalAveragesMonth.push(Number(avg.toFixed(3)))\n        }\n        for (const array1 of allMSYear) {\n            let totalMS = 0\n            let divisor = 0\n            for (const time of array1) {\n                totalMS += Number(time)\n                divisor ++\n            }\n            let avg = (totalMS/divisor)/1000\n            finalAveragesYear.push(Number(avg.toFixed(3)))\n        }\n\n        this.setState({\n            averagesYear: [finalAveragesYear, ...this.state.averagesYear],\n            averagesMonth: [finalAveragesMonth, ...this.state.averagesMonth],\n            averagesWeek: [finalAveragesWeek, ...this.state.averagesWeek],\n            dateAverages: [finalAverages, ...this.state.dateAverages]\n        })\n    }\n\n    username = (event) => {\n        this.setState({\n            username: event.target.value\n        })\n    }\n\n    newPassword = (event) => {\n        this.setState({\n            newPassword: event.target.value\n        })\n    }\n\n    newPasswordReenter = (event) => {\n        this.setState({\n            newPasswordReenter: event.target.value\n        })\n    }\n\n    oldPassword = (event) => {\n        this.setState({\n            oldPassword: event.target.value\n        })\n    }\n\n    removeSessionFromState = index => {\n        const { solvesSorted } = this.state;\n        this.setState({\n            solvesSorted: solvesSorted.filter((solve, i) => { \n                return i !== index;\n            }),\n        });\n    }\n\n    changeUsername = () => {\n        if (this.state.username.length>2){\n            fetch(\"https://blooming-hollows-98248.herokuapp.com/updateusername\", {\n                method: \"put\",\n                headers: {\"Content-Type\": \"application/json\"},\n                body: JSON.stringify({\n                    newUsername: this.state.username,\n                    id: this.props.id\n                })\n            })\n            .then(response=>response.json())\n            .then(data=>{\n                if (data === \"username exists\"){\n                    this.setState({\n                        usernameExists: true, \n                    })\n                }else{\n                    this.props.getNewUsername(this.state.username)\n                    this.props.loadUser(data)\n                    this.usernameChanged()\n                    document.getElementById('txt-input').value='';\n                    this.setState({\n                        usernameExists: false, \n                    })\n                }\n            })\n        }\n    }\n\n    usernameChanged = () => {\n        this.setState({\n            isUsernameChanged: true,\n        })\n    }\n\n    changePassword = () => {\n        if (this.state.newPassword===this.state.newPasswordReenter){\n            fetch(\"https://blooming-hollows-98248.herokuapp.com/updatepassword\",{\n                method: \"put\",\n                headers: {\"Content-Type\":\"application/json\"},\n                body: JSON.stringify({\n                    id: this.props.id,\n                    oldPassword: this.state.oldPassword,\n                    newPassword: this.state.newPassword,\n                }) \n            })\n            .then(response=>response.json())\n            .then(data=>{\n                if(data===\"incorrect password\") {\n                    this.setState({\n                        isWrongPassword: true,\n                    })\n                }else{\n                    this.props.loadUser(data)\n                    document.getElementById(\"change\").value=\"\"\n                    document.getElementById(\"change2\").value=\"\"\n                    document.getElementById(\"change3\").value=\"\"\n                    this.setState({\n                        isWrongPassword: false,\n                        isPasswordMatch: true,\n                        isPasswordChanged: true,\n                    })\n                }\n            })\n        }else{\n            this.setState({\n                isPasswordMatch: false,\n            })\n        }\n    }  \n\n    deleteAccount = () => {\n        fetch(\"https://blooming-hollows-98248.herokuapp.com/deleteaccount\", {\n            method: \"delete\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify({\n                password: this.state.deleteAccountPassword,\n                id: this.props.id,\n            })\n        }).then(response=> response.json())\n        .then(data=> {\n            if(data===\"incorrect password\"){\n                this.setState({\n                    isWrongPassword2: true,\n                })\n            }\n            else{\n                localStorage.setItem(\"theme\", JSON.stringify(true))\n                this.props.signIn()\n                this.props.signedIn()\n                sessionStorage.removeItem(\"solvesStored\")\n                localStorage.removeItem(\"scrambleLength\")\n                localStorage.removeItem(\"mobile\")\n                localStorage.removeItem(\"sessionconfirm\")\n                localStorage.removeItem(\"theme\")\n                localStorage.removeItem(\"user\")\n                localStorage.removeItem(\"lastsession\")\n                localStorage.removeItem(\"isCountDownActivated\")\n                localStorage.removeItem(\"ao\")\n                localStorage.removeItem(\"ao2\")\n                localStorage.removeItem(\"inspectionTime\") \n                localStorage.removeItem(\"solveconfirm\")\n                localStorage.removeItem(\"xyz\")\n                localStorage.removeItem(\"color\")\n                localStorage.removeItem(\"offline\")\n                localStorage.setItem(\"countDown\", JSON.stringify(false))\n                localStorage.setItem(\"scrambleLength\", 22)\n                this.props.signout()\n                this.setState({\n                    isWrongPassword2: false,\n                })\n                this.props.scramble(\"3x3\")\n            }\n        })\n    }\n\n    deleteAccountPassword = (event) => {\n        this.setState({\n            deleteAccountPassword: event.target.value\n        })\n    }\n\n    themeToDB = () => {\n        if (this.props.isBackgroundLight){\n            this.props.dark()\n        }else {\n            this.props.light()\n        }\n        localStorage.setItem(\"theme\", JSON.stringify(!this.props.isBackgroundLight))\n        let offline = JSON.parse(localStorage.getItem(\"offline\"))\n        if(!offline){\n            fetch(\"https://blooming-hollows-98248.herokuapp.com/theme\", {\n                method: \"put\",\n                headers: {\"Content-Type\": \"application/json\"},\n                body: JSON.stringify({\n                    id: this.props.id,\n                    theme: !this.props.isBackgroundLight\n                })\n            }).then(res=>res.json())\n        }\n    }\n\n    analytics = () => {\n        //route change\n        this.setState({\n            isAnalytics: true,\n            isSolves: false,\n        })\n    }\n\n    settings = () => {\n         //route change   \n        this.setState({\n            isAnalytics: false,\n        })\n    }\n\n    solvesRoute = () => {\n        setTimeout(()=>this.optionSelectOnMount(),5)\n        setTimeout(()=>this.options(),3)\n        this.setState({\n            cardSortValue: \"All sessions\",\n            isSolves: true,\n            isAnalytics: true,\n        })\n    }\n\n    componentDidMount(){\n        this.manageSolveData()\n        setTimeout(()=>this.options(),100)\n        setTimeout(()=>this.cardSortValue(),200)\n    }\n\n    changeIndexNumber = (input) =>{\n        const x = document.getElementById(input)\n        const y = x.options[x.selectedIndex].value\n        this.setState({\n            indexNumberGraphs: y\n        })\n    }\n\n    changeTimePeriod = (input) =>{\n        const x = document.getElementById(input)\n        const y = x.options[x.selectedIndex].value\n        this.setState({\n            timePeriod: y\n        })\n    }\n\n    options = () => {\n        if (document.getElementById(\"cardSelect\")){\n            let optionsArray = [\"All sessions\", ...this.state.categories]\n            const selectbox = document.getElementById(\"cardSelect\")\n            for (const option of optionsArray) {\n                let newOption = document.createElement(\"option\")\n                newOption.text=option\n                newOption.value=option\n                selectbox.add(newOption)\n            }\n        }\n    }\n\n    cardSortValue = () =>{\n        if (this.props.uniqueSessionsDB.length > 4 ){\n            const x = document.getElementById(\"cardSelect\")\n            const y = x.options[x.selectedIndex].value\n            let array1 = []\n            let sessions = []\n            let interfaceSession = {}\n            let countDown = this.state.solvesSorted.length \n            for (const solve of this.state.solvesSorted){\n                let array2 = []\n                for (const solve2 of solve){\n                    if (solve2.puzzle===y || solve2.sessionname===y) {\n                        interfaceSession[solve2.session] = countDown\n                        array2.push(solve2)\n                        sessions.push(solve2.session)\n                    }\n                }\n                countDown--\n                if(array2.length>0){\n                    array1.push(array2)\n                }\n            }\n            sessions = new Set(sessions)\n            sessions = Array.from(sessions)\n            if (array1.length===0){\n                array1=this.state.solvesSorted\n                sessions=this.props.uniqueSessionsDB\n            }\n            \n            this.setState({\n                solvesSortedCardList: array1,\n                cardSortValue: y,\n                interfaceSession: interfaceSession,\n                optionSelected: y,\n            })\n        }\n    }\n\n    optionSelectOnMount = () => {\n        if (this.state.optionSelected.length > 0){\n            let val = this.state.optionSelected;\n            let sel = document.getElementById('cardSelect');\n            let opts = sel.options;\n            let counter = opts.length -1\n            let opt = \"\"\n            let j = 0\n            while (counter > 0) {\n                counter--\n                j++\n                opt = opts[j]\n                if (opt.value === val) {\n                    sel.selectedIndex = j;\n                    break;\n                }\n            }\n        }\n    }\n\n    getAveragesMS = () => {\n        let averageArray = []\n        for (const solves of this.state.solvesSorted) {\n            let msTotal = 0\n            let count = 0\n            for (const solve of solves){\n                msTotal += Number(solve.milliseconds)\n                count++\n            }\n            averageArray.push(Math.round(msTotal/count))\n        }\n        this.setState({\n            averagesMS: averageArray,\n        })\n    }\n\n\n    test = () => {\n        // console.log(this.state.cardSortValue)\n    }\n\n    render() {\n        return(\n            <div>\n                {/* <button onClick={this.test}>push</button> */}\n                \n                    <nav style={{display: 'flex', justifyContent: 'flex-end'}}>\n                        <div style={{marginRight: \"6%\"}}>\n                        <h1><button onClick={this.props.signIn} style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\">Home</button></h1>\n                        </div>\n                    </nav>\n            \n                <h1 className=\"summary-center\" > <nav style={{display: 'flex'}}>\n                <button onClick={this.solvesRoute} style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\">Solves</button> \n                <button onClick={this.analytics} style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\">Analytics</button> \n                <button onClick={this.settings} style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\">Settings</button> \n                </nav></h1>\n                {this.state.isAnalytics \n                ?\n                (this.state.isSolves ?\n                <div  style={{backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", color: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}}>\n                    {this.props.uniqueSessionsDB.length > 4 ? \n                    <select style={{color: this.props.isBackgroundLight ?  \"black\" : \"white\"}} className={this.props.isBackgroundLight ? \"summary-center pa1 ba b--green bg-white\" : \"summary-center pa1 ba b--green bg-black\"} onChange={this.cardSortValue} id=\"cardSelect\"></select>\n                    :\n                    <h1> </h1>\n                    }\n                    <CardList \n                    removeFromSolvesInterface={this.props.removeFromSolvesInterface}\n                    solves={this.props.solves}\n                    send={this.props.send}\n                    puzzleBest={this.state.puzzleBest}\n                    puzzleWorst={this.state.puzzleWorst}\n                    interfaceSession={this.state.interfaceSession}\n                    getSessionNameOnLoad={this.props.getSessionNameOnLoad}\n                    isConfirmSessionDelete={this.props.isConfirmSessionDelete}\n                    isConfirmSolveDelete={this.props.isConfirmSolveDelete}\n                    removeFromSolves={this.props.removeFromSolves} \n                    getSessionNumber={this.props.getSessionNumber} \n                    sessions={this.props.sessions} \n                    getInterfaceSession={this.props.getInterfaceSession} \n                    removeFromUniqueSessionsDB={this.props.removeFromUniqueSessionsDB} \n                    uniqueSessionsDB={this.props.uniqueSessionsDB} \n                    loadPastSessionSolveData={this.props.loadPastSessionSolveData} \n                    removeSessionFromState={this.removeSessionFromState} \n                    getSolves={this.manageSolveData} \n                    id={this.props.id} \n                    solvesSorted={this.state.solvesSortedCardList} \n                    isBackgroundLight={this.props.isBackgroundLight}\n                    />                \n                </div>\n                :\n                <div>\n                    <Graph\n                    timePeriod={this.state.timePeriod}\n                    changeTimePeriod={this.changeTimePeriod}\n                    changeIndexNumber={this.changeIndexNumber}\n                    categories={this.state.categories} \n                    isBackgroundLight={this.props.isBackgroundLight} \n                    averages={this.state.allDateAverages} \n                    dates={this.state.allDates} \n                    />\n                    <GraphNumberSolves \n                    timePeriod={this.state.timePeriod}\n                    indexNumberGraphs={this.state.indexNumberGraphs}\n                    categories={this.state.categories} \n                    isBackgroundLight={this.props.isBackgroundLight} \n                    numberSolves={this.state.allCounts} \n                    dates={this.state.allDates}\n                    />\n                    <Summary \n                    isBackgroundLight={this.props.isBackgroundLight}\n                    data={this.state.puzzlesSummary}\n                    columns={['Puzzle', 'Best Time', 'Total Number of Solves']}\n                    />\n                    <Donut \n                    timePeriod={this.state.timePeriod}\n                    isBackgroundLight={this.props.isBackgroundLight}\n                    numberSolvesCategory={this.state.numberSolvesCategory}\n                    puzzles={this.state.puzzles}\n                    />\n                </div>                    \n                )\n                :\n                <Settings \n                manualEnter={this.props.manualEnter}\n                loadPastSessionSolveData={this.props.loadPastSessionSolveData}\n                solvesApp={this.props.solves}\n                offlineState={this.props.offlineState}\n                changeInspectionTime={this.props.changeInspectionTime}\n                aoNum2={this.props.aoNum2} \n                aoNumChange2={this.props.aoNumChange2}\n                disableTimer={this.props.disableTimer}\n                mobileStartStop={this.props.mobileStartStop}\n                isPasswordChanged={this.state.isPasswordChanged}\n                newPasswordReenter={this.newPasswordReenter}\n                isPasswordMatch={this.state.isPasswordMatch}\n                aoNumChange={this.props.aoNumChange}\n                averagesMS={this.state.averagesMS}\n                getAveragesMS={this.getAveragesMS}\n                addToUniqueSessionsDB={this.props.addToUniqueSessionsDB}\n                getInterfaceSession={this.props.getInterfaceSession}\n                getSessionNumber={this.props.getSessionNumber}\n                manageSolveData={this.manageSolveData}\n                inspection={this.props.inspection}\n                confirmSessionDelete={this.props.confirmSessionDelete}\n                confirmSolveDelete={this.props.confirmSolveDelete}\n                getSolvesFromImport={this.props.getSolvesFromImport}\n                getSolvesFromImportManual={this.props.getSolvesFromImportManual} \n                getCategories={this.getCategories} \n                solves={this.state.solvesSorted} \n                getSolves={this.getSolves} \n                scrambleQuantityMinus={this.props.scrambleQuantityMinus}  \n                scrambleQuantityPlus={this.props.scrambleQuantityPlus} \n                id={this.props.id} \n                uniqueSessionsDB={this.props.uniqueSessionsDB} \n                inspectionTimePlus={this.props.inspectionTimePlus} \n                inspectionTimeMinus={this.props.inspectionTimeMinus} \n                inspectionTime={this.props.inspectionTime}  \n                isCountDownActivated={this.props.isCountDownActivated} \n                aoNum={this.props.aoNum} \n                isBackgroundLight={this.props.isBackgroundLight} \n                signout={this.props.signout} \n                scrambleQuantity={this.props.scrambleQuantity} \n                usernameExists={this.state.usernameExists} \n                isUsernameChanged={this.state.isUsernameChanged} \n                changeUsername={this.changeUsername} \n                newPassword={this.newPassword} \n                oldPassword={this.oldPassword} \n                isWrongPassword={this.state.isWrongPassword} \n                changePassword={this.changePassword} \n                deleteAccountPassword={this.deleteAccountPassword} \n                isWrongPassword2={this.state.isWrongPassword2} \n                deleteAccount={this.deleteAccount} \n                themeToDB={this.themeToDB} \n                username={this.username} \n                />\n                }\n            </div>\n        )\n    }\n}\n\nexport default Dashboard","import React, { Component } from \"react\"\n\nclass NewSessionOptions extends Component{\n    state = {\n        sessionName: null,\n    }\n\n    newSession = () => {\n        this.props.clearScramble()\n        const x = document.getElementById(\"puzzle\")\n        const y = x.options[x.selectedIndex].value\n        const newSession = Math.max(...this.props.uniqueSessionsDB)\n        const sessionLength = this.props.uniqueSessionsDB.length\n        if (y.length>0){\n            this.props.createNewSession(y)\n        } \n        this.props.clearSessionInterfaceSolves()\n        this.props.sessionNameOnChange(this.state.sessionName)\n        this.props.isSessionName(this.state.sessionName)\n        if(this.props.solves.length===0){\n            this.props.getInterfaceSession(sessionLength)\n        }else{\n            if (this.props.isNewSession){\n                this.props.getInterfaceSession(sessionLength)\n            }else{\n                this.props.getSessionNumber(newSession+1)\n                this.props.addToUniqueSessionsDB(newSession+1)\n                this.props.getInterfaceSession(sessionLength + 1)\n            }\n        }\n        this.props.scramble(y)\n        this.props.isNewSessionFunction(true)\n    }\n    \n    sessionOnChange = (event) =>{\n        this.setState({\n            sessionName: event.target.value\n        })\n    }\n\n    render() {\n        return(\n            <div className=\"absolute-center tc\">\n                <h2 style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\"}} >Puzzle:</h2>\n                {this.props.isBackgroundLight ? \n                <select style={{color: \"rgb(23, 23, 23)\"}} className=\"pa1 ba b--green bg-white\" id=\"puzzle\" >\n                    <option value=\"3x3\">3x3</option>\n                    <option value=\"2x2\">2x2</option>\n                    <option value=\"4x4\">4x4</option>\n                    <option value=\"5x5\">5x5</option>\n                    <option value=\"6x6\">6x6</option>\n                    <option value=\"7x7\">7x7</option>\n                    <option value=\"Pyraminx\">Pyraminx</option>\n                    <option value=\"Megaminx\">Megaminx</option>\n                    <option value=\"Skewb\">Skewb</option>\n                    <option value=\"Square-1\">Square-1</option>\n                    <option value=\"Clock\">Clock</option>\n                    <option value=\"3x3 BLD\">3x3 BLD</option>\n                    <option value=\"3x3 OH\">3x3 OH</option>\n                    <option value=\"4x4 BLD\">4x4 BLD</option>\n                    <option value=\"5x5 BLD\">5x5 BLD</option>\n                    <option value=\"Multi-BLD\">Multi-BLD</option>\n                </select>\n                :\n                <select style={{color: \"white\"}} className=\"pa1 ba b--green bg-black\" id=\"puzzle\" >\n                    <option value=\"3x3\">3x3</option>\n                    <option value=\"2x2\">2x2</option>\n                    <option value=\"4x4\">4x4</option>\n                    <option value=\"5x5\">5x5</option>\n                    <option value=\"6x6\">6x6</option>\n                    <option value=\"7x7\">7x7</option>\n                    <option value=\"Pyraminx\">Pyraminx</option>\n                    <option value=\"Megaminx\">Megaminx</option>\n                    <option value=\"Skewb\">Skewb</option>\n                    <option value=\"Square-1\">Square-1</option>\n                    <option value=\"Clock\">Clock</option>\n                    <option value=\"3x3 BLD\">3x3 BLD</option>\n                    <option value=\"3x3 OH\">3x3 OH</option>\n                    <option value=\"4x4 BLD\">4x4 BLD</option>\n                    <option value=\"5x5 BLD\">5x5 BLD</option>\n                    <option value=\"Multi-BLD\">Multi-BLD</option>\n                </select>\n                }\n                <h2 style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\"}} >Session name (optional):</h2>\n                {this.props.isBackgroundLight ? \n                <input style={{color: this.props.isBackgroundLight ? \"rgb(25, 25, 25)\" : \"whitesmoke\"}} className=\"pa1 ba b--green bg-white\" onChange={this.sessionOnChange} type=\"text\"></input>\n                :\n                <input style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"pa1 ba b--green bg-black\" onChange={this.sessionOnChange} type=\"text\"></input>\n                }\n                <h1><button onClick={this.newSession} style={{color: this.props.isBackgroundLight ? \"rgb(23, 23, 23)\" : \"whitesmoke\", backgroundColor: this.props.isBackgroundLight ? \"whitesmoke\" : \"rgb(23, 23, 23)\", borderColor: this.props.isBackgroundLight ?  \"rgb(23, 23, 23)\" : \"whitesmoke\"}} className=\"button2\">Create session</button> </h1>\n            </div>\n        )\n    }\n}\n\nexport default NewSessionOptions","import React, { Component } from \"react\"\nimport \"./NewSignIn.css\"\n\nclass Register extends Component {\n\n    state = {\n        name: \"\",\n        password: \"\",\n        isUserExist: false,\n        key: \"\",\n        id:\"\",\n        isNameLengthWrong: false,\n        isPassWordLengthWrong: false,\n    }\n\n    name = (event) => {\n        this.setState({\n            name: event.target.value\n        })\n    }\n\n    password = (event) => {\n        this.setState({\n            password: event.target.value\n        })\n    }\n\n    componentDidMount(){\n        this.key()\n    }\n \n    key = () => {\n        let key = \"\"\n        const letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNNOPQRSTUVWXYZ\"\n        const numbers = \"123456789\"\n        const characters = \"!@#$%^&*()_+=-{}|;\"\n        let length = 10 + Math.ceil(Math.random()*8)\n        for (let i =length; i--; i>0){\n            let typeCharacter = Math.round(Math.random()*2)\n            if (typeCharacter===0){\n                key += letters[Math.round(Math.random()*51)]\n            }else if (typeCharacter===1){\n                key += numbers[Math.round(Math.random()*8)]\n            }else{\n                key += characters[Math.round(Math.random()*17)]\n            }\n        }\n        this.setState({\n            id: key,\n        })\n    }\n\n    submit = () => {\n        let key = \"\"\n        const letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNNOPQRSTUVWXYZ\"\n        const numbers = \"123456789\"\n        const characters = \"!@#$%^&*()_+=-{}|;\"\n        let length = 10 + Math.ceil(Math.random()*8)\n        for (let i =length; i--; i>0){\n            let typeCharacter = Math.round(Math.random()*2)\n            if (typeCharacter===0){\n                key += letters[Math.round(Math.random()*51)]\n            }else if (typeCharacter===1){\n                key += numbers[Math.round(Math.random()*8)]\n            }else{\n                key += characters[Math.round(Math.random()*17)]\n            }\n        }\n        if (this.state.name.length>2 && this.state.name.length<30){\n            this.setState({\n                isNameLengthWrong: false,\n            })\n            if(this.state.password.length>5){\n                this.setState({\n                    isPassWordLengthWrong: false,\n                })\n                fetch(\"https://blooming-hollows-98248.herokuapp.com/register\", {\n                    method: \"post\",\n                    headers: {\"Content-Type\": \"application/json\"},\n                    body: JSON.stringify({\n                        username: this.state.name,\n                        password: this.state.password,\n                        id: key,\n                    })\n                })\n                .then(response => response.json())\n                .then (data => {\n                    if (data === \"user exists\"){\n                        this.setState({\n                            isUserExist: true,\n                        })\n                    } else{\n                        this.props.clearSolvesState()\n                        this.props.signIn()\n                        this.props.signedIn()\n                        this.props.loadUser(data)\n                        fetch(\"https://blooming-hollows-98248.herokuapp.com/register2\", {\n                            method: \"post\",\n                            headers: {\"Content-Type\": \"application/json\"},\n                            body: JSON.stringify({\n                                id: key,\n                            })\n                        })\n                        .then(response => response.json())\n                    }\n                })\n            }else{\n                this.setState({\n                    isPassWordLengthWrong: true\n                })\n            }\n        }else{\n            this.setState({\n                isNameLengthWrong: true,\n            })\n        }\n    }\n\n    render() {\n        return(\n            <div className=\"cardpadding absolute-center tc bg-white dib br3 pa3 ma2 bw2 shadow-5\">\n                <h1 id=\"cardpadding\"> </h1>\n                <h1>Register</h1>\n                <br></br>\n                <input onChange={this.name} type=\"text\" placeholder=\"enter username\" className=\"pa2 ba b--black bg-white\"></input>\n                <br></br>\n                <br></br>\n                <input onChange={this.password} type=\"password\" placeholder=\"enter password\" className=\"pa2 ba b--black bg-white\"></input>\n                <br></br>\n                {this.state.isUserExist ? \n                <h4 style={{color: \"red\"}}>Username already in use</h4>\n                :\n                <h4> </h4>\n                }\n                {this.state.isNameLengthWrong ? \n                <h4 style={{color: \"red\"}}>Username must be between 3 and 20 characters</h4>\n                :\n                <h4> </h4>\n                }\n                {this.state.isPassWordLengthWrong ? \n                <h4 style={{color: \"red\"}}>Password must be longer than five characters</h4>\n                :\n                <h4> </h4>\n                }\n                <h1><button onClick={this.submit} className=\"button2\" style={{color:  \"rgb(23, 23, 23)\", backgroundColor:  \"white\", borderColor: \"rgb(23, 23, 23)\"}}>Register</button></h1>\n                <h4><button onClick={this.props.register}  className=\"button2\"  style={{color:  \"rgb(23, 23, 23)\", backgroundColor:  \"white\", borderColor: \"rgb(23, 23, 23)\"}}>sign in</button></h4>\n                <h1 id=\"paddingbottom\"> </h1>\n            </div>\n        )\n    }\n}\n\nexport default Register","import React, { Component } from \"react\"\nimport \"./NewSignIn.css\"\n\nclass SignIn extends Component {\n\n    state = {\n        username: \"\",\n        password: \"\",\n        isWrongUsername: false,\n        confirm: false,\n        isSigningIn: false,\n    }\n\n    username = (event) => {\n        this.setState ({\n            username: event.target.value\n        })\n    }\n\n    password = (event) => {\n        this.setState ({\n            password: event.target.value\n        })\n    }\n\n    isSigningIn = () => {\n        this.setState({\n            isSigningIn: true,\n        })\n    }\n\n    submit = () => {\n        this.timeout = setTimeout(()=> this.isSigningIn(), 1000)\n        fetch(\"https://blooming-hollows-98248.herokuapp.com/signin\", {\n            method: \"post\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify({\n                username: this.state.username,\n                password: this.state.password\n            })\n        })\n        .then(response => response.json())\n        .then(data => {\n            if (data===\"unable to get user\"){\n                this.setState({\n                    isWrongUsername: true,\n                    isSigningIn: false,\n                })\n                clearTimeout(this.timeout)\n            } else{\n                this.props.clearScramble()\n                this.props.loadUser(data)\n                this.props.signIn()\n                this.props.signedIn()\n                if(this.state.confirm){\n                    localStorage.setItem(\"user\", JSON.stringify(this.props.user))\n                    localStorage.setItem(\"key\", JSON.stringify(data.key))\n                }\n            }\n        })\n    }\n\n    confirm = () => {\n        this.setState({\n            confirm: !this.state.confirm,\n        })\n    }\n\n    render() {\n        return(\n            <div className=\"cardpadding absolute-center tc bg-white dib br3 pa3 ma2 bw2 shadow-5\">\n                <h1 id=\"cardpadding\"> </h1>\n                <h1>Log In</h1>\n                <input onChange={this.username}  type=\"text\" placeholder=\"enter username\" className=\"pa2 ba b--gray bg-white\"></input>\n                <br></br>\n                <br></br>\n                <input onChange={this.password} type=\"password\" placeholder=\"enter password\" className=\"pa2 ba b--gray bg-white\"></input>\n                <br></br>\n                {\n                this.state.isWrongUsername \n                ? \n                <h4 style={{color: \"red\"}}>Incorrect username or password</h4>\n                :\n                <h4> </h4>\n                }\n                <br></br>\n                <label>\n                    <input onClick={this.confirm} type=\"checkbox\"></input>\n                    <span> Stay signed in</span>\n                </label>\n                <br></br>\n                {this.state.isSigningIn ? \n                <div>\n                    <br></br>\n                    <h4>Signing in...</h4>\n                    <br></br>\n                    <br></br>\n                </div>\n                :\n                // <h1> </h1>\n                <h1><button onClick={this.submit} className=\"button2\" style={{color:  \"rgb(23, 23, 23)\", backgroundColor:  \"white\", borderColor: \"rgb(23, 23, 23)\"}}>sign in</button></h1>\n                }\n                <h4><button onClick={this.props.register} className=\"button2\"  style={{color:  \"rgb(23, 23, 23)\", backgroundColor:  \"white\", borderColor: \"rgb(23, 23, 23)\"}}>Register</button></h4>\n                <h1 id=\"paddingbottom\"> </h1>\n            </div>\n        )\n    }\n}\n\nexport default SignIn","import React, {Component} from 'react';\nimport TimerInterface from \"../src/TimerInterface/TimerInterface\"\nimport Dashboard from \"../src/Dashboard/Dashboard\"\nimport NewSessionOptions from \"./NewSessionOptions\"\nimport \"./App.css\"\nimport Register from './NewRegister';\nimport SignIn from './NewSignIn';\nimport confetti from 'canvas-confetti';\n\nclass App extends Component {\n  state = {\n    isHome: true,\n    isRegistered: false,\n    isSignedIn: false,\n    isDashboard: false,\n    isBackgroundLight: true,\n    backgroundColor: \"\",\n    user: {\n      username: \"\",\n      id: \"\",\n    },\n    scrambleQuantity: 22,\n    sessions: \"\",\n    uniqueSessionsDB: [],\n    sessionInterface: \"\",\n    aoNum: 5,\n    aoNum2: 12,\n    isCountDownActivated: false,\n    inspectionTime: 0,\n    puzzleType: \"3x3\",\n    isCreateNewSession: false,\n    sessionName: null,\n    isSessionName: false,\n    isConfirmSolveDelete: false,\n    isConfirmSessionDelete: false,\n    solves: [],\n    isNewSession: false,\n    solvesInterface: [],\n    isMobile: false,\n    isTimerDisabled: false,\n    isOffline: false, \n    isGetSolvesOnMount: false,\n    multiBLDScramble: \"\",\n    scramble: \"\",\n    megaminxScramble: \"\",\n    isDisplayScrambleMedium: false,\n    isDisplayScrambleSmall: false,\n    isManualEnter: false,\n  }\n\n  receive = () => {\n    //testing storing all solves in one cell\n    let offline = false\n    if (localStorage.offline){\n      offline = JSON.parse(localStorage.getItem(\"offline\"))\n    }\n    if(this.state.user.id.length>0){\n      if(!this.isGetSolvesOnMount){\n        if(!offline){\n          this.setState({\n            solves: \"loading...\"\n          })\n          fetch(\"https://blooming-hollows-98248.herokuapp.com/receive\",{\n            method: \"post\",\n            headers: {\"Content-Type\": \"application/json\"},\n            body: JSON.stringify({\n              id: this.state.user.id,\n            })\n          }).then(response=>response.json())\n          .then(data=>{\n            let parsedData = []\n            if(data.length>0){\n              if(data[0].solves){\n                parsedData = JSON.parse(data[0].solves).allsolves\n              }\n            }\n            this.getSolvesOnMountPrevent()\n            this.setState({\n              solves: parsedData\n            })\n            let sessions = []\n            if(parsedData.length>0){\n              sessions = parsedData.map(solves => solves.session)\n            }\n            if (sessions.length === 0) {\n              this.addToUniqueSessionsDBOnMount(1)\n              this.getSessionNumber(1)\n              this.getInterfaceSession(1)\n              this.props.scramble(\"3x3\")\n              } else if (parsedData.length===0){\n                this.getInterfaceSession(1)\n                this.props.scramble(\"3x3\")\n                }else{\n                  this.addToUniqueSessionsDBOnMount(Array.from(new Set(sessions)).reverse())\n                  this.getSessionNumber(Math.max.apply(Math,sessions))\n                  this.getInterfaceSession(Array.from(new Set(sessions)).length)\n                  this.getInterfaceSolves([])\n                    let allSolves = []\n                    for (const solve of parsedData){\n                      if (Math.max.apply(Math,sessions) === solve.session){\n                        allSolves = [solve, ...allSolves]\n                        this.getSessionNameOnLoad(solve.sessionname, solve.puzzle)\n                        this.isSessionName(solve.sessionname)\n                        this.props.scramble(solve.puzzle)\n                      }\n                    }\n              this.getInterfaceSolves(allSolves)\n            }\n          })\n        }else{\n          let solves = localStorage.getItem(\"offlinesolves\")\n          solves = JSON.parse(solves).solves\n          this.setState({\n            solves: solves\n          })\n          let sessions = solves.map(solves => solves.session)\n          if (sessions.length === 0) {\n            this.addToUniqueSessionsDBOnMount(1)\n            this.getSessionNumber(1)\n            this.getInterfaceSession(1)\n            this.props.scramble(\"3x3\")\n          } else if (solves.length===0){\n            this.getInterfaceSession(1)\n            this.props.scramble(\"3x3\")\n          }else{\n            this.addToUniqueSessionsDBOnMount(Array.from(new Set(sessions)).reverse())\n            this.getSessionNumber(Math.max.apply(Math,sessions))\n            this.getInterfaceSession(Array.from(new Set(sessions)).length)\n            this.getInterfaceSolves([])\n            let allSolves = []\n            for (const solve of solves){\n              if (Math.max.apply(Math,sessions) === solve.session){\n                allSolves = [solve, ...allSolves]\n                this.getSessionNameOnLoad(solve.sessionname, solve.puzzle)\n                this.isSessionName(solve.sessionname)\n                this.props.scramble(solve.puzzle)\n              }\n            }\n            this.getInterfaceSolves(allSolves)\n          }\n        }\n      }\n    }\n  }\n\n  getSolvesOnMountPrevent = () => {\n    this.setState({\n      isGetSolvesOnMount: true\n    })\n  }\n\n  getUserInfo = () => {\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(!offline){\n      if (this.state.user.id){\n        fetch(\"https://blooming-hollows-98248.herokuapp.com/getuserinfo\", {\n          method: \"post\",\n          headers: {\"Content-Type\": \"application/json\"},\n          body: JSON.stringify({\n            id: this.state.user.id\n          })\n        })\n        .then(response=>response.json())\n        .then(data=>{\n          this.setState({\n            isConfirmSolveDelete: data.confirmsolve,\n            isConfirmSessionDelete: data.confirmsession,\n            inspectionTime: data.inspectiontime,\n            isMobile: data.mobile,\n            isCountDownActivated: data.inspection,\n            isBackgroundLight: data.theme,\n            scrambleQuantity: data.scramblelength,\n            aoNum: data.aonumber, \n            aoNum2: data.aonumber2, \n            isTimerDisabled: data.disabletimer,\n            isOffline: data.offline,\n            isManualEnter: data.manualenter,\n          })\n          let theme = JSON.parse(localStorage.getItem(\"theme\"))\n          localStorage.setItem(\"manualenter\", JSON.stringify(data.manualenter))\n          localStorage.setItem(\"disabletimer\", JSON.stringify(data.disabletimer))\n          localStorage.setItem(\"inspectionTime\", JSON.stringify(data.inspectiontime))\n          localStorage.setItem(\"countDown\", JSON.stringify(data.inspection))\n          localStorage.setItem(\"scrambleLength\", data.scramblelength)\n          localStorage.setItem(\"theme\", JSON.stringify(data.theme))\n          localStorage.setItem(\"ao\", JSON.stringify(data.aonumber))\n          localStorage.setItem(\"ao2\", JSON.stringify(data.aonumber2))\n          localStorage.setItem(\"solveconfirm\", JSON.stringify(data.confirmsolve))\n          localStorage.setItem(\"sessionconfirm\", JSON.stringify(data.confirmsession))\n          localStorage.setItem(\"mobile\", JSON.stringify(data.mobile))\n          localStorage.setItem(\"offline\", JSON.stringify(data.offline))\n          if (data.theme !== theme){\n            this.setState({\n              isBackgroundLight: data.theme,\n            })\n            if (theme){\n              this.dark()\n            }else{\n              this.light()\n            }\n            localStorage.setItem(\"theme\", JSON.stringify(data.theme))\n          }\n        })\n      }else{\n        this.props.scramble(\"3x3\")\n      }\n    }\n    this.receive()\n  }\n\n  send = (input) => {\n    //testing storing all solves in one cell\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(!offline){\n      fetch(\"https://blooming-hollows-98248.herokuapp.com/sendsolves\",{\n        method: \"put\",\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({\n          id: this.state.user.id,\n          solves: {\"allsolves\": input},\n        })\n      }).then(response=>response.json())\n    }\n  }\n\n  getInterfaceSolves = (input) => {\n    this.setState({\n      solvesInterface: input\n    })\n  }\n\n  getInterfaceSolvesSingle = (input) => {\n    this.setState({\n      solvesInterface: [...this.state.solvesInterface, input]\n    })\n  }\n\n  isNewSessionFunction = (input) => {\n    //checks to see if new session has just been created\n    this.setState({\n      isNewSession: input\n    })\n  }\n\n  clearSessionInterfaceSolves = () => {\n    this.setState({\n      solvesInterface: []\n    })\n  }\n\n  disableTimer = () => {\n    //Toggles timer disable in database\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(offline){\n      localStorage.setItem(\"disabletimer\", JSON.stringify(!this.state.isTimerDisabled))\n    }else{\n      fetch(\"https://blooming-hollows-98248.herokuapp.com/disabletimer\", {\n        method: \"post\",\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({\n          id: this.state.user.id,\n          disabletimer: !this.state.isTimerDisabled,\n        })\n      }).then(response=>response.json())\n    }\n    this.setState({\n      isTimerDisabled: !this.state.isTimerDisabled\n    })\n  }\n\n  manualEnter = () => {\n    //Toggles session delete confirm in database\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(offline){\n      localStorage.setItem(\"manualenter\", JSON.stringify(!this.state.isManualEnter))\n    }else{\n      fetch(\"https://blooming-hollows-98248.herokuapp.com/manualenter\", {\n        method: \"post\",\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({\n          id: this.state.user.id,\n          manualenter: !this.state.isManualEnter,\n        })\n      }).then(response=>response.json())\n    }\n    this.setState({\n      isManualEnter: !this.state.isManualEnter\n    })\n  }\n\n  confirmSessionDelete = () => {\n    //Toggles session delete confirm in database\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(offline){\n      localStorage.setItem(\"sessionconfirm\", JSON.stringify(!this.state.isConfirmSessionDelete))\n    }else{\n      fetch(\"https://blooming-hollows-98248.herokuapp.com/confirmsession\", {\n        method: \"post\",\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({\n          id: this.state.user.id,\n          confirmSession: !this.state.isConfirmSessionDelete,\n        })\n      }).then(response=>response.json())\n    }\n    this.setState({\n      isConfirmSessionDelete: !this.state.isConfirmSessionDelete\n    })\n  }\n\n  mobileStartStop = () => {\n    //Toggles mobile in database\n    //If on, there is clickable start button\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(offline){\n      localStorage.setItem(\"mobile\", JSON.stringify(!this.state.isMobile))\n      this.setState({\n        isMobile: !this.state.isMobile\n      })\n    }else{\n      fetch(\"https://blooming-hollows-98248.herokuapp.com/mobile\", {\n        method: \"post\",\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({\n          id: this.state.user.id,\n          mobile: !this.state.isMobile,\n        })\n      }).then(response=>response.json())\n      .then(\n        this.setState({\n          isMobile: !this.state.isMobile\n        })\n      )\n    }\n  }\n\n  confirmSolveDelete = () => {\n    //Toggles solve delete confirm in database\n    //If on, user is asked if they want to delete solves\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(offline){\n      localStorage.setItem(\"solveconfirm\", JSON.stringify(!this.state.isConfirmSolveDelete))\n      this.setState({\n        isConfirmSolveDelete: !this.state.isConfirmSolveDelete\n      })\n    }\n    fetch(\"https://blooming-hollows-98248.herokuapp.com/confirmsolve\", {\n      method: \"post\",\n      headers: {\"Content-Type\": \"application/json\"},\n      body: JSON.stringify({\n        id: this.state.user.id,\n        confirmSolve: !this.state.isConfirmSolveDelete,\n      })\n    }).then(response=>response.json())\n    .then(\n      this.setState({\n        isConfirmSolveDelete: !this.state.isConfirmSolveDelete\n      })\n    )\n  }\n\n  removeFromSolves = (session) => {\n    //Removes solves based on session parameter\n    this.setState({\n      solves: [...this.state.solves].filter(solve=>{\n        return solve.session !== session\n      })\n    })\n  }\n\n  removeFromSolvesInterface = (session) => {\n    //Removes solves based on session parameter\n    this.setState({\n      solvesInterface: [...this.state.solvesInterface].filter(solve=>{\n        return solve.session !== session\n      })\n    })\n  }\n\n  getAllSolves = (input) => {\n    this.setState({\n      solves: input\n    })\n  }\n\n  inspection = () => {\n    //Toggles when inspection time runs or not\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(offline){\n      localStorage.setItem(\"countDown\", JSON.stringify(!this.state.isCountDownActivated))\n      this.setState({\n        isCountDownActivated: !this.state.isCountDownActivated\n      })\n    }else{\n      fetch(\"https://blooming-hollows-98248.herokuapp.com/inspection\", {\n        method: \"post\",\n        headers: {\"Content-Type\": \"application/json\"},\n        body: JSON.stringify({\n          id: this.state.user.id,\n          inspection: !this.state.isCountDownActivated,\n        })\n      }).then(response=>response.json())\n      .then(\n        this.setState({\n          isCountDownActivated: !this.state.isCountDownActivated\n        })\n      )\n    }\n  }\n\n  isSessionName = (input) => {\n    //updates state so that timer interface know whether \n    //or not to display session name\n    if(input===null||input===\"\"){\n      this.setState({\n        isSessionName: false,\n      })\n    }else{\n      this.setState({\n        isSessionName: true,\n      })\n    }\n  }\n\n\n  changeInspectionTime = (input) => {\n    //increases inspection time\n      let offline = JSON.parse(localStorage.getItem(\"offline\"))\n      if(offline){\n        localStorage.setItem(\"inspectionTime\", JSON.stringify(input))\n      }else{\n        fetch(\"https://blooming-hollows-98248.herokuapp.com/inspectiontime\", {\n          method: \"put\",\n          headers: {\"Content-Type\": \"application/json\"},\n          body: JSON.stringify({\n            id: this.state.user.id,\n            time: input\n          })\n        }).then(response=>response.json())\n      }\n      this.setState({\n        inspectionTime: input\n      })\n    // }\n  }\n\n  removeFromUniqueSessionsDB = (input) => {\n    let x\n    if (this.state.uniqueSessionsDB.length>0){\n      x = this.state.uniqueSessionsDB.filter(item => item !== input)\n    }\n    if(this.state.uniqueSessionsDB.length===0){\n      x = [1]\n      this.setState({\n        sessionInterface: 1\n      })\n    }\n    this.setState({\n      uniqueSessionsDB: x\n    })\n  }\n\n  addToUniqueSessionsDB = (input) => {\n    if (this.state.uniqueSessionsDB.length===0){\n      this.setState({\n        uniqueSessionsDB: [1]\n      })\n    }else if (input.length>1){\n      this.setState({\n        uniqueSessionsDB: input\n      })\n    }else{\n      this.setState({\n        uniqueSessionsDB: [...this.state.uniqueSessionsDB,input]\n      })\n    }\n  }\n\n  addToUniqueSessionsDBOnMount = (input) => {\n    if (input.length>1){\n      this.setState({\n        uniqueSessionsDB: input\n      })\n    }else if (input.length===1){\n      this.setState({\n        uniqueSessionsDB: [...this.state.uniqueSessionsDB,input]\n      })\n    }else{\n      this.setState({\n        uniqueSessionsDB: [1]\n      })\n    }\n  }\n\n  clearSolvesState = () => {\n    this.setState({\n      solves: []\n    })\n  }\n\n  newSessionApp = () => {\n    //changes route\n    this.setState({\n      isCreateNewSession: true\n    })\n  }\n\n  createNewSession = (input) => {\n    //creates new session after options have been selected\n    //and changes route\n    this.setState({\n      isCreateNewSession: false,\n    })\n    this.setState({\n      puzzleType: input\n    })\n  }\n\n  sessionName = (name) => {\n    //updates session name on interface\n    this.setState({\n      sessionName: name\n    })\n  }\n\n  signIn = () => {\n    // route switch \n    this.setState ({\n      isHome: !this.state.isHome,\n    })\n  }\n\n  dashboard = () => {\n    // route switch\n    this.setState({\n      isDashboard: !this.state.isDashboard,\n      isHome: !this.state.isHome,\n    })\n  }\n\n  signedIn = () => {\n    // route switch \n    this.setState ({\n      isSignedIn: !this.state.isSignedIn,\n    })\n  }\n\n  register = () => {\n    //route switch\n    this.setState ({\n      isRegistered: !this.state.isRegistered,\n    })\n  }\n\n  dark = () => {\n    //changes theme to dark\n    document.body.style.backgroundColor = \"rgb(23,23,23)\"\n    this.setState({\n      isBackgroundLight: false,\n    })\n    localStorage.setItem(\"theme\", JSON.stringify(false))\n  }\n\n  light = () => {\n    // changes theme to light\n    document.body.style.backgroundColor = \"whitesmoke\"\n    this.setState({\n      isBackgroundLight: true,\n    })\n    localStorage.setItem(\"theme\", JSON.stringify(true))\n  }\n\n  loadUser = (data) => {\n    // loads user data when sign in successful\n    this.setState ({ \n      user:{\n        username: data.username,\n        id: data.id,\n      },\n      scrambleQuantity: data.scramblelength,\n      isBackgroundLight: data.theme,\n      aoNum: data.aonumber,\n      aoNum2: data.aonumber2,\n      isCountDownActivated: data.inspection, \n      inspectionTime: data.inspectiontime,\n      isMobile: data.mobile,\n      isTimerDisabled: data.disabletimer,\n      isConfirmSolveDelete: data.confirmsolve,\n      isConfirmSessionDelete: data.confirmsession,\n      isOffline: data.offline,\n      isManualEnter: data.manualenter,\n    })\n    if(data.theme){\n      document.body.style.backgroundColor = \"whitesmoke\"\n    }else{\n      document.body.style.backgroundColor = \"rgb(23,23,23)\"\n    }\n    this.receive()\n    localStorage.setItem(\"manualenter\", JSON.stringify(data.manualenter))\n    localStorage.setItem(\"disabletimer\", JSON.stringify(data.disabletimer))\n    localStorage.setItem(\"inspectionTime\", JSON.stringify(data.inspectiontime))\n    localStorage.setItem(\"countDown\", JSON.stringify(data.inspection))\n    localStorage.setItem(\"scrambleLength\", data.scramblelength)\n    localStorage.setItem(\"theme\", JSON.stringify(data.theme))\n    localStorage.setItem(\"ao\", JSON.stringify(data.aonumber))\n    localStorage.setItem(\"ao2\", JSON.stringify(data.aonumber2))\n    localStorage.setItem(\"solveconfirm\", JSON.stringify(data.confirmsolve))\n    localStorage.setItem(\"sessionconfirm\", JSON.stringify(data.confirmsession))\n    localStorage.setItem(\"mobile\", JSON.stringify(data.mobile))\n    localStorage.setItem(\"offline\", JSON.stringify(data.offline))\n  }\n\n  getTheme = () => {\n    // gets theme from local storage\n    if(this.state.user.id.length){\n      if(localStorage.theme){\n        let x = JSON.parse(localStorage.getItem(\"theme\"))\n        if (x !== true) {\n          document.body.style.backgroundColor = \"rgb(23,23,23)\"\n          this.setState({\n            isBackgroundLight: x\n          })\n        }\n      }\n    }\n  }\n\n  signout = () => {\n    //resets settings when signout clicked\n    this.setState({\n      user: {\n        username: \"\",\n        password: \"\",\n        id: 0,\n      },\n      aoNum: 5, \n      aoNum2: 12,\n      scrambleQuantity: 22,\n      isSignedIn: false,\n      isDashboard: false,\n      isHome: true,\n      isRegistered: false,\n      isBackgroundLight: true,\n      puzzleType: \"3x3\",\n      solves: [],\n      isCountDownActivated: false,\n      inspectionTime: 0,\n      solvesInterface: [],\n      isMobile: false,\n      isGetSolvesOnMount: false,\n      isManualEnter: false,\n    })\n    document.body.style.backgroundColor = \"whitesmoke\"\n    localStorage.removeItem(\"manualenter\")\n    localStorage.removeItem(\"mobile\")\n    localStorage.removeItem(\"sessionconfirm\")\n    localStorage.removeItem(\"theme\")\n    localStorage.removeItem(\"user\")\n    localStorage.removeItem(\"lastsession\")\n    localStorage.removeItem(\"isCountDownActivated\")\n    localStorage.removeItem(\"ao\")\n    localStorage.removeItem(\"ao2\")\n    localStorage.removeItem(\"inspectionTime\") \n    localStorage.removeItem(\"solveconfirm\")\n    localStorage.removeItem(\"xyz\")\n    localStorage.removeItem(\"color\")\n    localStorage.removeItem(\"offline\")\n    localStorage.setItem(\"countDown\", JSON.stringify(false))\n    localStorage.setItem(\"scrambleLength\", 22)\n    this.props.scramble(\"3x3\")\n  }\n\n  setScrambleLength = () => {\n    //sets length of scramble stored in localStorage\n    let scramble \n    if(localStorage.scrambleLength){\n      scramble = Number(localStorage.getItem(\"scrambleLength\"))\n    }else{\n      scramble = 22\n    }\n    this.setState({\n      scrambleQuantity: scramble\n    })\n  }\n\n  getSessionNameOnLoad = (name, puzzle) =>{\n    //gets session name and puzzle type \n    if (name === null||name===\"\"){\n      this.setState({\n        isSessionName: false,\n      })\n    }\n    this.setState({\n      sessionName: name,\n      puzzleType: puzzle\n    })\n  }\n\n  loadPastSessionSolveData = (session, index, boolean) => {\n    //resumes session from saved solves list when clicked\n    this.clearScramble()\n    this.setState({\n      sessions: session,\n      sessionInterface: index,\n      // sessions: session,\n      // sessionInterface: index,\n    })\n    if(boolean===true){\n      this.setState({\n      isHome: true,\n      isDashboard: false,\n      })\n    }\n    let allSolves = []\n      for (const solve of this.state.solves){\n        if (session === solve.session){\n          allSolves = [solve, ...allSolves]\n          this.getSessionNameOnLoad(solve.sessionname, solve.puzzle)\n          this.isSessionName(solve.sessionname)\n          this.props.scramble(solve.puzzle)\n        }\n      }\n      this.getInterfaceSolves(allSolves)\n  }\n\n  getSessionNumber = (input) => {\n    this.setState({\n      sessions: input\n    })\n  }\n\n  getInterfaceSession = (input) => {\n    this.setState({\n      sessionInterface: input\n    })\n  }\n\n  aoNumChange = (input) => {\n    this.setState({\n      aoNum: input\n    })\n  }\n\n  aoNumChange2 = (input) => {\n    this.setState({\n      aoNum2: input\n    })\n  }\n\n  getSolveFromInterface = (input) =>{\n    //gets solve when timer stops\n    //puts it into solve in state\n    this.setState({\n      solves: [...this.state.solves, input]\n    })\n  }\n\n  getSolvesFromImportManual = (input) => {\n    //gets solves when user manually imports\n    let solves = [...this.state.solves, input]\n    this.send(solves)\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(offline){\n      localStorage.setItem(\"offlinesolves\", JSON.stringify({\"solves\":[...solves]}))\n    }\n    this.setState({\n      solves: solves\n    })\n  }\n\n  getSolvesFromImport = (input) => {\n    let solves = [...this.state.solves.concat(...input)]\n    this.send(solves)\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(offline){\n      localStorage.setItem(\"offlinesolves\", JSON.stringify({\"solves\":[...solves]}))\n    }\n    this.setState({\n      solves: solves\n    })\n  }\n\n  fire = (particleRatio, opts, x) => {\n    var count = 500;\n    var defaults = {\n      origin: { y: -.9, x:x },\n      decay: 200,\n      angle: 270,\n      ticks: 300,\n    };\n    confetti(Object.assign({}, defaults, opts, {\n      particleCount: Math.floor(count * particleRatio)\n    }));\n  }\n\n  confettiLaunch = () => {\n    this.fire(0.25, {\n      spread: 26,startVelocity: 55,\n    },.5)\n    this.fire(0.2, {\n      spread: 60,\n    },.5);\n    this.fire(0.35, {\n      spread: 100,\n      decay: 0.91,\n    },.5);\n    this.fire(0.1, {\n      spread: 120,\n      startVelocity: 25,\n      decay: 0.92,\n    },.5);\n    this.fire(0.1, {\n      spread: 120,\n      startVelocity: 45,\n    },.5);\n    this.fire(0.25, \n      {spread: 26,\n      startVelocity: 55,})\n    this.fire(0.2, {\n      spread: 60,\n    },.8);\n    this.fire(0.35, {\n      spread: 100,\n      decay: 0.91,\n    },.8);\n    this.fire(0.1, {\n      spread: 120,\n      startVelocity: 25,\n      decay: 0.92,\n    },.8);\n    this.fire(0.1, {\n      spread: 120,\n      startVelocity: 45,\n    },.2);\n    this.fire(0.25, \n      {spread: 26,\n      startVelocity: 55,})\n    this.fire(0.2, {\n      spread: 60,\n    },.2);\n    this.fire(0.35, {\n      spread: 100,\n      decay: 0.91,\n    },.2);\n    this.fire(0.1, {\n      spread: 120,\n      startVelocity: 25,\n      decay: 0.92,\n    },.2);\n    this.fire(0.1, {\n      spread: 120,\n      startVelocity: 45,\n    },.2);\n  }\n  \n  componentDidMount() {\n    // console.log(Object.keys(localStorage))\n    // console.log(localStorage)\n    setTimeout(()=>this.getUserInfo(),10)\n    if (localStorage.user){\n      let y = JSON.parse(localStorage.getItem(\"user\"))\n      this.setState({\n        user: y,\n        isSignedIn: true,\n      })\n    }\n  }\n\n  removeSolveFromState = (solveid, milliseconds) => {\n    //removes solve when user clicks \"remove\"\n    //on interface page \n    let solves = this.state.solves.filter(solve=> {\n      return solveid !== solve.solveid && milliseconds !== solve.milliseconds\n    })\n    this.setState({\n      solvesInterface: this.state.solvesInterface.filter(solve=>{\n        return solveid !== solve.solveid && milliseconds !== solve.milliseconds\n      }),\n      solves: solves\n    })\n    this.send(solves)\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(offline){\n      localStorage.setItem(\"offlinesolves\", JSON.stringify({\"solves\":[...solves]}))\n    }\n  }\n\n  removeSolveFromSolvesState = (solveid, milliseconds) => {\n    //removes solve when user clicks \"remove\"\n    //on interface page \n    this.setState({\n      solves: this.state.solves.filter(solve=>{\n        return solveid !== solve.solveid && milliseconds !== solve.milliseconds\n      })\n    })\n  }\n\n  togglePlusTwo = (input) => {\n    let solves = []\n    for(const solve of this.state.solves) {\n      if (solve.solveid === input){\n        let x = !solve.isplustwo\n        solve[\"isplustwo\"] = x\n      }\n      solves = [...solves, solve]\n    }\n    this.setState({\n      solves: solves\n    })\n    this.send(solves)\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(offline){\n      localStorage.setItem(\"offlinesolves\", JSON.stringify({\"solves\":[...solves]}))\n    }\n  }\n\n  toggleDNF = (input) => {\n    let xyz = []\n    for (const solve of this.state.solves){\n      if (solve.solveid === input){\n        solve[\"isdnf\"] = !solve.isdnf\n      }\n      xyz = [...xyz, solve]\n    }\n    this.setState({\n      solves: xyz\n    })\n    this.send(xyz)\n    let offline = JSON.parse(localStorage.getItem(\"offline\"))\n    if(offline){\n      localStorage.setItem(\"offlinesolves\", JSON.stringify({\"solves\":[...xyz]}))\n    }\n  }\n  \n  getNewUsername = (input) => {\n    this.setState({\n      user: { \n        username: input,\n        id: this.state.user.id\n      }\n    })\n    localStorage.setItem(\"user\", JSON.stringify(this.state.user))\n  }\n  \n  clearScramble = () => {\n    this.setState({\n      multiBLDScramble: \"\",\n      scramble: \"\",\n      megaminxScramble: \"\",\n    })\n  }\n  \n  test = () => {\n    console.log(this.state.solves)\n  }\n\n    render() {   \n      return (\n      <div> \n        {/* <button onClick={this.test}>uniqueSessionsDB</button>  */}\n        { this.state.isHome \n        ? \n        (this.state.isCreateNewSession ? \n          <NewSessionOptions \n          clearSessionInterfaceSolves={this.clearSessionInterfaceSolves}\n          clearScramble={this.clearScramble}\n          scramble={this.props.scramble}\n          solves={this.state.solves}\n          isNewSessionFunction={this.isNewSessionFunction}\n          isNewSession={this.state.isNewSession}\n          addToUniqueSessionsDB={this.addToUniqueSessionsDB}\n          getSessionNumber={this.getSessionNumber}\n          uniqueSessionsDB={this.state.uniqueSessionsDB}\n          getInterfaceSession={this.getInterfaceSession}\n          isSessionName={this.isSessionName} \n          createNewSession={this.createNewSession} \n          sessionNameOnChange={this.sessionName} \n          isBackgroundLight={this.state.isBackgroundLight}\n          />\n          :\n          <div>\n            <TimerInterface \n            isManualEnter={this.state.isManualEnter}\n            clearScramble={this.clearScramble}\n            isDisplayScrambleMedium={this.props.isDisplayScrambleMedium}\n            isDisplayScrambleSmall={this.props.isDisplayScrambleSmall}\n            multiBLDScramble={this.props.multiBLDScramble}\n            scrambleRegular={this.props.scrambleRegular}\n            megaminxScramble={this.props.megaminxScramble}\n            scramble={this.props.scramble}\n            isGetSolvesOnMount={this.state.isGetSolvesOnMount}\n            getSolvesOnMountPrevent={this.getSolvesOnMountPrevent}\n            getSessionNumber={this.getSessionNumber}\n            addToUniqueSessionsDBOnMount={this.addToUniqueSessionsDBOnMount}\n            getAllSolves={this.getAllSolves}\n            send={this.send}\n            removeSolveFromSolvesState={this.removeSolveFromSolvesState}\n            isTimerDisabled={this.state.isTimerDisabled}\n            isMobile={this.state.isMobile}\n            getInterfaceSession={this.getInterfaceSession}\n            getInterfaceSolvesSingle={this.getInterfaceSolvesSingle}\n            getInterfaceSolves={this.getInterfaceSolves}\n            solvesInterface={this.state.solvesInterface}\n            uniqueSessionsDB={this.state.uniqueSessionsDB}\n            isNewSessionFunction={this.isNewSessionFunction}\n            confettiLaunch={this.confettiLaunch}\n            solves={this.state.solves}\n            toggleDNF={this.toggleDNF}\n            togglePlusTwo={this.togglePlusTwo}\n            isConfirmSolveDelete={this.state.isConfirmSolveDelete}\n            removeSolveFromState={this.removeSolveFromState} \n            getSolveFromInterface={this.getSolveFromInterface} \n            isSessionName={this.state.isSessionName} \n            isSessionNameFunc={this.isSessionName} \n            getSessionNameOnLoad={this.getSessionNameOnLoad} \n            puzzleType={this.state.puzzleType} \n            sessionName={this.state.sessionName} \n            inspectionTime={this.state.inspectionTime} \n            isCountDownActivated={this.state.isCountDownActivated} \n            aoNum={this.state.aoNum} \n            aoNum2={this.state.aoNum2} \n            sessionInterface={this.state.sessionInterface} \n            getTheme={this.getTheme} \n            newSessionApp={this.newSessionApp} \n            sessions={this.state.sessions} \n            scrambleQuantity={this.state.scrambleQuantity} \n            isBackgroundLight={this.state.isBackgroundLight} \n            dashboard={this.dashboard} \n            id={this.state.user.id}  \n            username={this.state.user.username} \n            isSignedIn={this.state.isSignedIn} \n            signIn={this.signIn}\n            />\n          </div>\n          )\n        :\n        this.state.isDashboard ?\n          <Dashboard \n          manualEnter={this.manualEnter}\n          removeFromSolvesInterface={this.removeFromSolvesInterface}\n          scramble={this.props.scramble}\n          offlineState={this.state.offline}\n          send={this.send}\n          aoNum2={this.state.aoNum2} \n          disableTimer={this.disableTimer}\n          mobileStartStop={this.mobileStartStop}\n          aoNumChange={this.aoNumChange}\n          aoNumChange2={this.aoNumChange2}\n          getNewUsername={this.getNewUsername}\n          addToUniqueSessionsDB={this.addToUniqueSessionsDB}\n          inspection={this.inspection}\n          getSessionNameOnLoad={this.getSessionNameOnLoad}\n          isConfirmSessionDelete={this.state.isConfirmSessionDelete}\n          isConfirmSolveDelete={this.state.isConfirmSolveDelete}\n          confirmSessionDelete={this.confirmSessionDelete}\n          confirmSolveDelete={this.confirmSolveDelete} \n          getSolvesFromImport={this.getSolvesFromImport} \n          getSolvesFromImportManual={this.getSolvesFromImportManual} \n          removeFromSolves={this.removeFromSolves} \n          solves={this.state.solves} \n          changeInspectionTime={this.changeInspectionTime}\n          inspectionTimePlus={this.inspectionTimePlus} \n          inspectionTimeMinus={this.inspectionTimeMinus} \n          inspectionTime={this.state.inspectionTime} \n          isCountDownActivated={this.isCountDownActivated} \n          aoNum={this.state.aoNum} \n          sessionInterface={this.state.sessionInterface} \n          getSessionNumber={this.getSessionNumber} \n          sessions={this.state.sessions} \n          getInterfaceSession={this.getInterfaceSession} \n          removeFromUniqueSessionsDB={this.removeFromUniqueSessionsDB} \n          uniqueSessionsDB={this.state.uniqueSessionsDB} \n          loadPastSessionSolveData={this.loadPastSessionSolveData} \n          scrambleQuantity={this.state.scrambleQuantity} \n          scrambleQuantityMinus={this.scrambleQuantityMinus}  \n          scrambleQuantityPlus={this.scrambleQuantityPlus} \n          signout={this.signout} \n          signedIn={this.signedIn} \n          light={this.light} \n          dark={this.dark}  \n          isBackgroundLight={this.state.isBackgroundLight}  \n          signIn={this.dashboard} \n          loadUser={this.loadUser} \n          username={this.state.user.username} \n          id={this.state.user.id} \n          />\n        :\n        (this.state.isRegistered ?\n          <Register  \n          clearSolvesState={this.clearSolvesState}\n          isBackgroundLight={this.state.isBackgroundLight} \n          signedIn={this.signedIn} \n          signIn={this.signIn} \n          register={this.register} \n          loadUser={this.loadUser}\n          />\n          :\n          <SignIn \n          clearScramble={this.clearScramble}\n          user={this.state.user} \n          isBackgroundLight={this.state.isBackgroundLight}  \n          signedIn={this.signedIn} \n          signIn={this.signIn} \n          loadUser={this.loadUser} \n          register={this.register}\n          />\n        )\n      }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import React, { Component } from \"react\"\nimport App from \"./App\";\n\nconst twothree = [\n    [\"R\", \"R'\", \"R2\"], \n    [\"L\", \"L'\", \"L2\"], \n    [\"U\", \"U'\", \"U2\"], \n    [\"D\", \"D'\", \"D2\"],\n    [\"B\", \"B'\", \"B2\"], \n    [\"F\", \"F'\", \"F2\"],\n  ]\n  \n  const fourfive = [\n    [\"R\", \"R'\", \"R2\", \"Rw\", \"Rw'\", \"Rw2\"],\n    [\"L\", \"L'\", \"L2\", \"Lw\", \"Lw'\", \"Lw2\"], \n    [\"U\", \"U'\", \"U2\", \"Uw\", \"Uw'\", \"Uw2\"], \n    [\"D\", \"D'\", \"D2\", \"Dw\", \"Dw'\", \"Dw2\"],\n    [\"B\", \"B'\", \"B2\", \"Bw\", \"Bw'\", \"Bw2\"], \n    [\"F\", \"F'\", \"F2\", \"Fw\", \"Fw'\", \"Fw2\"],\n  ]\n  \n  const sixseven = [\n    [\"R\", \"R'\", \"R2\", \"Rw\", \"Rw'\", \"Rw2\", \"3Rw\", \"3Rw'\", \"3Rw2\"],\n    [\"L\", \"L'\", \"L2\", \"Lw\", \"Lw'\", \"Lw2\", \"3Lw\", \"3Lw'\", \"3Lw2\"], \n    [\"U\", \"U'\", \"U2\", \"Uw\", \"Uw'\", \"Uw2\", \"3Uw\", \"3Uw'\", \"3Uw2\"],  \n    [\"D\", \"D'\", \"D2\", \"Dw\", \"Dw'\", \"Dw2\", \"3Dw\", \"3Dw'\", \"3Dw2\"],\n    [\"B\", \"B'\", \"B2\", \"Bw\", \"Bw'\", \"Bw2\", \"3Bw\", \"3Bw'\", \"3Bw2\"], \n    [\"F\", \"F'\", \"F2\", \"Fw\", \"Fw'\", \"Fw2\", \"3Fw\", \"3Fw'\", \"3Fw2\"],\n  ]\n  \n  const pyraminxNotation = [\n    [\"U\", \"U'\"],\n    [\"L\", \"L'\"],\n    [\"R\", \"R'\"],\n    [\"B\", \"B'\"]\n  ]\n  \n  const pyraminxNotationEnd = [\n    [\"u\", \"u'\"],\n    [\"l\", \"l'\"],\n    [\"r\", \"r'\"],\n    [\"b\", \"b'\"]\n  ]\n  \n  const skewb = [\n    [\"U\", \"U'\"],\n    // [\"F\", \"F'\"],\n    [\"B\", \"B'\"],\n    [\"L\", \"L'\"],\n    [\"R\", \"R'\"],\n  ]\n\nclass Scramble extends Component{\n\n\n    state = {\n        isDisplayScrambleMedium: false,\n        isDisplayScrambleSmall: false,\n        multiBLDScramble: \"\",\n        scramble: \"\",\n        megaminxScramble: \"\",\n    }\n    \n    scramble = (input) => {\n        //generates scramble\n        let scramble = \"\"\n        if (input){\n          let scrambleLength \n          if (input===\"3x3\"){\n            scrambleLength=23\n            this.setState({\n              isDisplayScrambleMedium: false,\n              isDisplayScrambleSmall: false\n            })\n          }else if (input===\"3x3 BLD\"){\n            scrambleLength=23\n            this.setState({\n              isDisplayScrambleMedium: false,\n              isDisplayScrambleSmall: false\n            })\n          }else if (input===\"2x2\"){\n            scrambleLength=9\n            this.setState({\n              isDisplayScrambleMedium: false,\n              isDisplayScrambleSmall: false\n            })\n          }else if (input===\"4x4\"||input===\"4x4 BLD\"){\n            this.setState({\n              isDisplayScrambleMedium: true,\n              isDisplayScrambleSmall: true\n            })\n            scrambleLength=45\n          }else if (input===\"5x5\"||input===\"5x5 BLD\"){\n            scrambleLength=60\n            this.setState({\n              isDisplayScrambleMedium: true,\n              isDisplayScrambleSmall: true\n            })\n          }else if (input===\"6x6\"){\n            scrambleLength=80\n            this.setState({\n              isDisplayScrambleSmall: true\n            })\n          }else if (input===\"7x7\"){\n            scrambleLength=100\n            this.setState({\n              isDisplayScrambleSmall: true\n            })\n          }else if (input===\"Skewb\"){\n            scrambleLength=8\n            this.setState({\n              isDisplayScrambleMedium: false,\n              isDisplayScrambleSmall: false\n            })\n          }else if (input===\"Square-1\"){\n            scrambleLength=10\n            this.setState({\n              isDisplayScrambleMedium: false,\n              isDisplayScrambleSmall: false\n            })\n          }else if (input===\"Pyraminx\"){\n            scrambleLength=9\n            this.setState({\n              isDisplayScrambleMedium: false,\n              isDisplayScrambleSmall: false\n            })\n          }else if (input===\"3x3 OH\"){\n            scrambleLength=23\n            this.setState({\n              isDisplayScrambleMedium: false,\n              isDisplayScrambleSmall: false\n            })\n          }\n          let pastScrambles = {\n            pastScramble: null,\n            pastScramble2: null,\n          }\n          let pyraminxEnd = \"\"\n            let pyraminxNumber = Math.round(Math.random()*4)\n            for (let i = pyraminxNumber;i>0;i--){\n              const fourfour = [0,1,2,3]\n              if (pastScrambles.pastScramble !== null){\n                let i = fourfour.indexOf(pastScrambles.pastScramble)\n                fourfour.splice(i, 1)\n              }\n              if (pastScrambles.pastScramble2 !== 7){\n                let ind = fourfour.indexOf(pastScrambles.pastScramble2)\n                fourfour.splice(ind, 1)\n              }\n              let first2 =  fourfour[Math.floor(Math.random()*fourfour.length)]\n              let second2 = Math.floor(Math.random()*2)\n              pyraminxEnd  += pyraminxNotationEnd[first2][second2]\n              pyraminxEnd  += \" \"\n              pastScrambles[\"pastScramble2\"] = pastScrambles.pastScramble\n              pastScrambles[\"pastScramble\"] = first2\n            }\n          while (scrambleLength > 0) {\n              const onefour = [0,1,2,3,4,5]\n              const fourfour = [0,1,2,3]\n              scrambleLength--\n              let first =  onefour[Math.floor(Math.random()*onefour.length)]\n              let second = Math.floor(Math.random()*3)\n              if (input===\"2x2\"||input===\"3x3\" || input===\"3x3 BLD\" ||input===\"3x3 OH\"){\n                if (pastScrambles.pastScramble !== null){\n                  let i = onefour.indexOf(pastScrambles.pastScramble)\n                  onefour.splice(i, 1)\n                }\n                if (pastScrambles.pastScramble !== null){\n                  let i\n                  if (pastScrambles.pastScramble===0){\n                    i = onefour.indexOf(1)\n                    onefour.splice(i,1)\n                  }\n                  if (pastScrambles.pastScramble===1){\n                    i = onefour.indexOf(0)\n                    onefour.splice(i,1)\n                  }\n                  if (pastScrambles.pastScramble===2){\n                    i = onefour.indexOf(3)\n                    onefour.splice(i,1)\n                  }\n                  if (pastScrambles.pastScramble===3){\n                    i = onefour.indexOf(2)\n                    onefour.splice(i,1)\n                  }\n                  if (pastScrambles.pastScramble===4){\n                    i = onefour.indexOf(5)\n                    onefour.splice(i,1)\n                  }\n                  if (pastScrambles.pastScramble===5){\n                    i = onefour.indexOf(4)\n                    onefour.splice(i,1)\n                  }\n                }\n                if (pastScrambles.pastScramble2 !== 7){\n                  let ind = onefour.indexOf(pastScrambles.pastScramble2)\n                  if(onefour.includes(ind)){\n                    onefour.splice(ind, 1)\n                  }\n                }\n    \n                if (pastScrambles.pastScramble2 !== null){\n                  let i\n                  if (pastScrambles.pastScramble2===0){\n                    i = onefour.indexOf(1)\n                  }\n                  if (pastScrambles.pastScramble2===1){\n                    i = onefour.indexOf(0)\n                  }\n                  if (pastScrambles.pastScramble2===2){\n                    i = onefour.indexOf(3)\n                  }\n                  if (pastScrambles.pastScramble2===3){\n                    i = onefour.indexOf(2)\n                  }\n                  if (pastScrambles.pastScramble2===4){\n                    i = onefour.indexOf(5)\n                  }\n                  if (pastScrambles.pastScramble2===5){\n                    i = onefour.indexOf(4)\n                  }\n                  if(onefour.includes(i)){\n                    onefour.splice(i,1)\n                  }\n                }\n                first =  onefour[Math.floor(Math.random()*onefour.length)]\n                scramble += twothree[first][second] \n                pastScrambles[\"pastScramble2\"] = pastScrambles.pastScramble\n                pastScrambles[\"pastScramble\"] = first\n              }\n              if (input===\"4x4\" || input===\"4x4 BLD\"||input===\"5x5\" || input===\"5x5 BLD\"){\n                if (pastScrambles.pastScramble !== null){\n                  let a = onefour.indexOf(pastScrambles.pastScramble)\n                  onefour.splice(a, 1)\n                }\n                if (pastScrambles.pastScramble2 !== 7){\n                  let b = onefour.indexOf(pastScrambles.pastScramble2)\n                  onefour.splice(b, 1)\n                }\n                first =  onefour[Math.floor(Math.random()*onefour.length)]\n                second = Math.floor(Math.random()*6)\n                scramble += fourfive[first][second]\n                scramble += \" \"\n                pastScrambles[\"pastScramble2\"] = pastScrambles.pastScramble\n                pastScrambles[\"pastScramble\"] = first\n              }\n              if (input===\"6x6\"||input===\"7x7\"){\n                if (pastScrambles.pastScramble !== null){\n                  let c = onefour.indexOf(pastScrambles.pastScramble)\n                  onefour.splice(c, 1)\n                }\n                if (pastScrambles.pastScramble2 !== 7){\n                  let d = onefour.indexOf(pastScrambles.pastScramble2)\n                  onefour.splice(d, 1)\n                }\n                first =  onefour[Math.floor(Math.random()*onefour.length)]\n                second = Math.floor(Math.random()*9)\n                scramble += sixseven[first][second]\n                pastScrambles[\"pastScramble2\"] = pastScrambles.pastScramble\n                pastScrambles[\"pastScramble\"] = first\n              }\n              if(input === \"Pyraminx\"){\n                if (pastScrambles.pastScramble !== null){\n                  let e = fourfour.indexOf(pastScrambles.pastScramble)\n                  fourfour.splice(e, 1)\n                }\n                if (pastScrambles.pastScramble2 !== 7){\n                  let f = fourfour.indexOf(pastScrambles.pastScramble2)\n                  fourfour.splice(f, 1)\n                }\n                first =  fourfour[Math.floor(Math.random()*fourfour.length)]\n                second = Math.floor(Math.random()*2)\n                scramble += pyraminxNotation[first][second]\n                pastScrambles[\"pastScramble2\"] = pastScrambles.pastScramble\n                pastScrambles[\"pastScramble\"] = first\n              }\n              if(input === \"Skewb\"){\n                if (pastScrambles.pastScramble !== null){\n                  let g = fourfour.indexOf(pastScrambles.pastScramble)\n                  fourfour.splice(g, 1)\n                }\n                if (pastScrambles.pastScramble2 !== 7){\n                  let h = fourfour.indexOf(pastScrambles.pastScramble2)\n                  fourfour.splice(h, 1)\n                }\n                first =  fourfour[Math.floor(Math.random()*fourfour.length)]\n                second = Math.floor(Math.random()*2)\n                scramble += skewb[first][second]\n                pastScrambles[\"pastScramble2\"] = pastScrambles.pastScramble\n                pastScrambles[\"pastScramble\"] = first\n              }\n              scramble += \" \" \n            }\n            if (input===\"Clock\") {\n              this.setState({\n                isDisplayScrambleMedium: true,\n                isDisplayScrambleSmall: true\n              })\n              let end = Math.round(Math.random()*4)\n              let endOptions = [\"UR\", \"DR\", \"DL\", \"UL\"]\n              scramble += \"UR\"\n              scramble+= this.clockPuzzle()\n              scramble += \"DR\"\n              scramble+= this.clockPuzzle()\n              scramble += \"UR\"\n              scramble+= this.clockPuzzle()\n              scramble += \"DL\"\n              scramble+= this.clockPuzzle()\n              scramble += \"UL\"\n              scramble+= this.clockPuzzle()\n              scramble += \"U\"\n              scramble+= this.clockPuzzle()\n              scramble += \"R\"\n              scramble+= this.clockPuzzle()\n              scramble += \"D\"\n              scramble+= this.clockPuzzle()\n              scramble += \"L\"\n              scramble+= this.clockPuzzle()\n              scramble += \"ALL\"\n              scramble+= this.clockPuzzle()\n              scramble += \"y2 \"\n              scramble += \"U\"\n              scramble+= this.clockPuzzle()\n              scramble += \"R\"\n              scramble+= this.clockPuzzle()\n              scramble += \"D\"\n              scramble+= this.clockPuzzle()\n              scramble += \"L\"\n              scramble+= this.clockPuzzle()\n              scramble += \"ALL\"\n              scramble+= this.clockPuzzle()\n              if (end===3){\n                for (const letter of endOptions){\n                  scramble+= letter\n                  scramble += \" \"\n                }\n              }\n              if (end===2){\n                endOptions.splice(Math.round(Math.random()*3))\n                for (const letter of endOptions){\n                  scramble+= letter\n                  scramble += \" \"\n                }\n              }\n              if (end===1){\n                endOptions.splice(Math.round(Math.random()*3))\n                endOptions.splice(Math.round(Math.random()*2))\n                for (const letter of endOptions){\n                  scramble+= letter\n                  scramble += \" \"\n                }\n              }\n            }\n          \n          if (input===\"Square-1\"){\n            let arrayTop = []\n            let arrayBottom = []\n            let topRunningTotal = 0\n            let bottomRunningTotal = 0\n            let firstValueTop= [0, 1, 3, 4, 6, -2, -3, -5]\n            let valueTop = [1, 4, -2, -5]\n            let valueTop2 = [0, 3, 6, -3]\n            let valueBottomA = [0, 3, 6, -3]\n            let valueBottomB= [2, 5, -1, -4]\n            let one = firstValueTop[Math.floor(Math.random()*8)]\n            topRunningTotal+=one\n            let two\n            if (valueTop.includes(one)){\n              two = valueBottomA[Math.floor(Math.random()*4)]\n            }else if (valueTop2.includes(one)){\n              two = valueBottomB[Math.floor(Math.random()*4)]\n            }\n            bottomRunningTotal+=two\n            arrayTop.push(one)\n            arrayBottom.push(two)\n            \n            let valueTop3 = [0, 1, 3, 4, 6, -2, -3, -5]\n            let valueTop4 = [0,2,3,5,6,-1,-3,-4] \n            for (let i = 5; i>0; i--){\n              //top flush bottom not\n              let valueBottom = [0, 3, 6,-3]\n              //top and bottom not flush\n              let valueBottom2 = [1, 4, -2,-5]\n              //top and bottoma flush\n              let valueBottom3 = [-1, -4, 2, 5]\n              //top not flush bottom is\n              let valueBottom4 = [0, 3,-3, 6]\n              if (topRunningTotal%3===0){\n                one = valueTop3[Math.floor(Math.random()*8)]\n              }else if (topRunningTotal%3!==0){\n                one = valueTop4[Math.floor(Math.random()*7)]\n              }\n              topRunningTotal+=one\n              arrayTop.push(one)\n              if(bottomRunningTotal%3===0){\n                if (topRunningTotal%3!==0){\n                  if (one===0){\n                    valueBottom4.shift()\n                  }\n                  if (one===6){\n                    valueBottom4.pop()\n                  }\n                  two = valueBottom4[Math.floor(Math.random()*valueBottom4.length)]\n                }else if (topRunningTotal%3===0){\n                  two = valueBottom3[Math.floor(Math.random()*4)]\n                }\n              }else if(bottomRunningTotal%3!==0){\n                if (topRunningTotal%3!==0){\n                  two = valueBottom2[Math.floor(Math.random()*4)]\n                }else if (topRunningTotal%3===0){\n                  two = valueBottom[Math.floor(Math.random()*4)]\n                }\n              }\n              arrayBottom.push(two)\n              bottomRunningTotal+=two\n            }\n      \n            let scrambleEnd = \"\"\n      \n            if(topRunningTotal%3!==0 && bottomRunningTotal%3===0){\n              arrayTop.push(-1)\n              arrayBottom.push(0)\n              topRunningTotal-=1\n              let scrambleOptions = [\"(3,0)/ (2,-3)/ (4,-3)/ (3,-3)/ (1,-3)\", \"(-3,6)/ (0,1)/ (-4,0)/ (2,2)\", \"(-3,6)/ (0,1)/ (-4,0)/ (2,2)/ (2,-3)\",\n              \"(3,0)/ (2,-3)/ (4,-3)/ (3,-3)\", \"(3,-3)/ (-3,6)/ (-5,0)/ (-1,-3)/ (1,0)\", \"(3,-3)/ (-3,6)/ (-5,0)/ (-1,-3)\", \"(3,0)/ (1,0)/ (2,-1)/ (-3,4)/ (5,0)\",\n              \"(3,0)/ (1,0)/ (2,-1)/ (-3,4)\", \"(6,3)/ (3,0)/ (-2,2)/ (0,2)/ (-2,-2)\", \"(6,3)/ (3,0)/ (-2,2)/ (0,2)/ (-2,0)\", \"(-3,0)/ (-2,-1)/ (-4,0)/ (0,3)/ (2,6)\",\n              \"(6,3)/ (3,0)/ (-2,2)/ (0,2)/ (5,4)\", \"(6,3)/ (3,0)/ (-2,2)/ (0,2)\", \"(-3,0)/ (-2,-1)/ (-4,0)/ (0,3)\", \"(-3,0)/ (-2,-1)/ (-4,0)/ (0,3)/ (-2,3)\",]\n              scrambleEnd+=scrambleOptions[Math.floor(Math.random()*scrambleOptions.length)]\n            }else if(bottomRunningTotal%3!==0 && topRunningTotal%3===0){\n              arrayTop.push(1)\n              arrayBottom.push(0)\n              topRunningTotal+=1\n              let scrambleOptions2 = [\"(3,0)/ (2,-3)/ (0,-2)/ (6,-2)/ (2,-4)\", \"(3,0)/ (2,-3)/ (0,-2)/ (6,-2)\", \"(3,0)/ (2,-3)/ (4,-2)/ (2,0)/ (0,-2)\",\n              \"(0,3)/ (2,1)/ (3,-2)/ (1,-4)/ (2,0)\", \"(0,3)/ (2,1)/ (3,-2)/ (1,-4)\", \"(0,3)/ (-4,1)/ (2,-2)/ (-2,6)/ (-4,0)\", \"(3,3)/ (2,-3)/ (4,0)/ (-2,2)/ (-4,1)\",\n              \"(3,3)/ (2,-3)/ (4,0)/ (-2,2)\", \"(3,3)/ (-4,0)/ (1,5)/ (5,-1)/ (-3,0)\", \"(6,3)/ (-2,3)/ (2,2)/ (6,0)/ (2,1)\", \"(6,3)/ (-2,3)/ (2,2)/ (6,0)\",\n              \"(6,3)/ (-2,3)/ (-4,2)/ (0,1)/ (-4,0)\", \"(6,3)/ (-2,3)/ (-4,2)/ (0,1)\", \"(3,6)/ (-2,3)/ (5,-4)/ (1,-3)/ (-3,3)\", \"(3,6)/ (-2,3)/ (5,-4)/ (1,-3)\",]\n              scrambleEnd+=scrambleOptions2[Math.floor(Math.random()*scrambleOptions2.length)]\n            }\n    \n            for (let i = 0;i<7;i++){\n              scramble+=\"(\"+ arrayTop[i] + \",\" + arrayBottom[i] + \")\" \n              scramble+= \"/ \"\n            }\n            scramble+=scrambleEnd\n          }\n    \n          let megaminxScramble = \"\"\n          if (input===\"Megaminx\"){\n            let letters = [\"D\", \"R\", \"D\", \"R\", \"D\", \"R\", \"D\", \"R\", \"D\", \"R\", \"U\"]\n            for (let i = 7; i>0; i--){\n              for (const letter of letters){\n                let chance = Math.ceil(Math.random()*2)\n                if (letter===\"D\" || letter===\"R\"){\n                  megaminxScramble += letter \n                  if (chance === 1){\n                    megaminxScramble += \"++ \"\n                  }else {\n                    megaminxScramble += \"-- \"\n                  }\n                }\n                if (letter===\"U\"){\n                  megaminxScramble += letter \n                  if (chance===1){\n                    megaminxScramble += \"'\"\n                  }else{\n                    megaminxScramble += \"\" \n                  }\n                }\n              }\n              megaminxScramble += \"\\n\"\n            }\n          }\n          if (input===\"Pyraminx\"){\n            scramble+=pyraminxEnd\n          }\n          let multiBLD = \"\"\n          if (input===\"Multi-BLD\"){\n            let pastScrambleObj = {\n              pastScramble: null,\n              pastScramble2: null\n            }\n            let countMultiBLD = 1\n            while (countMultiBLD < 6) {\n              let y = 23\n              multiBLD += countMultiBLD + \")\"\n              multiBLD += \" \"\n              while(y>0){\n                const onefour = [0,1,2,3,4,5]\n                if (pastScrambleObj.pastScramble !== null){\n                  let i2 = onefour.indexOf(pastScrambleObj.pastScramble)\n                  onefour.splice(i2, 1)\n                }\n                if (pastScrambleObj.pastScramble2 !== null){\n                  let ind2 = onefour.indexOf(pastScrambleObj.pastScramble2)\n                  if (ind2 !== -1){\n                    onefour.splice(ind2, 1)\n                  }\n                }\n                let first2 =  onefour[Math.floor(Math.random()*onefour.length)]\n                let second2 = Math.floor(Math.random()*3)\n                multiBLD += twothree[first2][second2]\n                multiBLD += \" \"\n                pastScrambleObj[\"pastScramble2\"] = pastScrambleObj.pastScramble\n                pastScrambleObj[\"pastScramble\"] = first2\n                y--\n              }\n              multiBLD+= \"\\n\"\n              countMultiBLD++\n            }\n          }\n          this.setState({\n            multiBLDScramble: String(multiBLD),\n            scramble: String(scramble),\n            megaminxScramble: String(megaminxScramble),\n          })\n        }\n        return scramble\n      }\n    \n      clockPuzzle = () => {\n        let one = Math.ceil(Math.random()*1)\n        let two = Math.ceil(Math.random()*5)\n        let numbers = [1,2,3,4,5,6]\n        let scramble = \"\"\n        scramble += numbers[two]\n        if (one === 1){\n          scramble+= \"+ \"\n        }else{\n          scramble += \"- \"\n        }\n        return(scramble)\n      }\n\n    render(){\n        return(\n            <div>\n                <App \n                scramble={this.scramble}\n                isDisplayScrambleMedium={this.state.isDisplayScrambleMedium}\n                isDisplayScrambleSmall={this.state.isDisplayScrambleSmall}\n                multiBLDScramble={this.state.multiBLDScramble}\n                scrambleRegular={this.state.scramble}\n                megaminxScramble={this.state.megaminxScramble}\n                />\n            </div>\n        )\n    }\n}\n\nexport default Scramble","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Scramble from './Scramble';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Scramble />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}